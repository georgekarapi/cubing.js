{
  "version": 3,
  "sources": ["../../src/cubing/vendor/mpl/twsearch/index.js"],
  "sourcesContent": ["console.info(\"Loading twsearch v0.4.1-1-g57f93f92\");\n// src/js/api.ts\nimport { Alg } from \"../../../alg\";\nasync function importOnce() {\n  const fn = (await import(\"./twsearch-Q7TBHLPE.js\")).default;\n  return await fn();\n}\nvar cachedEmscriptenModule = null;\nasync function emscriptenModule() {\n  return cachedEmscriptenModule ?? (cachedEmscriptenModule = importOnce());\n}\nfunction cwrap(fn, returnType, argTypes, processReturnValue = (v) => v) {\n  const wrapped = (async () => (await emscriptenModule()).cwrap(fn, returnType, argTypes))();\n  return async (...args) => {\n    return processReturnValue((await wrapped)(...args));\n  };\n}\nvar NoSolutionError = class extends Error {\n};\nfunction parseResult(s) {\n  if (s === \"--no solution--\") {\n    throw new NoSolutionError(\"\");\n  }\n  return Alg.fromString(s);\n}\nvar stringArg = [\"string\"];\nvar setArg = cwrap(\n  \"w_arg\",\n  \"void\",\n  stringArg\n);\nvar setKPuzzleDefString = cwrap(\n  \"w_setksolve\",\n  \"void\",\n  stringArg\n);\nvar solveScramble = cwrap(\n  \"w_solvescramble\",\n  \"string\",\n  stringArg,\n  parseResult\n);\nvar solveState = cwrap(\n  \"w_solveposition\",\n  \"string\",\n  stringArg,\n  parseResult\n);\n\n// src/js/serialize.ts\nvar BLANK_LINE = \"\";\nvar END = \"End\";\nfunction sanitize(s) {\n  return s.replaceAll(/[^A-Za-z0-9]/g, \"_\");\n}\nfunction serializeKTransformationDataToTws(name, t, forScramble = false) {\n  const outputLines = [];\n  outputLines.push(\n    `${forScramble ? \"ScrambleState\" : \"MoveTransformation\"} ${sanitize(name)}`\n  );\n  for (const [orbitName, orbitData] of Object.entries(t)) {\n    outputLines.push(sanitize(orbitName));\n    outputLines.push(orbitData.permutation.join(\" \"));\n    outputLines.push(orbitData.orientation.join(\" \"));\n  }\n  outputLines.push(END);\n  outputLines.push(BLANK_LINE);\n  return outputLines.join(\"\\n\");\n}\nfunction serializeDefToTws(kpuzzle, options) {\n  let outputLines = [];\n  const def = kpuzzle.definition;\n  outputLines.push(`Name ${sanitize(def.name ?? \"CustomPuzzle\")}`);\n  outputLines.push(BLANK_LINE);\n  for (const [orbitName, orbitInfo] of Object.entries(def.orbits)) {\n    outputLines.push(\n      `Set ${sanitize(orbitName)} ${orbitInfo.numPieces} ${orbitInfo.numOrientations}`\n    );\n  }\n  outputLines.push(BLANK_LINE);\n  outputLines.push(\"StartState\");\n  if (options?.startState) {\n    outputLines.push(options?.startState);\n  } else {\n    for (const [orbitName, orbitDef] of Object.entries(def.startStateData)) {\n      outputLines.push(sanitize(orbitName));\n      outputLines.push(orbitDef.pieces.join(\" \"));\n      outputLines.push(orbitDef.orientation.join(\" \"));\n    }\n  }\n  outputLines.push(END);\n  outputLines.push(BLANK_LINE);\n  function include(moveName) {\n    if (options?.moveSubset) {\n      return options.moveSubset.includes(moveName);\n    } else {\n      return true;\n    }\n  }\n  for (const [moveName, moveDef] of Object.entries(def.moves)) {\n    if (include(moveName)) {\n      outputLines.push(serializeKTransformationDataToTws(moveName, moveDef));\n    }\n  }\n  for (const [moveName, moveAlgDef] of Object.entries(\n    def.experimentalDerivedMoves ?? {}\n  )) {\n    if (include(moveName)) {\n      const transformation = kpuzzle.algToTransformation(moveAlgDef);\n      outputLines.push(\n        serializeKTransformationDataToTws(\n          moveName,\n          transformation.transformationData\n        )\n      );\n    }\n  }\n  return outputLines.join(\"\\n\");\n}\nexport {\n  NoSolutionError,\n  serializeDefToTws,\n  serializeKTransformationDataToTws,\n  setArg,\n  setKPuzzleDefString,\n  solveScramble,\n  solveState\n};\n"],
  "mappings": "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",
  "names": []
}
