{
  "version": 3,
  "sources": ["../../../../src/cubing/vendor/gpl/cs0x7f/sq12phase/sq1-solver.js"],
  "sourcesContent": ["/*\n\nscramble_sq1.js\n\nSquare-1 Solver / Scramble Generator in JavaScript.\n\nCode by by Shuang Chen.\nCompiled to JavaScript using GWT.\n\n*/\n\nimport { randomUIntBelow } from \"random-uint-below\";\n\nfunction FullCube_copy(obj, c) {\n  obj.ul = c.ul;\n  obj.ur = c.ur;\n  obj.dl = c.dl;\n  obj.dr = c.dr;\n  obj.ml = c.ml;\n}\n\nfunction FullCube_doMove(obj, move) {\n  var temp;\n  move <<= 2;\n  if (move > 24) {\n    move = 48 - move;\n    temp = obj.ul;\n    obj.ul = ((~~obj.ul >> move) | (obj.ur << (24 - move))) & 16777215;\n    obj.ur = ((~~obj.ur >> move) | (temp << (24 - move))) & 16777215;\n  } else if (move > 0) {\n    temp = obj.ul;\n    obj.ul = ((obj.ul << move) | (~~obj.ur >> (24 - move))) & 16777215;\n    obj.ur = ((obj.ur << move) | (~~temp >> (24 - move))) & 16777215;\n  } else if (move === 0) {\n    temp = obj.ur;\n    obj.ur = obj.dl;\n    obj.dl = temp;\n    obj.ml = 1 - obj.ml;\n  } else if (move >= -24) {\n    move = -move;\n    temp = obj.dl;\n    obj.dl = ((obj.dl << move) | (~~obj.dr >> (24 - move))) & 16777215;\n    obj.dr = ((obj.dr << move) | (~~temp >> (24 - move))) & 16777215;\n  } else if (move < -24) {\n    move = 48 + move;\n    temp = obj.dl;\n    obj.dl = ((~~obj.dl >> move) | (obj.dr << (24 - move))) & 16777215;\n    obj.dr = ((~~obj.dr >> move) | (temp << (24 - move))) & 16777215;\n  }\n}\n\nfunction FullCube_getParity(obj) {\n  var a;\n  var b;\n  var cnt;\n  var i;\n  var p;\n  cnt = 0;\n  obj.arr[0] = FullCube_pieceAt(obj, 0);\n  for (i = 1; i < 24; ++i) {\n    FullCube_pieceAt(obj, i) !== obj.arr[cnt] &&\n      (obj.arr[++cnt] = FullCube_pieceAt(obj, i));\n  }\n  p = 0;\n  for (a = 0; a < 16; ++a) {\n    for (b = a + 1; b < 16; ++b) {\n      obj.arr[a] > obj.arr[b] && (p ^= 1);\n    }\n  }\n  return p;\n}\n\nfunction FullCube_getShapeIdx(obj) {\n  var dlx;\n  var drx;\n  var ulx;\n  var urx;\n  urx = obj.ur & 1118481;\n  urx |= ~~urx >> 3;\n  urx |= ~~urx >> 6;\n  urx = (urx & 15) | ((~~urx >> 12) & 48);\n  ulx = obj.ul & 1118481;\n  ulx |= ~~ulx >> 3;\n  ulx |= ~~ulx >> 6;\n  ulx = (ulx & 15) | ((~~ulx >> 12) & 48);\n  drx = obj.dr & 1118481;\n  drx |= ~~drx >> 3;\n  drx |= ~~drx >> 6;\n  drx = (drx & 15) | ((~~drx >> 12) & 48);\n  dlx = obj.dl & 1118481;\n  dlx |= ~~dlx >> 3;\n  dlx |= ~~dlx >> 6;\n  dlx = (dlx & 15) | ((~~dlx >> 12) & 48);\n  return Shape_getShape2Idx(\n    (FullCube_getParity(obj) << 24) |\n      (ulx << 18) |\n      (urx << 12) |\n      (dlx << 6) |\n      drx,\n  );\n}\n\nfunction FullCube_getSquare(obj, sq) {\n  var a;\n  var b;\n  for (a = 0; a < 8; ++a) {\n    obj.prm[a] = ~~((~~FullCube_pieceAt(obj, a * 3 + 1) >> 1) << 24) >> 24;\n  }\n  sq.cornperm = get8Perm(obj.prm);\n  sq.topEdgeFirst = FullCube_pieceAt(obj, 0) === FullCube_pieceAt(obj, 1);\n  a = sq.topEdgeFirst ? 2 : 0;\n  for (b = 0; b < 4; a += 3, ++b) {\n    obj.prm[b] = ~~((~~FullCube_pieceAt(obj, a) >> 1) << 24) >> 24;\n  }\n  sq.botEdgeFirst = FullCube_pieceAt(obj, 12) === FullCube_pieceAt(obj, 13);\n  a = sq.botEdgeFirst ? 14 : 12;\n  for (; b < 8; a += 3, ++b) {\n    obj.prm[b] = ~~((~~FullCube_pieceAt(obj, a) >> 1) << 24) >> 24;\n  }\n  sq.edgeperm = get8Perm(obj.prm);\n  sq.ml = obj.ml;\n}\n\nfunction FullCube_pieceAt(obj, idx) {\n  var ret;\n  idx < 6\n    ? (ret = ~~obj.ul >> ((5 - idx) << 2))\n    : idx < 12\n    ? (ret = ~~obj.ur >> ((11 - idx) << 2))\n    : idx < 18\n    ? (ret = ~~obj.dl >> ((17 - idx) << 2))\n    : (ret = ~~obj.dr >> ((23 - idx) << 2));\n  return ~~((ret & 15) << 24) >> 24;\n}\n\nfunction FullCube_setPiece(obj, idx, value) {\n  if (idx < 6) {\n    obj.ul &= ~(0xf << ((5 - idx) << 2));\n    obj.ul |= value << ((5 - idx) << 2);\n  } else if (idx < 12) {\n    obj.ur &= ~(0xf << ((11 - idx) << 2));\n    obj.ur |= value << ((11 - idx) << 2);\n  } else if (idx < 18) {\n    obj.dl &= ~(0xf << ((17 - idx) << 2));\n    obj.dl |= value << ((17 - idx) << 2);\n  } else {\n    obj.dr &= ~(0xf << ((23 - idx) << 2));\n    obj.dr |= value << ((23 - idx) << 2);\n  }\n}\n\nfunction FullCube_FullCube__Ljava_lang_String_2V() {\n  this.arr = [];\n  this.prm = [];\n}\n\nfunction FullCube_randomCube() {\n  var f;\n  var i;\n  var shape;\n  var edge;\n  var corner;\n  var n_edge;\n  var n_corner;\n  var rnd;\n  var m;\n  f = new FullCube_FullCube__Ljava_lang_String_2V();\n  shape = Shape_ShapeIdx[randomUIntBelow(3678)];\n  corner = (0x01234567 << 1) | 0x11111111;\n  edge = 0x01234567 << 1;\n  n_corner = n_edge = 8;\n  for (i = 0; i < 24; i++) {\n    if (((shape >> i) & 1) === 0) {\n      //edge\n      rnd = randomUIntBelow(n_edge) << 2;\n      FullCube_setPiece(f, 23 - i, (edge >> rnd) & 0xf);\n      m = (1 << rnd) - 1;\n      edge = (edge & m) + ((edge >> 4) & ~m);\n      --n_edge;\n    } else {\n      //corner\n      rnd = randomUIntBelow(n_corner) << 2;\n      FullCube_setPiece(f, 23 - i, (corner >> rnd) & 0xf);\n      FullCube_setPiece(f, 22 - i, (corner >> rnd) & 0xf);\n      m = (1 << rnd) - 1;\n      corner = (corner & m) + ((corner >> 4) & ~m);\n      --n_corner;\n      ++i;\n    }\n  }\n  f.ml = randomUIntBelow(2);\n  //\tconsole.log(f);\n  return f;\n}\n\nfunction FullCube() {}\n\nlet _ = (FullCube_FullCube__Ljava_lang_String_2V.prototype =\n  FullCube.prototype);\n_.dl = 10062778;\n_.dr = 14536702;\n_.ml = 0;\n_.ul = 70195;\n_.ur = 4544119;\nfunction Search_init2(obj) {\n  var corner;\n  var edge;\n  var i;\n  var j;\n  var ml;\n  var prun;\n  FullCube_copy(obj.Search_d, obj.Search_c);\n  for (i = 0; i < obj.Search_length1; ++i) {\n    FullCube_doMove(obj.Search_d, obj.Search_move[i]);\n  }\n  FullCube_getSquare(obj.Search_d, obj.Search_sq);\n  edge = obj.Search_sq.edgeperm;\n  corner = obj.Search_sq.cornperm;\n  ml = obj.Search_sq.ml;\n  prun = Math.max(\n    SquarePrun[(obj.Search_sq.edgeperm << 1) | ml],\n    SquarePrun[(obj.Search_sq.cornperm << 1) | ml],\n  );\n  for (i = prun; i < obj.Search_maxlen2; ++i) {\n    if (\n      Search_phase2(\n        obj,\n        edge,\n        corner,\n        obj.Search_sq.topEdgeFirst,\n        obj.Search_sq.botEdgeFirst,\n        ml,\n        i,\n        obj.Search_length1,\n        0,\n      )\n    ) {\n      for (j = 0; j < i; ++j) {\n        FullCube_doMove(obj.Search_d, obj.Search_move[obj.Search_length1 + j]);\n        //console.log(obj.Search_move[obj.Search_length1 + j]);\n      }\n      //console.log(obj.Search_d);\n      //console.log(obj.Search_move);\n      obj.Search_sol_string = Search_move2string(obj, i + obj.Search_length1);\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction Search_move2string(obj, len) {\n  var s = \"\";\n  var top = 0;\n  var bottom = 0;\n  for (var i = len - 1; i >= 0; i--) {\n    var val = obj.Search_move[i];\n    //console.log(val);\n    if (val > 0) {\n      val = 12 - val;\n      top = val > 6 ? val - 12 : val;\n    } else if (val < 0) {\n      val = 12 + val;\n      bottom = val > 6 ? val - 12 : val;\n    } else {\n      if (top === 0 && bottom === 0) {\n        s += \" / \";\n      } else {\n        s += `(${top}, ${bottom}) / `;\n      }\n      top = bottom = 0;\n    }\n  }\n  if (top !== 0 || bottom !== 0) {\n    s += `(${top}, ${bottom})`;\n  }\n  return s; // + \" (\" + len + \"t)\";\n}\n\nfunction Search_phase1(obj, shape, prunvalue, maxl, depth, lm) {\n  var m;\n  var prunx;\n  var shapex;\n  if (prunvalue === 0 && maxl < 4) {\n    return maxl === 0 && Search_init2(obj);\n  }\n  if (lm !== 0) {\n    shapex = Shape_TwistMove[shape];\n    prunx = ShapePrun[shapex];\n    if (prunx < maxl) {\n      obj.Search_move[depth] = 0;\n      if (Search_phase1(obj, shapex, prunx, maxl - 1, depth + 1, 0)) {\n        return true;\n      }\n    }\n  }\n  shapex = shape;\n  if (lm <= 0) {\n    m = 0;\n    for (;;) {\n      m += Shape_TopMove[shapex];\n      shapex = ~~m >> 4;\n      m &= 15;\n      if (m >= 12) {\n        break;\n      }\n      prunx = ShapePrun[shapex];\n      if (prunx > maxl) {\n        break;\n      } else if (prunx < maxl) {\n        obj.Search_move[depth] = m;\n        if (Search_phase1(obj, shapex, prunx, maxl - 1, depth + 1, 1)) {\n          return true;\n        }\n      }\n    }\n  }\n  shapex = shape;\n  if (lm <= 1) {\n    m = 0;\n    for (;;) {\n      m += Shape_BottomMove[shapex];\n      shapex = ~~m >> 4;\n      m &= 15;\n      if (m >= 6) {\n        break;\n      }\n      prunx = ShapePrun[shapex];\n      if (prunx > maxl) {\n        break;\n      } else if (prunx < maxl) {\n        obj.Search_move[depth] = -m;\n        if (Search_phase1(obj, shapex, prunx, maxl - 1, depth + 1, 2)) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\nfunction Search_phase2(\n  obj,\n  edge,\n  corner,\n  topEdgeFirst,\n  botEdgeFirst,\n  ml,\n  maxl,\n  depth,\n  lm,\n) {\n  var botEdgeFirstx;\n  var cornerx;\n  var edgex;\n  var m;\n  var prun1;\n  var prun2;\n  var topEdgeFirstx;\n  if (maxl === 0 && !topEdgeFirst && botEdgeFirst) {\n    return true;\n  }\n  if (lm !== 0 && topEdgeFirst === botEdgeFirst) {\n    edgex = Square_TwistMove[edge];\n    cornerx = Square_TwistMove[corner];\n    if (\n      SquarePrun[(edgex << 1) | (1 - ml)] < maxl &&\n      SquarePrun[(cornerx << 1) | (1 - ml)] < maxl\n    ) {\n      obj.Search_move[depth] = 0;\n      if (\n        Search_phase2(\n          obj,\n          edgex,\n          cornerx,\n          topEdgeFirst,\n          botEdgeFirst,\n          1 - ml,\n          maxl - 1,\n          depth + 1,\n          0,\n        )\n      ) {\n        return true;\n      }\n    }\n  }\n  if (lm <= 0) {\n    topEdgeFirstx = !topEdgeFirst;\n    edgex = topEdgeFirstx ? Square_TopMove[edge] : edge;\n    cornerx = topEdgeFirstx ? corner : Square_TopMove[corner];\n    m = topEdgeFirstx ? 1 : 2;\n    prun1 = SquarePrun[(edgex << 1) | ml];\n    prun2 = SquarePrun[(cornerx << 1) | ml];\n    while (m < 12 && prun1 <= maxl && prun1 <= maxl) {\n      if (prun1 < maxl && prun2 < maxl) {\n        obj.Search_move[depth] = m;\n        if (\n          Search_phase2(\n            obj,\n            edgex,\n            cornerx,\n            topEdgeFirstx,\n            botEdgeFirst,\n            ml,\n            maxl - 1,\n            depth + 1,\n            1,\n          )\n        ) {\n          return true;\n        }\n      }\n      topEdgeFirstx = !topEdgeFirstx;\n      if (topEdgeFirstx) {\n        edgex = Square_TopMove[edgex];\n        prun1 = SquarePrun[(edgex << 1) | ml];\n        m += 1;\n      } else {\n        cornerx = Square_TopMove[cornerx];\n        prun2 = SquarePrun[(cornerx << 1) | ml];\n        m += 2;\n      }\n    }\n  }\n  if (lm <= 1) {\n    botEdgeFirstx = !botEdgeFirst;\n    edgex = botEdgeFirstx ? Square_BottomMove[edge] : edge;\n    cornerx = botEdgeFirstx ? corner : Square_BottomMove[corner];\n    m = botEdgeFirstx ? 1 : 2;\n    prun1 = SquarePrun[(edgex << 1) | ml];\n    prun2 = SquarePrun[(cornerx << 1) | ml];\n    while (m < (maxl > 3 ? 6 : 12) && prun1 <= maxl && prun1 <= maxl) {\n      if (prun1 < maxl && prun2 < maxl) {\n        obj.Search_move[depth] = -m;\n        if (\n          Search_phase2(\n            obj,\n            edgex,\n            cornerx,\n            topEdgeFirst,\n            botEdgeFirstx,\n            ml,\n            maxl - 1,\n            depth + 1,\n            2,\n          )\n        ) {\n          return true;\n        }\n      }\n      botEdgeFirstx = !botEdgeFirstx;\n      if (botEdgeFirstx) {\n        edgex = Square_BottomMove[edgex];\n        prun1 = SquarePrun[(edgex << 1) | ml];\n        m += 1;\n      } else {\n        cornerx = Square_BottomMove[cornerx];\n        prun2 = SquarePrun[(cornerx << 1) | ml];\n        m += 2;\n      }\n    }\n  }\n  return false;\n}\n\nfunction Search_solution(obj, c) {\n  var shape;\n  obj.Search_c = c;\n  shape = FullCube_getShapeIdx(c);\n  //console.log(shape);\n  for (\n    obj.Search_length1 = ShapePrun[shape];\n    obj.Search_length1 < 100;\n    ++obj.Search_length1\n  ) {\n    //console.log(obj.Search_length1);\n    obj.Search_maxlen2 = Math.min(31 - obj.Search_length1, 17);\n    if (\n      Search_phase1(obj, shape, ShapePrun[shape], obj.Search_length1, 0, -1)\n    ) {\n      break;\n    }\n  }\n  return obj.Search_sol_string;\n}\n\nfunction Search_Search() {\n  this.Search_move = [];\n  this.Search_d = new FullCube_FullCube__Ljava_lang_String_2V();\n  this.Search_sq = new Square_Square();\n}\n\nfunction Search() {}\n\n_ = Search_Search.prototype = Search.prototype;\n_.Search_c = null;\n_.Search_length1 = 0;\n_.Search_maxlen2 = 0;\n_.Search_sol_string = null;\nlet Shape_$clinit_ran = false;\nfunction Shape_$clinit() {\n  if (Shape_$clinit_ran) {\n    return;\n  }\n  Shape_$clinit_ran = true;\n  Shape_halflayer = [0, 3, 6, 12, 15, 24, 27, 30, 48, 51, 54, 60, 63];\n  Shape_ShapeIdx = [];\n  ShapePrun = [];\n  Shape_TopMove = [];\n  Shape_BottomMove = [];\n  Shape_TwistMove = [];\n  Shape_init();\n}\n\nfunction Shape_bottomMove(obj) {\n  var move;\n  var moveParity;\n  move = 0;\n  moveParity = 0;\n  do {\n    if ((obj.bottom & 2048) === 0) {\n      move += 1;\n      obj.bottom = obj.bottom << 1;\n    } else {\n      move += 2;\n      obj.bottom = (obj.bottom << 2) ^ 12291;\n    }\n    moveParity = 1 - moveParity;\n  } while ((bitCount(obj.bottom & 63) & 1) !== 0);\n  (bitCount(obj.bottom) & 2) === 0 && (obj.Shape_parity ^= moveParity);\n  return move;\n}\n\nfunction Shape_getIdx(obj) {\n  var ret;\n  ret =\n    (binarySearch(Shape_ShapeIdx, (obj.top << 12) | obj.bottom) << 1) |\n    obj.Shape_parity;\n  return ret;\n}\n\nfunction Shape_setIdx(obj, idx) {\n  obj.Shape_parity = idx & 1;\n  obj.top = Shape_ShapeIdx[~~idx >> 1];\n  obj.bottom = obj.top & 4095;\n  obj.top >>= 12;\n}\n\nfunction Shape_topMove(obj) {\n  var move;\n  var moveParity;\n  move = 0;\n  moveParity = 0;\n  do {\n    if ((obj.top & 2048) === 0) {\n      move += 1;\n      obj.top = obj.top << 1;\n    } else {\n      move += 2;\n      obj.top = (obj.top << 2) ^ 12291;\n    }\n    moveParity = 1 - moveParity;\n  } while ((bitCount(obj.top & 63) & 1) !== 0);\n  (bitCount(obj.top) & 2) === 0 && (obj.Shape_parity ^= moveParity);\n  return move;\n}\n\nfunction Shape_Shape() {}\n\nfunction Shape_getShape2Idx(shp) {\n  var ret;\n  ret = (binarySearch(Shape_ShapeIdx, shp & 16777215) << 1) | (~~shp >> 24);\n  return ret;\n}\n\nfunction Shape_init() {\n  var count;\n  var depth;\n  var dl;\n  var done;\n  var done0;\n  var dr;\n  var i;\n  var idx;\n  var m;\n  var s;\n  var ul;\n  var ur;\n  var value;\n  var p1;\n  var p3;\n  var temp;\n  count = 0;\n  for (i = 0; i < 28561; ++i) {\n    dr = Shape_halflayer[i % 13];\n    dl = Shape_halflayer[~~(i / 13) % 13];\n    ur = Shape_halflayer[~~(~~(i / 13) / 13) % 13];\n    ul = Shape_halflayer[~~(~~(~~(i / 13) / 13) / 13)];\n    value = (ul << 18) | (ur << 12) | (dl << 6) | dr;\n    bitCount(value) === 16 && (Shape_ShapeIdx[count++] = value);\n  }\n  s = new Shape_Shape();\n  for (i = 0; i < 7356; ++i) {\n    Shape_setIdx(s, i);\n    Shape_TopMove[i] = Shape_topMove(s);\n    Shape_TopMove[i] |= Shape_getIdx(s) << 4;\n    Shape_setIdx(s, i);\n    Shape_BottomMove[i] = Shape_bottomMove(s);\n    Shape_BottomMove[i] |= Shape_getIdx(s) << 4;\n    Shape_setIdx(s, i);\n    temp = s.top & 63;\n    p1 = bitCount(temp);\n    p3 = bitCount(s.bottom & 4032);\n    s.Shape_parity ^= 1 & (~~(p1 & p3) >> 1);\n    s.top = (s.top & 4032) | ((~~s.bottom >> 6) & 63);\n    s.bottom = (s.bottom & 63) | (temp << 6);\n    Shape_TwistMove[i] = Shape_getIdx(s);\n  }\n  for (i = 0; i < 7536; ++i) {\n    ShapePrun[i] = -1;\n  }\n  ShapePrun[Shape_getShape2Idx(14378715)] = 0;\n  ShapePrun[Shape_getShape2Idx(31157686)] = 0;\n  ShapePrun[Shape_getShape2Idx(23967451)] = 0;\n  ShapePrun[Shape_getShape2Idx(7191990)] = 0;\n  done = 4;\n  done0 = 0;\n  depth = -1;\n  while (done !== done0) {\n    done0 = done;\n    ++depth;\n    for (i = 0; i < 7536; ++i) {\n      if (ShapePrun[i] === depth) {\n        m = 0;\n        idx = i;\n        do {\n          idx = Shape_TopMove[idx];\n          m += idx & 15;\n          idx >>= 4;\n          if (ShapePrun[idx] === -1) {\n            ++done;\n            ShapePrun[idx] = depth + 1;\n          }\n        } while (m !== 12);\n        m = 0;\n        idx = i;\n        do {\n          idx = Shape_BottomMove[idx];\n          m += idx & 15;\n          idx >>= 4;\n          if (ShapePrun[idx] === -1) {\n            ++done;\n            ShapePrun[idx] = depth + 1;\n          }\n        } while (m !== 12);\n        idx = Shape_TwistMove[i];\n        if (ShapePrun[idx] === -1) {\n          ++done;\n          ShapePrun[idx] = depth + 1;\n        }\n      }\n    }\n  }\n}\n\nfunction Shape() {}\n\n_ = Shape_Shape.prototype = Shape.prototype;\n_.bottom = 0;\n_.Shape_parity = 0;\n_.top = 0;\nvar Shape_BottomMove;\nvar Shape_ShapeIdx;\nvar ShapePrun;\nvar Shape_TopMove;\nvar Shape_TwistMove;\nvar Shape_halflayer;\nlet Square_$clinit_ran = false;\nfunction Square_$clinit() {\n  if (Square_$clinit_ran) {\n    return;\n  }\n  Square_$clinit_ran = true;\n  SquarePrun = [];\n  Square_TwistMove = [];\n  Square_TopMove = [];\n  Square_BottomMove = [];\n  fact = [1, 1, 2, 6, 24, 120, 720, 5040];\n  Cnk = [];\n  for (var i = 0; i < 12; ++i) {\n    Cnk[i] = [];\n  }\n  Square_init();\n}\n\nfunction Square_Square() {}\n\nfunction get8Perm(arr) {\n  var i;\n  var idx;\n  var v;\n  var val;\n  idx = 0;\n  val = 1985229328;\n  for (i = 0; i < 7; ++i) {\n    v = arr[i] << 2;\n    idx = (8 - i) * idx + ((~~val >> v) & 7);\n    val -= 286331152 << v;\n  }\n  return idx & 65535;\n}\n\nfunction Square_init() {\n  var check;\n  var depth;\n  var done;\n  var find;\n  var i;\n  var idx;\n  var idxx;\n  var inv;\n  var j;\n  var m;\n  var ml;\n  var pos;\n  var temp;\n  for (i = 0; i < 12; ++i) {\n    Cnk[i][0] = 1;\n    Cnk[i][i] = 1;\n    for (j = 1; j < i; ++j) {\n      Cnk[i][j] = Cnk[i - 1][j - 1] + Cnk[i - 1][j];\n    }\n  }\n  pos = [];\n  for (i = 0; i < 40320; ++i) {\n    set8Perm(pos, i);\n    temp = pos[2];\n    pos[2] = pos[4];\n    pos[4] = temp;\n    temp = pos[3];\n    pos[3] = pos[5];\n    pos[5] = temp;\n    Square_TwistMove[i] = get8Perm(pos);\n    set8Perm(pos, i);\n    temp = pos[0];\n    pos[0] = pos[1];\n    pos[1] = pos[2];\n    pos[2] = pos[3];\n    pos[3] = temp;\n    Square_TopMove[i] = get8Perm(pos);\n    set8Perm(pos, i);\n    temp = pos[4];\n    pos[4] = pos[5];\n    pos[5] = pos[6];\n    pos[6] = pos[7];\n    pos[7] = temp;\n    Square_BottomMove[i] = get8Perm(pos);\n  }\n  for (i = 0; i < 80640; ++i) {\n    SquarePrun[i] = -1;\n  }\n  SquarePrun[0] = 0;\n  depth = 0;\n  done = 1;\n  while (done < 80640) {\n    // console.log(done);\n    inv = depth >= 11;\n    find = inv ? -1 : depth;\n    check = inv ? depth : -1;\n    ++depth;\n    OUT: for (i = 0; i < 80640; ++i) {\n      if (SquarePrun[i] === find) {\n        idx = ~~i >> 1;\n        ml = i & 1;\n        idxx = (Square_TwistMove[idx] << 1) | (1 - ml);\n        if (SquarePrun[idxx] === check) {\n          ++done;\n          SquarePrun[inv ? i : idxx] = ~~(depth << 24) >> 24;\n          if (inv) {\n            continue OUT;\n          }\n        }\n        idxx = idx;\n        for (m = 0; m < 4; ++m) {\n          idxx = Square_TopMove[idxx];\n          if (SquarePrun[(idxx << 1) | ml] === check) {\n            ++done;\n            SquarePrun[inv ? i : (idxx << 1) | ml] = ~~(depth << 24) >> 24;\n            if (inv) {\n              continue OUT;\n            }\n          }\n        }\n        for (m = 0; m < 4; ++m) {\n          idxx = Square_BottomMove[idxx];\n          if (SquarePrun[(idxx << 1) | ml] === check) {\n            ++done;\n            SquarePrun[inv ? i : (idxx << 1) | ml] = ~~(depth << 24) >> 24;\n            if (inv) {\n              continue OUT;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction set8Perm(arr, idx) {\n  var i;\n  var m;\n  var p;\n  var v;\n  var val;\n  val = 1985229328;\n  for (i = 0; i < 7; ++i) {\n    p = fact[7 - i];\n    v = ~~(idx / p);\n    idx -= v * p;\n    v <<= 2;\n    arr[i] = ~~(((~~val >> v) & 7) << 24) >> 24;\n    m = (1 << v) - 1;\n    val = (val & m) + ((~~val >> 4) & ~m);\n  }\n  arr[7] = ~~(val << 24) >> 24;\n}\n\nfunction Square() {}\n\n_ = Square_Square.prototype = Square.prototype;\n_.botEdgeFirst = false;\n_.cornperm = 0;\n_.edgeperm = 0;\n_.ml = 0;\n_.topEdgeFirst = false;\nvar Square_BottomMove;\nvar Cnk;\nvar SquarePrun;\nvar Square_TopMove;\nvar Square_TwistMove;\nvar fact;\n\nfunction bitCount(x) {\n  x -= (~~x >> 1) & 1431655765;\n  x = ((~~x >> 2) & 858993459) + (x & 858993459);\n  x = ((~~x >> 4) + x) & 252645135;\n  x += ~~x >> 8;\n  x += ~~x >> 16;\n  return x & 63;\n}\n\nfunction binarySearch(sortedArray, key) {\n  var high;\n  var low;\n  var mid;\n  var midVal;\n  low = 0;\n  high = sortedArray.length - 1;\n  while (low <= high) {\n    mid = low + (~~(high - low) >> 1);\n    midVal = sortedArray[mid];\n    if (midVal < key) {\n      low = mid + 1;\n    } else if (midVal > key) {\n      high = mid - 1;\n    } else {\n      return mid;\n    }\n  }\n  return -low - 1;\n}\n\n/*\n * Some helper functions.\n */\n\nvar square1Solver_initialized = false;\n\nvar square1SolverInitialize = function (doneCallback, _, statusCallback) {\n  if (!square1Solver_initialized) {\n    Shape_$clinit();\n    Square_$clinit();\n  }\n\n  if (statusCallback) {\n    statusCallback(\"Done initializing Square-1.\");\n  }\n\n  square1Solver_initialized = true;\n  if (doneCallback != null) {\n    doneCallback();\n  }\n};\n\nvar square1SolverGetRandomPosition = function () {\n  if (!square1Solver_initialized) {\n    square1SolverInitialize();\n  }\n  return FullCube_randomCube();\n};\n\nvar square1SolverGenerate = function (state) {\n  var search_search = new Search_Search(); // Can this be factored out?\n  return Search_solution(search_search, state);\n};\n\nvar square1SolverGetRandomScramble = function () {\n  var randomState = square1SolverGetRandomPosition();\n  var scrambleString = square1SolverGenerate(randomState);\n\n  return {\n    state: randomState,\n    scramble_string: scrambleString,\n  };\n};\n\nexport function getRandomSquare1ScrambleString() {\n  return square1SolverGetRandomScramble().scramble_string;\n}\n"],
  "mappings": "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",
  "names": ["FullCube_copy", "obj", "c", "FullCube_doMove", "move", "temp", "FullCube_getParity", "a", "b", "cnt", "i", "p", "FullCube_pieceAt", "FullCube_getShapeIdx", "dlx", "drx", "ulx", "urx", "Shape_getShape2Idx", "FullCube_getSquare", "sq", "get8Perm", "idx", "ret", "FullCube_setPiece", "value", "FullCube_FullCube__Ljava_lang_String_2V", "FullCube_randomCube", "f", "shape", "edge", "corner", "n_edge", "n_corner", "rnd", "m", "Shape_ShapeIdx", "randomUIntBelow", "FullCube", "_", "Search_init2", "j", "ml", "prun", "SquarePrun", "Search_phase2", "Search_move2string", "len", "s", "top", "bottom", "val", "Search_phase1", "prunvalue", "maxl", "depth", "lm", "prunx", "shapex", "Shape_TwistMove", "ShapePrun", "Shape_TopMove", "Shape_BottomMove", "topEdgeFirst", "botEdgeFirst", "botEdgeFirstx", "cornerx", "edgex", "prun1", "prun2", "topEdgeFirstx", "Square_TwistMove", "Square_TopMove", "Square_BottomMove", "Search_solution", "Search_Search", "Square_Square", "Search", "Shape_$clinit_ran", "Shape_$clinit", "Shape_halflayer", "Shape_init", "Shape_bottomMove", "moveParity", "bitCount", "Shape_getIdx", "binarySearch", "Shape_setIdx", "Shape_topMove", "Shape_Shape", "shp", "count", "dl", "done", "done0", "dr", "ul", "ur", "p1", "p3", "Shape", "Square_$clinit_ran", "Square_$clinit", "fact", "Cnk", "Square_init", "arr", "v", "check", "find", "idxx", "inv", "pos", "set8Perm", "OUT", "Square", "x", "sortedArray", "key", "high", "low", "mid", "midVal", "square1Solver_initialized", "square1SolverInitialize", "doneCallback", "statusCallback", "square1SolverGetRandomPosition", "square1SolverGenerate", "state", "search_search", "square1SolverGetRandomScramble", "randomState", "scrambleString", "getRandomSquare1ScrambleString"]
}
