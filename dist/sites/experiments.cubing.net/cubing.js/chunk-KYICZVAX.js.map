{
  "version": 3,
  "sources": ["../../../../src/cubing/search/inside/inside-worker.ts", "../../../../src/cubing/search/inside/solve/addOrientationSuffix.ts", "../../../../src/cubing/search/inside/solve/puzzles/dynamic/3x3x3/index.ts", "../../../../src/cubing/search/inside/solve/puzzles/3x3x3/convert.ts", "../../../../src/cubing/search/inside/solve/puzzles/3x3x3/filter.ts", "../../../../src/cubing/search/inside/solve/puzzles/3x3x3/legacy-sgs.ts", "../../../../src/cubing/search/inside/solve/puzzles/3x3x3/index.ts"],
  "sourcesContent": ["let isInsideWorker = false;\n\nexport function setIsInsideWorker(inside: boolean) {\n  isInsideWorker = inside;\n}\n\nexport function mustBeInsideWorker(): void {\n  if (!isInsideWorker) {\n    throw new Error(\n      \"Must be called from inside a worker, to avoid impact on page performance. Try importing from the top level of `cubing/solve`?\",\n    );\n  }\n}\n", "import { Alg, AlgBuilder, Move } from \"../../../alg\";\nimport { randomChoice } from \"random-uint-below\";\n\nexport function addOrientationSuffix(\n  alg: Alg,\n  suffixSpec: (null | string)[][],\n): Alg {\n  const algBuilder = new AlgBuilder();\n  algBuilder.experimentalPushAlg(alg);\n  for (const suffix of suffixSpec) {\n    const choice = randomChoice(suffix);\n    if (choice !== null) {\n      algBuilder.push(Move.fromString(choice));\n    }\n  }\n  return algBuilder.toAlg();\n}\n", "import { from } from \"../../../../../../vendor/mit/p-lazy/p-lazy\";\n\nexport const dynamic3x3x3min2phase = from<\n  typeof import(\"./search-dynamic-solve-3x3x3\")\n>(() => import(\"./search-dynamic-solve-3x3x3\"));\n", "/*\n\nFace order:\n\n U\nLFRB\n D\n\n         | 0| 1| 2|\n         | 3| 4| 5|\n         | 6| 7| 8|\n| 9|10|11|18|19|20|27|28|29|36|37|38|\n|12|13|14|21|22|23|30|31|32|39|40|41|\n|15|16|17|24|25|26|33|34|35|42|43|44|\n         |45|46|47|\n         |48|49|50|\n         |51|52|53|\n*/\n\nimport type { KState } from \"../../../../../kpuzzle/KState\";\n\nconst reidEdgeOrder = \"UF UR UB UL DF DR DB DL FR FL BR BL\".split(\" \");\nconst reidCornerOrder = \"UFR URB UBL ULF DRF DFL DLB DBR\".split(\" \");\nconst centerOrder = \"U L F R B D\".split(\" \");\n\n// const stickers = [reidEdgeOrder, reidCornerOrder, centerOrder];\n\n// /*\n//                |1 20|0 20|1 10|\n//                |0 30|2 00|0 10|\n//                |1 30|0 00|1 00|\n// |1 22|0 31|1 31|1 32|0 01|1 01|1 02|0 11|1 11|1 12|0 21|1 21|\n// |0111|2 10|0 91|0 90|2 20|0 80|0 81|2 30|0101|0100|2 40|0110|\n// |1 61|0 71|1 52|1 51|0 41|1 42|1 41|0 51|1 72|1 71|0 61|1 62|\n//                |1 50|0 40|1 40|\n//                |0 70|2 50|0 50|\n//                |1 60|0 60|1 70|\n// */\n\nconst map: [number, number, number][] = [\n  [1, 2, 0],\n  [0, 2, 0],\n  [1, 1, 0],\n  [0, 3, 0],\n  [2, 0, 0],\n  [0, 1, 0],\n  [1, 3, 0],\n  [0, 0, 0],\n  [1, 0, 0],\n  [1, 0, 2],\n  [0, 1, 1],\n  [1, 1, 1],\n  [0, 8, 1],\n  [2, 3, 0],\n  [0, 10, 1],\n  [1, 4, 1],\n  [0, 5, 1],\n  [1, 7, 2],\n  [1, 3, 2],\n  [0, 0, 1],\n  [1, 0, 1],\n  [0, 9, 0],\n  [2, 2, 0],\n  [0, 8, 0],\n  [1, 5, 1],\n  [0, 4, 1],\n  [1, 4, 2],\n  [1, 5, 0],\n  [0, 4, 0],\n  [1, 4, 0],\n  [0, 7, 0],\n  [2, 5, 0],\n  [0, 5, 0],\n  [1, 6, 0],\n  [0, 6, 0],\n  [1, 7, 0],\n  [1, 2, 2],\n  [0, 3, 1],\n  [1, 3, 1],\n  [0, 11, 1],\n  [2, 1, 0],\n  [0, 9, 1],\n  [1, 6, 1],\n  [0, 7, 1],\n  [1, 5, 2],\n  [1, 1, 2],\n  [0, 2, 1],\n  [1, 2, 1],\n  [0, 10, 0],\n  [2, 4, 0],\n  [0, 11, 0],\n  [1, 7, 1],\n  [0, 6, 1],\n  [1, 6, 2],\n];\n\nfunction rotateLeft(s: string, i: number): string {\n  return s.slice(i) + s.slice(0, i);\n}\n\nfunction toReid333Struct(state: KState): string[][] {\n  const output: string[][] = [[], []];\n  for (let i = 0; i < 6; i++) {\n    if (state.stateData[\"CENTERS\"].pieces[i] !== i) {\n      throw new Error(\"non-oriented puzzles are not supported\");\n    }\n  }\n  for (let i = 0; i < 12; i++) {\n    output[0].push(\n      rotateLeft(\n        reidEdgeOrder[state.stateData[\"EDGES\"].pieces[i]],\n        state.stateData[\"EDGES\"].orientation[i],\n      ),\n    );\n  }\n  for (let i = 0; i < 8; i++) {\n    output[1].push(\n      rotateLeft(\n        reidCornerOrder[state.stateData[\"CORNERS\"].pieces[i]],\n        state.stateData[\"CORNERS\"].orientation[i],\n      ),\n    );\n  }\n  output.push(centerOrder);\n  return output;\n}\n\n// function toReid333String(state: Transformation): string {\n//   return toReid333Struct(state)\n//     .map((l) => l.join(\" \"))\n//     .join(\" \");\n// }\n\nexport function toMin2PhaseState(state: KState): string {\n  const reid = toReid333Struct(state);\n  return map.map(([orbit, perm, ori]) => reid[orbit][perm][ori]).join(\"\");\n}\n", "import { Move } from \"../../../../../alg\";\nimport type { KPuzzle } from \"../../../../../kpuzzle\";\nimport { KState } from \"../../../../../kpuzzle\";\n\nexport function isEquivalentTranformationIgnoringCENTERS(\n  t1: KState,\n  t2: KState,\n): boolean {\n  const t1NoCenterOri = new KState(t1.kpuzzle, {\n    EDGES: t1.stateData.EDGES,\n    CORNERS: t1.stateData.CORNERS,\n    CENTERS: {\n      pieces: t1.stateData.CENTERS.pieces,\n      orientation: new Array(6).fill(0),\n    },\n  }).experimentalToTransformation()!;\n  const t2NoCenterOri = new KState(t2.kpuzzle, {\n    EDGES: t2.stateData.EDGES,\n    CORNERS: t2.stateData.CORNERS,\n    CENTERS: {\n      pieces: t2.stateData.CENTERS.pieces,\n      orientation: new Array(6).fill(0),\n    },\n  }).experimentalToTransformation()!;\n  return t1NoCenterOri.isIdentical(t2NoCenterOri);\n}\n\nexport function passesFilter(kpuzzle: KPuzzle, state: KState): boolean {\n  if (isEquivalentTranformationIgnoringCENTERS(kpuzzle.startState(), state)) {\n    return false;\n  }\n\n  for (const face of \"ULFRBD\") {\n    for (let amount = 1; amount < 4; amount++) {\n      const transformation = kpuzzle\n        .moveToTransformation(new Move(face, amount))\n        .toKState();\n      if (isEquivalentTranformationIgnoringCENTERS(transformation, state)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n// TODO: implement tests\n// {\n//   const def = await puzzles[\"3x3x3\"].def();\n//   const kpuzzle = new KPuzzle(def);\n//   console.log(passesFilter(def, kpuzzle.state));\n//   kpuzzle.applyAlg(parse(\"R\"));\n//   console.log(passesFilter(def, kpuzzle.state));\n//   kpuzzle.applyAlg(parse(\"D\"));\n//   console.log(passesFilter(def, kpuzzle.state));\n//   kpuzzle.reset();\n//   kpuzzle.applyAlg(parse(\"(R' U' R U')5\"));\n//   console.log(passesFilter(def, kpuzzle.state));\n// }\n", "// TODO: Verify\nexport const sgs3x3x3: string[][] = [\n  [\n    \"R U'\",\n    \"R2 B\", //\n    \"D2 B2\",\n    \"D' L B'\", //\n    \"R' U'\",\n    \"B\", //\n    \"D B2\",\n    \"R' B\", //\n    \"L' U\",\n    \"L2 B'\", //\n    \"B2\",\n    \"D L B'\", //\n    \"L U\",\n    \"B'\", //\n    \"U'\",\n    \"R B\", //\n    \"D' B2\",\n    \"L B'\", //\n    \"U2\",\n    \"U L' B'\", //\n    \"\",\n    \"U' L' B'\", //\n    \"U\",\n    \"L' B'\",\n  ],\n  [\n    \"F2 L2\",\n    \"F' L'\",\n    \"R' F L2\", //\n    \"D' L2\",\n    \"F L2\",\n    \"F2 L'\", //\n    \"R' F' L'\",\n    \"R2 F L2\",\n    \"R2 F2 L'\", //\n    \"L2\",\n    \"F L'\",\n    \"D' L\", //\n    \"D2 L2\",\n    \"R2 F' L'\",\n    \"D L\", //\n    \"\",\n    \"L2 F L'\",\n    \"L F' L2\", //\n    \"L F L'\",\n    \"F' L2\",\n    \"L'\", //\n    \"D L2\",\n    \"D F L'\",\n    \"L\",\n  ],\n  [\n    \"R B U2 B'\",\n    \"R2 B U' B'\", //\n    \"F2 B U B'\",\n    \"F B2 L' B2\", //\n    \"B2 L B2\",\n    \"B U' B'\", //\n    \"R2 B U2 B'\",\n    \"R' B U' B'\", //\n    \"B2 L' B2\",\n    \"F B U B'\", //\n    \"B2 U' B2\",\n    \"B' L B\", //\n    \"L F' B D' B'\",\n    \"B' U' B2 D B'\", //\n    \"B U2 B'\",\n    \"R B U' B'\", //\n    \"B2 L2 B2\",\n    \"D' B' L B\", //\n    \"B U B'\",\n    \"F' B2 L' B2\", //\n    \"\",\n    \"B2 L' B' U' B'\",\n  ],\n  [\n    \"U F2 L2 U'\",\n    \"F' U L' U'\", //\n    \"F2 U L' U'\",\n    \"U F L2 U'\", //\n    \"U2 B2 U2\",\n    \"R' U' B U\", //\n    \"D2 U L U'\",\n    \"D U2 B' U2\", //\n    \"U L2 U'\",\n    \"F U L' U'\", //\n    \"D U L U'\",\n    \"U2 B' U2\", //\n    \"\",\n    \"U2 B' U' L' U'\", //\n    \"U2 L' U2\",\n    \"U' B U\", //\n    \"U L U'\",\n    \"D' U2 B' U2\", //\n    \"U L' U'\",\n    \"U2 B U2\",\n  ],\n  [\n    \"R' D' F2\",\n    \"F'\", //\n    \"F2\",\n    \"D R F'\", //\n    \"R D' F2\",\n    \"R2 F'\", //\n    \"D' F2\",\n    \"R F'\", //\n    \"F2 R' D' F2\",\n    \"F\", //\n    \"D2 F2\",\n    \"D' R F'\", //\n    \"R2 D' F2\",\n    \"R' F'\", //\n    \"D F2\",\n    \"D2 R F'\", //\n    \"\",\n    \"F R' D' F2\",\n  ],\n  [\n    \"R' D2 F' D F\",\n    \"R F2 R2 F2\",\n    \"R2 F' D2 F\", //\n    \"F' R2 D2 F\",\n    \"L D' L'\",\n    \"D F' D2 F\", //\n    \"F2 R2 F2\",\n    \"R F' D2 F\",\n    \"F' R2 D' F\", //\n    \"F' R' D2 F\",\n    \"F2 R' F2\",\n    \"L D L'\", //\n    \"F' R D' F\",\n    \"F2 R F2\",\n    \"F' D2 F\", //\n    \"\",\n    \"L D2 R D' L'\",\n    \"F' D2 F' R F2\", //\n    \"D2 R2 F2 R2 F2\",\n    \"D F' D' F\",\n    \"F' D F\",\n  ],\n  [\n    \"U F2 U'\",\n    \"R U F' U'\", //\n    \"D R U F2 U'\",\n    \"U F U'\", //\n    \"R2 U F2 U'\",\n    \"R' U F' U'\", //\n    \"R U F2 U'\",\n    \"R2 U F' U'\", //\n    \"\",\n    \"U L D L' F U'\", //\n    \"F2 D' R D F2\",\n    \"D2 U F U'\", //\n    \"R' U F2 U'\",\n    \"U F' U'\", //\n    \"F2 D2 R D2 F2\",\n    \"D U F U'\",\n  ],\n  [\n    \"R2\",\n    \"R' B' D B\", //\n    \"D R'\",\n    \"F' R2 F\", //\n    \"\",\n    \"R B' D B\", //\n    \"R'\",\n    \"B' D B\", //\n    \"D' R'\",\n    \"D2 F' R2 F\", //\n    \"R\",\n    \"R2 B' D B\", //\n    \"D2 R'\",\n    \"B' D' B\",\n  ],\n  [\n    \"R2 D' R2\",\n    \"F' R' F R\",\n    \"R D' R2 D R'\", //\n    \"D2 R2 D2 R2\",\n    \"R' D' F' R F\",\n    \"U F D F' U'\", //\n    \"\",\n    \"R2 D2 B R' B' R'\",\n    \"R' F D' F2 R F\", //\n    \"R2 D R2\",\n    \"F2 U F U' F\",\n    \"R' D F' R F\", //\n    \"D R2 D2 R2\",\n    \"U F D' F' U'\",\n    \"D R' D2 F' R F\", //\n    \"R2 D2 R2\",\n    \"U F D2 F' U'\",\n    \"R' D2 F' R F\",\n  ],\n  [\n    \"B R B'\",\n    \"F D F' B R2 B'\", //\n    \"D B R2 B'\",\n    \"D2 B R' B'\", //\n    \"B R2 B'\",\n    \"D B R' B'\", //\n    \"D' B R2 B'\",\n    \"B R' B'\", //\n    \"\",\n    \"B R2 B' D B R' B'\", //\n    \"D2 B R2 B'\",\n    \"D' B R' B'\",\n  ],\n  [\n    \"\",\n    \"R' D R F D2 F'\", //\n    \"R' D R\",\n    \"D F D' F'\", //\n    \"R F' R' F\",\n    \"F D' F'\", //\n    \"R' D' R\",\n    \"F D2 F'\", //\n    \"R' D2 R\",\n    \"F D F'\",\n  ],\n  [\n    \"\",\n    \"F2 D2 R F' R' D2 F' D2 F'\",\n    \"F2 D2 F' D' F D' F' D2 F'\", //\n    \"F2 D F2 D F2 D2 F2\",\n    \"D2 F L D2 L' D2 F'\",\n    \"D F D2 L D2 L' F'\", //\n    \"R' D B' D2 B D' R\",\n    \"R' D2 B' D2 B R\",\n    \"F D2 F' D F D F'\", //\n    \"F D' L D2 L' D F'\",\n    \"B D' F D B' D' F'\",\n    \"F D2 L D2 L' F'\", //\n    \"F D' L D L' D F'\",\n    \"F L D2 L' D2 F'\",\n    \"R' B' D2 B D2 R\",\n  ],\n  [\n    \"D'\",\n    \"F L D L' D' F'\", //\n    \"D2\",\n    \"L B D B' D' L'\", //\n    \"D\",\n    \"B' L' D' L D B\", //\n    \"\",\n    \"D F L D L' D' F'\",\n  ],\n  [\n    \"F' D2 F D F' D F\",\n    \"F' D' R' D R F\", //\n    \"F' R' D' R D F\",\n    \"B D R D' R' B'\", //\n    \"\",\n    \"D B' D' L' D L B\",\n  ],\n  [\n    \"D F D F' D F D2 F'\",\n    \"F' U2 B' R' B U2 F' L F' L' F'\", //\n    \"\",\n    \"D2 L D L2 F L F2 D F\",\n  ],\n  [\n    \"L B' L' F L B L' F'\",\n    \"F2 U F' D2 F U' F' D2 F'\",\n    \"D' F' D B D' F D B'\", //\n    \"F L2 F R2 F' L2 F R2 F2\",\n    \"D B D' F' D B' D' F\",\n    \"R F L F' R' F L' F'\", //\n    \"\",\n    \"D2 B L' U2 L B' D2 B L' U2 L B'\",\n    \"D2 F R' U2 R F' D2 F R' U2 R F'\", //\n    \"R F L' F' R' F L F'\",\n    \"D F D' B' D F' D' B\",\n    \"L2 F2 L' B2 L F2 L' B2 L'\",\n  ],\n  [\n    \"L B R' B' L' B R B'\",\n    \"R' B R F' R' B' R F\",\n    \"L D2 L U L' D2 L U' L2\", //\n    \"\",\n    \"D2 B' D2 F D' L2 F L2 F' D2 B D' F'\",\n    \"D2 F' R' F R2 B' D2 B D2 R' F D2 F'\", //\n    \"L B L' F L B' L' F'\",\n    \"F' D2 F' U' F D2 F' U F2\",\n    \"D' B' D F D' B D F'\",\n  ],\n  [\"\", \"D2 F' L U2 L' F D2 F' L U2 L' F\", \"D2 B' R U2 R' B D2 B' R U2 R' B\"],\n];\n", "import { Alg, AlgBuilder } from \"../../../../../alg\";\nimport type { KState } from \"../../../../../kpuzzle/KState\";\nimport { puzzles } from \"../../../../../puzzles\";\nimport { randomChoice } from \"random-uint-below\";\nimport { mustBeInsideWorker } from \"../../../inside-worker\";\nimport { addOrientationSuffix } from \"../../addOrientationSuffix\";\nimport { dynamic3x3x3min2phase } from \"../dynamic/3x3x3\";\nimport { toMin2PhaseState } from \"./convert\";\nimport { passesFilter } from \"./filter\";\nimport { sgs3x3x3 } from \"./legacy-sgs\";\n\nexport async function random333State(): Promise<KState> {\n  const kpuzzle = await puzzles[\"3x3x3\"].kpuzzle();\n  let state = kpuzzle.startState();\n  for (const piece of sgs3x3x3) {\n    state = state.applyAlg(Alg.fromString(randomChoice(piece)));\n  }\n  if (!passesFilter(kpuzzle, state)) {\n    return random333State();\n  }\n  return state;\n}\n\nexport async function solve333(s: KState): Promise<Alg> {\n  mustBeInsideWorker();\n  return Alg.fromString(\n    (await dynamic3x3x3min2phase).solveState(toMin2PhaseState(s)),\n  );\n}\n\nexport async function random333Scramble(): Promise<Alg> {\n  return solve333(await random333State());\n}\n\nexport async function initialize333(): Promise<void> {\n  (await dynamic3x3x3min2phase).initialize();\n}\n\nconst randomSuffixes = [\n  [null, \"Rw\", \"Rw2\", \"Rw'\", \"Fw\", \"Fw'\"],\n  [null, \"Dw\", \"Dw2\", \"Dw'\"],\n];\n\nexport async function random333OrientedScramble(): Promise<Alg> {\n  return addOrientationSuffix(await random333Scramble(), randomSuffixes);\n}\n\nconst extraBit = new Alg(\"R' U' F\");\nexport async function random333FewestMovesScramble(): Promise<Alg> {\n  const algBuilder = new AlgBuilder();\n  const unorientedScramble = await random333Scramble();\n  algBuilder.experimentalPushAlg(extraBit);\n  // TODO:Avoid cancellable moves.\n  algBuilder.experimentalPushAlg(unorientedScramble);\n  algBuilder.experimentalPushAlg(extraBit);\n  return algBuilder.toAlg();\n}\n"],
  "mappings": "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ACA,eACA,gBACA,UACA,YACA,WACA,YACA,SACA,cACA,GACA,gBACF,EACA,CACE,aACA,aACA,aACA,YACA,WACA,YACA,YACA,aACA,UACA,YACA,WACA,WACA,GACA,iBACA,WACA,SACA,SACA,cACA,UACA,SACF,EACA,CACE,WACA,KACA,KACA,SACA,UACA,QACA,QACA,OACA,cACA,IACA,QACA,UACA,WACA,QACA,OACA,UACA,GACA,YACF,EACA,CACE,eACA,aACA,aACA,aACA,UACA,YACA,WACA,YACA,aACA,aACA,WACA,SACA,YACA,UACA,UACA,GACA,eACA,gBACA,iBACA,YACA,QACF,EACA,CACE,UACA,YACA,cACA,SACA,aACA,aACA,YACA,aACA,GACA,gBACA,eACA,YACA,aACA,UACA,gBACA,UACF,EACA,CACE,KACA,YACA,OACA,UACA,GACA,WACA,KACA,SACA,QACA,aACA,IACA,YACA,QACA,SACF,EACA,CACE,WACA,YACA,eACA,cACA,eACA,cACA,GACA,mBACA,iBACA,UACA,cACA,cACA,aACA,eACA,iBACA,WACA,eACA,cACF,EACA,CACE,SACA,iBACA,YACA,aACA,UACA,YACA,aACA,UACA,GACA,oBACA,aACA,YACF,EACA,CACE,GACA,iBACA,SACA,YACA,YACA,UACA,UACA,UACA,UACA,QACF,EACA,CACE,GACA,4BACA,4BACA,qBACA,qBACA,oBACA,oBACA,kBACA,mBACA,oBACA,oBACA,kBACA,mBACA,kBACA,iBACF,EACA,CACE,KACA,iBACA,KACA,iBACA,IACA,iBACA,GACA,kBACF,EACA,CACE,mBACA,iBACA,iBACA,iBACA,GACA,kBACF,EACA,CACE,qBACA,iCACA,GACA,sBACF,EACA,CACE,sBACA,2BACA,sBACA,0BACA,sBACA,sBACA,GACA,kCACA,kCACA,sBACA,sBACA,2BACF,EACA,CACE,sBACA,sBACA,yBACA,GACA,sCACA,sCACA,sBACA,2BACA,qBACF,EACA,CAAC,GAAI,kCAAmC,iCAAiC,CAC3E,ECvRA,eAAsBC,GAAkC,CACtD,IAAMC,EAAU,MAAMC,EAAQ,SAAS,QAAQ,EAC3CC,EAAQF,EAAQ,WAAW,EAC/B,QAAWG,KAASC,EAClBF,EAAQA,EAAM,SAASG,EAAI,WAAWC,EAAaH,CAAK,CAAC,CAAC,EAE5D,OAAKI,EAAaP,EAASE,CAAK,EAGzBA,EAFEH,EAAe,CAG1B,CAEA,eAAsBS,EAASC,EAAyB,CACtD,OAAAC,EAAmB,EACZL,EAAI,YACR,MAAMM,GAAuB,WAAWC,EAAiBH,CAAC,CAAC,CAC9D,CACF,CAEA,eAAsBI,GAAkC,CACtD,OAAOL,EAAS,MAAMT,EAAe,CAAC,CACxC,CAEA,eAAsBe,GAA+B,EAClD,MAAMH,GAAuB,WAAW,CAC3C,CAEA,IAAMI,EAAiB,CACrB,CAAC,KAAM,KAAM,MAAO,MAAO,KAAM,KAAK,EACtC,CAAC,KAAM,KAAM,MAAO,KAAK,CAC3B,EAEA,eAAsBC,IAA0C,CAC9D,OAAOC,EAAqB,MAAMJ,EAAkB,EAAGE,CAAc,CACvE,CAEA,IAAMG,EAAW,IAAIb,EAAI,SAAS,EAClC,eAAsBc,IAA6C,CACjE,IAAMC,EAAa,IAAIC,EACjBC,EAAqB,MAAMT,EAAkB,EACnD,OAAAO,EAAW,oBAAoBF,CAAQ,EAEvCE,EAAW,oBAAoBE,CAAkB,EACjDF,EAAW,oBAAoBF,CAAQ,EAChCE,EAAW,MAAM,CAC1B",
  "names": ["isInsideWorker", "setIsInsideWorker", "inside", "mustBeInsideWorker", "addOrientationSuffix", "alg", "suffixSpec", "algBuilder", "AlgBuilder", "suffix", "choice", "randomChoice", "Move", "dynamic3x3x3min2phase", "from", "reidEdgeOrder", "reidCornerOrder", "centerOrder", "map", "rotateLeft", "s", "i", "toReid333Struct", "state", "output", "toMin2PhaseState", "reid", "orbit", "perm", "ori", "isEquivalentTranformationIgnoringCENTERS", "t1", "t2", "t1NoCenterOri", "KState", "t2NoCenterOri", "passesFilter", "kpuzzle", "state", "face", "amount", "transformation", "Move", "sgs3x3x3", "random333State", "kpuzzle", "puzzles", "state", "piece", "sgs3x3x3", "Alg", "randomChoice", "passesFilter", "solve333", "s", "mustBeInsideWorker", "dynamic3x3x3min2phase", "toMin2PhaseState", "random333Scramble", "initialize333", "randomSuffixes", "random333OrientedScramble", "addOrientationSuffix", "extraBit", "random333FewestMovesScramble", "algBuilder", "AlgBuilder", "unorientedScramble"]
}
