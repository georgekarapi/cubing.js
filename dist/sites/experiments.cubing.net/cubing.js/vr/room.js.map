{
  "version": 3,
  "sources": ["../../../../../node_modules/three/examples/jsm/geometries/BoxLineGeometry.js", "../../../../../src/sites/experiments.cubing.net/cubing.js/vr/room.ts"],
  "sourcesContent": ["import {\n\tBufferGeometry,\n\tFloat32BufferAttribute\n} from 'three';\n\nclass BoxLineGeometry extends BufferGeometry {\n\n\tconstructor( width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1 ) {\n\n\t\tsuper();\n\n\t\twidthSegments = Math.floor( widthSegments );\n\t\theightSegments = Math.floor( heightSegments );\n\t\tdepthSegments = Math.floor( depthSegments );\n\n\t\tconst widthHalf = width / 2;\n\t\tconst heightHalf = height / 2;\n\t\tconst depthHalf = depth / 2;\n\n\t\tconst segmentWidth = width / widthSegments;\n\t\tconst segmentHeight = height / heightSegments;\n\t\tconst segmentDepth = depth / depthSegments;\n\n\t\tconst vertices = [];\n\n\t\tlet x = - widthHalf;\n\t\tlet y = - heightHalf;\n\t\tlet z = - depthHalf;\n\n\t\tfor ( let i = 0; i <= widthSegments; i ++ ) {\n\n\t\t\tvertices.push( x, - heightHalf, - depthHalf, x, heightHalf, - depthHalf );\n\t\t\tvertices.push( x, heightHalf, - depthHalf, x, heightHalf, depthHalf );\n\t\t\tvertices.push( x, heightHalf, depthHalf, x, - heightHalf, depthHalf );\n\t\t\tvertices.push( x, - heightHalf, depthHalf, x, - heightHalf, - depthHalf );\n\n\t\t\tx += segmentWidth;\n\n\t\t}\n\n\t\tfor ( let i = 0; i <= heightSegments; i ++ ) {\n\n\t\t\tvertices.push( - widthHalf, y, - depthHalf, widthHalf, y, - depthHalf );\n\t\t\tvertices.push( widthHalf, y, - depthHalf, widthHalf, y, depthHalf );\n\t\t\tvertices.push( widthHalf, y, depthHalf, - widthHalf, y, depthHalf );\n\t\t\tvertices.push( - widthHalf, y, depthHalf, - widthHalf, y, - depthHalf );\n\n\t\t\ty += segmentHeight;\n\n\t\t}\n\n\t\tfor ( let i = 0; i <= depthSegments; i ++ ) {\n\n\t\t\tvertices.push( - widthHalf, - heightHalf, z, - widthHalf, heightHalf, z );\n\t\t\tvertices.push( - widthHalf, heightHalf, z, widthHalf, heightHalf, z );\n\t\t\tvertices.push( widthHalf, heightHalf, z, widthHalf, - heightHalf, z );\n\t\t\tvertices.push( widthHalf, - heightHalf, z, - widthHalf, - heightHalf, z );\n\n\t\t\tz += segmentDepth;\n\n\t\t}\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t}\n\n}\n\nexport { BoxLineGeometry };\n", "import {\n  Color,\n  HemisphereLight,\n  LineBasicMaterial,\n  LineSegments,\n  Scene,\n} from \"three\";\nimport { BoxLineGeometry } from \"three/examples/jsm/geometries/BoxLineGeometry.js\";\nimport type { VRInput } from \"./vr-input\";\nimport type { VRPuzzle } from \"./vr-puzzle\";\n\nexport class Room {\n  public scene: Scene;\n  private box: LineSegments;\n  constructor(private vrInput: VRInput, private vrPuzzle: VRPuzzle) {\n    this.scene = new Scene();\n    this.scene.background = new Color(0x505050);\n\n    this.scene.add(this.vrPuzzle.group);\n    this.box = new LineSegments(\n      new BoxLineGeometry(6, 6, 6, 10, 10, 10),\n      new LineBasicMaterial({ color: 0x808080 }),\n    );\n    this.box.geometry.translate(0, 3, 0);\n    this.scene.add(this.box);\n\n    const light = new HemisphereLight(0xffffff, 0x444444);\n    light.position.set(1, 1, 1);\n    this.scene.add(light);\n\n    for (const controller of this.vrInput.controllers) {\n      this.scene.add(controller);\n    }\n  }\n\n  public update(): void {\n    this.vrPuzzle.update();\n  }\n}\n"],
  "mappings": "gHAKA,IAAMA,EAAN,cAA8BC,CAAe,CAE5C,YAAaC,EAAQ,EAAGC,EAAS,EAAGC,EAAQ,EAAGC,EAAgB,EAAGC,EAAiB,EAAGC,EAAgB,EAAI,CAEzG,MAAM,EAENF,EAAgB,KAAK,MAAOA,CAAc,EAC1CC,EAAiB,KAAK,MAAOA,CAAe,EAC5CC,EAAgB,KAAK,MAAOA,CAAc,EAE1C,IAAMC,EAAYN,EAAQ,EACpBO,EAAaN,EAAS,EACtBO,EAAYN,EAAQ,EAEpBO,EAAeT,EAAQG,EACvBO,EAAgBT,EAASG,EACzBO,EAAeT,EAAQG,EAEvBO,EAAW,CAAC,EAEdC,EAAI,CAAEP,EACNQ,EAAI,CAAEP,EACNQ,EAAI,CAAEP,EAEV,QAAUQ,EAAI,EAAGA,GAAKb,EAAea,IAEpCJ,EAAS,KAAMC,EAAG,CAAEN,EAAY,CAAEC,EAAWK,EAAGN,EAAY,CAAEC,CAAU,EACxEI,EAAS,KAAMC,EAAGN,EAAY,CAAEC,EAAWK,EAAGN,EAAYC,CAAU,EACpEI,EAAS,KAAMC,EAAGN,EAAYC,EAAWK,EAAG,CAAEN,EAAYC,CAAU,EACpEI,EAAS,KAAMC,EAAG,CAAEN,EAAYC,EAAWK,EAAG,CAAEN,EAAY,CAAEC,CAAU,EAExEK,GAAKJ,EAIN,QAAUO,EAAI,EAAGA,GAAKZ,EAAgBY,IAErCJ,EAAS,KAAM,CAAEN,EAAWQ,EAAG,CAAEN,EAAWF,EAAWQ,EAAG,CAAEN,CAAU,EACtEI,EAAS,KAAMN,EAAWQ,EAAG,CAAEN,EAAWF,EAAWQ,EAAGN,CAAU,EAClEI,EAAS,KAAMN,EAAWQ,EAAGN,EAAW,CAAEF,EAAWQ,EAAGN,CAAU,EAClEI,EAAS,KAAM,CAAEN,EAAWQ,EAAGN,EAAW,CAAEF,EAAWQ,EAAG,CAAEN,CAAU,EAEtEM,GAAKJ,EAIN,QAAUM,EAAI,EAAGA,GAAKX,EAAeW,IAEpCJ,EAAS,KAAM,CAAEN,EAAW,CAAEC,EAAYQ,EAAG,CAAET,EAAWC,EAAYQ,CAAE,EACxEH,EAAS,KAAM,CAAEN,EAAWC,EAAYQ,EAAGT,EAAWC,EAAYQ,CAAE,EACpEH,EAAS,KAAMN,EAAWC,EAAYQ,EAAGT,EAAW,CAAEC,EAAYQ,CAAE,EACpEH,EAAS,KAAMN,EAAW,CAAEC,EAAYQ,EAAG,CAAET,EAAW,CAAEC,EAAYQ,CAAE,EAExEA,GAAKJ,EAIN,KAAK,aAAc,WAAY,IAAIM,EAAwBL,EAAU,CAAE,CAAE,CAE1E,CAED,ECvDO,IAAMM,EAAN,KAAW,CAGhB,YAAoBC,EAA0BC,EAAoB,CAA9C,aAAAD,EAA0B,cAAAC,EAC5C,KAAK,MAAQ,IAAIC,EACjB,KAAK,MAAM,WAAa,IAAIC,EAAM,OAAQ,EAE1C,KAAK,MAAM,IAAI,KAAK,SAAS,KAAK,EAClC,KAAK,IAAM,IAAIC,EACb,IAAIC,EAAgB,EAAG,EAAG,EAAG,GAAI,GAAI,EAAE,EACvC,IAAIC,EAAkB,CAAE,MAAO,OAAS,CAAC,CAC3C,EACA,KAAK,IAAI,SAAS,UAAU,EAAG,EAAG,CAAC,EACnC,KAAK,MAAM,IAAI,KAAK,GAAG,EAEvB,IAAMC,EAAQ,IAAIC,EAAgB,SAAU,OAAQ,EACpDD,EAAM,SAAS,IAAI,EAAG,EAAG,CAAC,EAC1B,KAAK,MAAM,IAAIA,CAAK,EAEpB,QAAWE,KAAc,KAAK,QAAQ,YACpC,KAAK,MAAM,IAAIA,CAAU,CAE7B,CAEO,QAAe,CACpB,KAAK,SAAS,OAAO,CACvB,CACF",
  "names": ["BoxLineGeometry", "BufferGeometry", "width", "height", "depth", "widthSegments", "heightSegments", "depthSegments", "widthHalf", "heightHalf", "depthHalf", "segmentWidth", "segmentHeight", "segmentDepth", "vertices", "x", "y", "z", "i", "Float32BufferAttribute", "Room", "vrInput", "vrPuzzle", "Scene", "Color", "LineSegments", "BoxLineGeometry", "LineBasicMaterial", "light", "HemisphereLight", "controller"]
}
