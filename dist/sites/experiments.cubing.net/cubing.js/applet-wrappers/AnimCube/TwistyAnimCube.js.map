{
  "version": 3,
  "sources": ["../../../../../../src/sites/experiments.cubing.net/cubing.js/applet-wrappers/AnimCube/TwistyAnimCube.ts"],
  "sourcesContent": ["import { Alg } from \"../../../../../cubing/alg\";\nimport { TwistyPlayer, TwistyPlayerConfig } from \"../../../../../cubing/twisty\";\nimport { ManagedCustomElement } from \"../../../../../cubing/twisty/views/ManagedCustomElement\";\nimport { customElementsShim } from \"../../../../../cubing/twisty/views/node-custom-element-shims\";\n\nconst DEBUG = false;\n\nconst warned = new Set<string>();\nfunction warnOnce(warning: string) {\n  if (!warned.has(warning)) {\n    console.warn(warning);\n    warned.add(warning);\n  }\n}\n\n// From http://software.rubikscube.info/AnimCube/\nconst paramsNotImplementedYet: Record<string, true> = {\n  config: true, // fff...\n  bgcolor: true, // hhhhhh\n  butbgcolor: true, // hhhhhh\n  colorscheme: true, // cccccc\n  colors: true, // hhhhhh...\n  position: true, // ppp...\n  speed: true, // nn...\n  doublespeed: true, // nn...\n  perspective: true, // nn...\n  scale: true, // nn...\n  align: true, // d\n  hint: true, // nn...\n  buttonbar: true, // d\n  edit: true, // d\n  movetext: true, // d\n  fonttype: true, // d\n  metric: true, // d\n  move: true, // mmmmmmmmm...\n  initmove: true, // mmmmmmmmm... / #\n  initrevmove: true, // mmmmmmmmm... / #\n  demo: true, // mmmmmmmmm... / #\n  facelets: true, // xxxxxx...xxxxxx\n  pos: true, // aaaaaa...aaaaaa\n};\n\nexport class TwistyAnimCube extends ManagedCustomElement {\n  twistyPlayer: TwistyPlayer;\n  constructor(\n    private finishConnectedCallback?: (twistyAnimCube: TwistyAnimCube) => void,\n  ) {\n    super();\n  }\n\n  protected connectedCallback(): void {\n    // We set timeout so that we can access the children.\n    setTimeout(() => {\n      const twistyPlayerConfig: TwistyPlayerConfig = {\n        alg: new Alg(),\n      };\n\n      const process = (\n        name: string,\n        callback: (value: string) => void,\n      ): void => {\n        delete paramsNotImplementedYet[name];\n        const child = this.children[name as any]; // TODO: Does the DOM API guarantee this always works?\n        if (DEBUG) {\n          console.info(name, child);\n        }\n        if (child) {\n          const value = child.getAttribute(\"value\");\n          if (value) {\n            callback(value);\n          }\n        }\n      };\n\n      process(\"move\", (value: string) => {\n        twistyPlayerConfig.alg = new Alg(value ?? \"\");\n      });\n\n      process(\"initmove\", (value: string) => {\n        if (value === \"#\") {\n          twistyPlayerConfig.experimentalSetupAlg = new Alg(\n            twistyPlayerConfig.alg,\n          ).invert();\n        } else {\n          twistyPlayerConfig.experimentalSetupAlg = Alg.fromString(value ?? \"\");\n        }\n      });\n\n      // Takes precedenve over `initmove`\n      process(\"initrevmove\", (value: string) => {\n        if (value === \"#\") {\n          twistyPlayerConfig.experimentalSetupAlg = new Alg(\n            twistyPlayerConfig.alg,\n          ).invert();\n        } else {\n          twistyPlayerConfig.experimentalSetupAlg = Alg.fromString(\n            value ?? \"\",\n          ).invert();\n        }\n      });\n\n      process(\"buttonbar\", (value: string) => {\n        switch (value) {\n          case \"0\": {\n            twistyPlayerConfig.controlPanel = \"none\";\n            return;\n          }\n          case \"1\": {\n            warnOnce(\"buttonbar=1 is not implemented (yet)\");\n            return;\n          }\n          case \"2\":\n            return;\n          default:\n            warnOnce(`invalid buttonbar value: ${value}`);\n            return;\n        }\n      });\n\n      process(\"hint\", (value: string) => {\n        switch (value) {\n          case \"0\": {\n            twistyPlayerConfig.hintFacelets = \"none\";\n            return;\n          }\n          default:\n            twistyPlayerConfig.hintFacelets = \"floating\";\n            return;\n        }\n      });\n\n      if (DEBUG) {\n        console.info(twistyPlayerConfig);\n      }\n      this.twistyPlayer = new TwistyPlayer(twistyPlayerConfig);\n\n      process(\"speed\", (value: string) => {\n        let speed = parseFloat(value);\n        if (speed === 0) {\n          speed = 10;\n        }\n        if (speed < 0) {\n          warnOnce(\"speed must be a non-negative number\");\n        }\n        this.twistyPlayer.tempoScale = 10 / speed;\n      });\n\n      // process(\"width\", (value: string) => {\n      //   const width = parseFloat(value);\n      //   this.twistyPlayer.style.width = `${width.toString()}px`;\n      // });\n\n      // process(\"height\", (value: string) => {\n      //   const height = parseFloat(value);\n      //   this.twistyPlayer.style.height = `${height.toString()}px`;\n      // });\n\n      for (const name in paramsNotImplementedYet) {\n        if (this.children[name as any]) {\n          warnOnce(`Param is not implemented (yet): ${name}`);\n          return;\n        }\n      }\n\n      this.addElement(this.twistyPlayer);\n      if (this.finishConnectedCallback) {\n        this.finishConnectedCallback(this);\n      }\n    });\n  }\n}\n\ncustomElementsShim.define(\"twisty-anim-cube\", TwistyAnimCube);\n\nwindow.addEventListener(\"DOMContentLoaded\", () => {\n  const applets = document.querySelectorAll(\"applet\");\n  for (const applet of Array.from(applets)) {\n    const attributeContains = (attrName: string, substr: string): boolean => {\n      return (\n        (applet.getAttribute(attrName) ?? \"\").toLowerCase().indexOf(substr) !==\n        -1\n      );\n    };\n\n    let twisty: Element;\n    if (attributeContains(\"code\", \"animcube\")) {\n      twisty = new TwistyAnimCube((twistyAnimCube: TwistyAnimCube) => {\n        const width = applet.getAttribute(\"width\");\n        if (width) {\n          twistyAnimCube.twistyPlayer.style.width = `${parseInt(\n            width,\n          ).toString()}px`;\n        }\n        const height = applet.getAttribute(\"height\");\n        if (height) {\n          twistyAnimCube.twistyPlayer.style.height = `${parseInt(\n            height,\n          ).toString()}px`;\n        }\n      });\n    } else {\n      return;\n    }\n    twisty.append(...Array.from(applet.childNodes));\n    applet.insertAdjacentElement(\"afterend\", twisty);\n    applet.remove();\n  }\n});\n"],
  "mappings": "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",
  "names": ["DEBUG", "warned", "warnOnce", "warning", "paramsNotImplementedYet", "TwistyAnimCube", "ManagedCustomElement", "finishConnectedCallback", "twistyPlayerConfig", "Alg", "process", "name", "callback", "child", "value", "TwistyPlayer", "speed", "customElementsShim", "applets", "applet", "attributeContains", "attrName", "substr", "twisty", "twistyAnimCube", "width", "height"]
}
