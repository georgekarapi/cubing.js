{
  "version": 3,
  "sources": ["../../../../../src/sites/experiments.cubing.net/cubing.js/stress-tests/2x2x2-devils-alg.ts"],
  "sourcesContent": ["// Stub file for testing.\n// Feel free to add code here if you need a quick place to run some code, but avoid committing any changes.\n\nimport { AlgBuilder, Grouping, Move, AlgNode } from \"../../../../cubing/alg\";\nimport { experimentalCountMoves } from \"../../../../cubing/notation\";\nimport { TwistyPlayer } from \"../../../../cubing/twisty\";\n\n(async () => {\n  const devilsAlgDef = {\n    V: \"U'\",\n    S: \"R'\",\n    G: \"F'\",\n    b: \"U R U R U R\",\n    a: \"b U R U R\",\n    i: \"b b U R\",\n    c: \"V R i i V R\",\n    n: \"V R a\",\n    d: \"n n\",\n    e: \"n c U R\",\n    f: \"U R c a V R\",\n    g: \"n c a b V R\",\n    h: \"n b c a V R\",\n    j: \"c c a V R\",\n    k: \"b b V R\",\n    l: \"n c c\",\n    m: \"n U R\",\n    o: \"V R U R\",\n    r: \"a d c U R e f k n b h a o d c U R f c c n c a b d o d c U R j a b V R d c c f c g d c c f c c V R i c a U R d n V R d l j U R U R e j a o c d c c f c g l c c a d V R d d U R c i V R c j U R c e c m c U R c a d V R d g a b o U R n b e c c a d\",\n    s: \"n b g a V R d b l i n V R e c k d b c a n b V R m c U R m c i d o U R\",\n    t: \"U R U R n U U a U R d V R i h k h c e c n c a b d V R d c U R f U R U R h a V R d l f a b n b V R d e c k c f V R i g k U R d U R c f c c a U R d V R d e j h h e j a o U R d c U R U R e f a V R e g k g l U R c a d V R d d U R c i V R c h e j a o l i V R V R i g m c i d V R n b e U R e U R c a d V R d c a b V R h U R e f a V R d h c j U R g m e f U R m c i d d U U a U R d V R i c k n b e f a o d c U R j a b n o d l i n b o U R e U R n b c a d V R d g c i V R c g n c g c a U R d V R d d U R U R c k U R j U R c e U R n c a b d V R c c d c U R f U R U R l U R V R i c a U R d n V R d m c c V R i j a V R h c V R i j a V R n b e f a o d U R U R g l f a V R e c k d c U R f a b V R m h i d n U U a U R d e e f k n b h a o d c U R f c c n c a b d o d c U R j a b V R d c c f c g d c c f c c V R i c a U R d n V R d l j U R U R e j a o c d c c f c g l c c a d V R d d U R c i V R c j U R c e c m c U R c a d V R d g a b o U R n b e c c a d V R n b g a V R d b l i n V R e c k d b c a n b V R m c U R m c i d d U U a U R d V R i h k h c e c n c a b d V R d c U R f U R U R h a V R d l f a b n b V R d e c k c f V R i g k U R d U R c f c c a U R d V R d e j h h e j a o U R d c U R U R e f a V R e g k g l U R c a d V R d d U R c i V R c h e j a o l i V R V R i g m c i d V R n b e U R e U R c a d V R d c a b V R h U R e f a V R d h c j U R g m e f U R m c i d d U U a U R d V R i c k n b e f a o d c U R j a b n o d l i n b o U R e U R n b c a d V R d g c i V R c g n c g c a U R d V R d d U R U R c k U R j U R c e U R n c a b d V R c c d c U R f U R U R l U R V R i c a U R d n V R d m c c V R i j a V R h c V R i j a V R n b e f a o d U R U R g l f a V R e c k d c U R f a b V R m h i d n U U a U R d e e f k n b h a o d c U R f c c n c a b d o d c U R j a b V R d c c f c g d c c f c c V R i c a U R d n V R d l j U R U R e j a o c d c c f c g l c c a d V R d d U R c i V R c j U R c e c m c U R c a d V R d g a b o U R n b e c c a d V R n b g a V R d b l i n V R e c k d b c a n b V R m c U R m c i d d U U a U R d V R i h k h c e c n c a b d V R d c U R f U R U R h a V R d l f a b n b V R d e c k c f V R i g k U R d U R c f c c a U R d V R d e j h h e j a o U R d c U R U R e f a V R e g k g l U R c a d V R d d U R c i V R c h e j a o l i V R V R i g m c i d V R n b e U R e U R c a d V R d c a b V R h U R e f a V R d h c j U R g m e f U R m c i d d U U a U R d V R i c k n b e f a o d c U R j a b n o d l i n b o U R e U R n b c a d V R d g c i V R c g n c g c a U R d V R d d U R U R c k U R j U R c e U R n c a b d V R c c d c U R f U R U R l U R V R i c a U R d n V R d m c\",\n    w: \"c V R i j a V R h c V R i j a V R n b e f a o d U R U R g l f a V R e c k d c U R f a b V R m h i d n U\",\n    u: \"k r V R s U R t w F\",\n    v: \"u u u u u u u u a V R r V R s U R t w U U G\",\n    p: \"F V w' t' S V s' R R R U r' S U S V b' S F R b U R V R r V S S S s U R t w U G\",\n    q: \"G V w' t' S V s' S U r' S U a' S F V V w' t' S V s' S U r' S U a' F R r V R s U S S S t w U a G\",\n    x: \"k r V R s U R t c V R i j a V R h c V R i j a V R n b e f a o d U R U R g l f a V R n V R U p b U R U p b U R U p b o c k d c U R f a b V R V R k a b o U R U p b U R U p b U R U p U R d U R U R d n U F k r V R s U R t V R U p a a b V R V R i j a V R h c V R i c n a U p b d V R n b e f a o d U R U R g n o U R U p b U R U p b U R U p U R V R c f a V R e c k V p a V R U p b U R c U R U R c U R U p b n b V R V R k a b n b U R U p b U R d U R U R d n U F a V R r V R s U R t V R U p a a b V R V R i j a V R h c V R i j a V R n b e U R o U p a i d o d U R U R g l f a V R e n b U R U q b U R V R k n V R U p b U R n a b U R V p U R f a b V R V R k U R U p U p b U p U p c U p U R U p U p U R V R b U p b V R b U R U p V R U p b U R o U p b U U U G\",\n    z: \"v v v v v v u u u u u u x\",\n  };\n\n  const constructed: Record<string, AlgNode> = {\n    U: new Move(\"U\"),\n    R: new Move(\"R\"),\n    F: new Move(\"F\"),\n    \"U'\": new Move(\"U'\"),\n    \"R'\": new Move(\"R'\"),\n    \"F'\": new Move(\"F'\"),\n  };\n\n  const progress = document.querySelector(\"#progress\") as HTMLDivElement;\n  for (const [varName, def] of Object.entries(devilsAlgDef)) {\n    const update = progress.appendChild(document.createElement(\"div\"));\n    update.textContent = `${varName} = // ...`;\n    await new Promise((resolve) => setTimeout(resolve, 10));\n    const algBuilder = new AlgBuilder();\n    for (const tidbit of def.split(\" \")) {\n      // let inverted = false\n      // if (tidbit.endsWith(\"'\")) {\n      //   inverted = true\n      //   tidbit = tidbit.slice(0, -1);\n      // }\n      const existing = constructed[tidbit];\n      if (!existing) {\n        throw new Error(`aaaargh ${tidbit}`);\n      }\n      const toPush = existing;\n      // if (inverted) {\n      //   toPush = toPush.invert();\n      // }\n      algBuilder.push(toPush);\n    }\n    const alg = algBuilder.toAlg();\n    const grouping = new Grouping(algBuilder.toAlg());\n    constructed[varName] = grouping;\n    constructed[`${varName}'`] = grouping.invert();\n    const c = experimentalCountMoves(alg);\n    console.log(`Alg ${varName} has ${c} move${c === 1 ? \"\" : \"s\"}`);\n    update.textContent = `${varName} = ${def} // ${c} move${\n      c === 1 ? \"\" : \"s\"\n    }`;\n    update.scrollIntoView();\n    await new Promise((resolve) => setTimeout(resolve, 1));\n  }\n\n  const playerWrapper = document.querySelector(\"#player-wrapper\")!;\n\n  playerWrapper.textContent = \"\";\n  playerWrapper.appendChild(\n    new TwistyPlayer({\n      puzzle: \"2x2x2\",\n      alg: (constructed[\"z\"] as Grouping).alg,\n      backView: \"top-right\",\n    }),\n  );\n})();\n"],
  "mappings": "qVAOC,SAAY,CACX,IAAMA,EAAe,CACnB,EAAG,KACH,EAAG,KACH,EAAG,KACH,EAAG,cACH,EAAG,YACH,EAAG,UACH,EAAG,cACH,EAAG,QACH,EAAG,MACH,EAAG,UACH,EAAG,cACH,EAAG,cACH,EAAG,cACH,EAAG,YACH,EAAG,UACH,EAAG,QACH,EAAG,QACH,EAAG,UACH,EAAG,oPACH,EAAG,wEACH,EAAG,4hFACH,EAAG,0GACH,EAAG,sBACH,EAAG,8CACH,EAAG,iFACH,EAAG,kGACH,EAAG,4uBACH,EAAG,2BACL,EAEMC,EAAuC,CAC3C,EAAG,IAAIC,EAAK,GAAG,EACf,EAAG,IAAIA,EAAK,GAAG,EACf,EAAG,IAAIA,EAAK,GAAG,EACf,KAAM,IAAIA,EAAK,IAAI,EACnB,KAAM,IAAIA,EAAK,IAAI,EACnB,KAAM,IAAIA,EAAK,IAAI,CACrB,EAEMC,EAAW,SAAS,cAAc,WAAW,EACnD,OAAW,CAACC,EAASC,CAAG,IAAK,OAAO,QAAQL,CAAY,EAAG,CACzD,IAAMM,EAASH,EAAS,YAAY,SAAS,cAAc,KAAK,CAAC,EACjEG,EAAO,YAAc,GAAGF,aACxB,MAAM,IAAI,QAASG,GAAY,WAAWA,EAAS,EAAE,CAAC,EACtD,IAAMC,EAAa,IAAIC,EACvB,QAAWC,KAAUL,EAAI,MAAM,GAAG,EAAG,CAMnC,IAAMM,EAAWV,EAAYS,GAC7B,GAAI,CAACC,EACH,MAAM,IAAI,MAAM,WAAWD,GAAQ,EAErC,IAAME,EAASD,EAIfH,EAAW,KAAKI,CAAM,CACxB,CACA,IAAMC,EAAML,EAAW,MAAM,EACvBM,EAAW,IAAIC,EAASP,EAAW,MAAM,CAAC,EAChDP,EAAYG,GAAWU,EACvBb,EAAY,GAAGG,MAAcU,EAAS,OAAO,EAC7C,IAAME,EAAIC,EAAuBJ,CAAG,EACpC,QAAQ,IAAI,OAAOT,SAAeY,SAASA,IAAM,EAAI,GAAK,KAAK,EAC/DV,EAAO,YAAc,GAAGF,OAAaC,QAAUW,SAC7CA,IAAM,EAAI,GAAK,MAEjBV,EAAO,eAAe,EACtB,MAAM,IAAI,QAASC,GAAY,WAAWA,EAAS,CAAC,CAAC,CACvD,CAEA,IAAMW,EAAgB,SAAS,cAAc,iBAAiB,EAE9DA,EAAc,YAAc,GAC5BA,EAAc,YACZ,IAAIC,EAAa,CACf,OAAQ,QACR,IAAMlB,EAAY,EAAkB,IACpC,SAAU,WACZ,CAAC,CACH,CACF,GAAG",
  "names": ["devilsAlgDef", "constructed", "Move", "progress", "varName", "def", "update", "resolve", "algBuilder", "AlgBuilder", "tidbit", "existing", "toPush", "alg", "grouping", "Grouping", "c", "countMoves", "playerWrapper", "TwistyPlayer"]
}
