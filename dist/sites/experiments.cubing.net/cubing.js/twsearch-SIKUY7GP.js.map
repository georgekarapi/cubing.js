{
  "version": 3,
  "sources": ["../../../../src/cubing/vendor/mpl/twsearch/index.js"],
  "sourcesContent": ["console.info(\"Loading twsearch v0.4.1-1-g57f93f92\");\n// src/js/api.ts\nimport { Alg } from \"../../../alg\";\nasync function importOnce() {\n  const fn = (await import(\"./twsearch-Q7TBHLPE.js\")).default;\n  return await fn();\n}\nvar cachedEmscriptenModule = null;\nasync function emscriptenModule() {\n  return cachedEmscriptenModule ?? (cachedEmscriptenModule = importOnce());\n}\nfunction cwrap(fn, returnType, argTypes, processReturnValue = (v) => v) {\n  const wrapped = (async () => (await emscriptenModule()).cwrap(fn, returnType, argTypes))();\n  return async (...args) => {\n    return processReturnValue((await wrapped)(...args));\n  };\n}\nvar NoSolutionError = class extends Error {\n};\nfunction parseResult(s) {\n  if (s === \"--no solution--\") {\n    throw new NoSolutionError(\"\");\n  }\n  return Alg.fromString(s);\n}\nvar stringArg = [\"string\"];\nvar setArg = cwrap(\n  \"w_arg\",\n  \"void\",\n  stringArg\n);\nvar setKPuzzleDefString = cwrap(\n  \"w_setksolve\",\n  \"void\",\n  stringArg\n);\nvar solveScramble = cwrap(\n  \"w_solvescramble\",\n  \"string\",\n  stringArg,\n  parseResult\n);\nvar solveState = cwrap(\n  \"w_solveposition\",\n  \"string\",\n  stringArg,\n  parseResult\n);\n\n// src/js/serialize.ts\nvar BLANK_LINE = \"\";\nvar END = \"End\";\nfunction sanitize(s) {\n  return s.replaceAll(/[^A-Za-z0-9]/g, \"_\");\n}\nfunction serializeKTransformationDataToTws(name, t, forScramble = false) {\n  const outputLines = [];\n  outputLines.push(\n    `${forScramble ? \"ScrambleState\" : \"MoveTransformation\"} ${sanitize(name)}`\n  );\n  for (const [orbitName, orbitData] of Object.entries(t)) {\n    outputLines.push(sanitize(orbitName));\n    outputLines.push(orbitData.permutation.join(\" \"));\n    outputLines.push(orbitData.orientation.join(\" \"));\n  }\n  outputLines.push(END);\n  outputLines.push(BLANK_LINE);\n  return outputLines.join(\"\\n\");\n}\nfunction serializeDefToTws(kpuzzle, options) {\n  let outputLines = [];\n  const def = kpuzzle.definition;\n  outputLines.push(`Name ${sanitize(def.name ?? \"CustomPuzzle\")}`);\n  outputLines.push(BLANK_LINE);\n  for (const [orbitName, orbitInfo] of Object.entries(def.orbits)) {\n    outputLines.push(\n      `Set ${sanitize(orbitName)} ${orbitInfo.numPieces} ${orbitInfo.numOrientations}`\n    );\n  }\n  outputLines.push(BLANK_LINE);\n  outputLines.push(\"StartState\");\n  if (options?.startState) {\n    outputLines.push(options?.startState);\n  } else {\n    for (const [orbitName, orbitDef] of Object.entries(def.startStateData)) {\n      outputLines.push(sanitize(orbitName));\n      outputLines.push(orbitDef.pieces.join(\" \"));\n      outputLines.push(orbitDef.orientation.join(\" \"));\n    }\n  }\n  outputLines.push(END);\n  outputLines.push(BLANK_LINE);\n  function include(moveName) {\n    if (options?.moveSubset) {\n      return options.moveSubset.includes(moveName);\n    } else {\n      return true;\n    }\n  }\n  for (const [moveName, moveDef] of Object.entries(def.moves)) {\n    if (include(moveName)) {\n      outputLines.push(serializeKTransformationDataToTws(moveName, moveDef));\n    }\n  }\n  for (const [moveName, moveAlgDef] of Object.entries(\n    def.experimentalDerivedMoves ?? {}\n  )) {\n    if (include(moveName)) {\n      const transformation = kpuzzle.algToTransformation(moveAlgDef);\n      outputLines.push(\n        serializeKTransformationDataToTws(\n          moveName,\n          transformation.transformationData\n        )\n      );\n    }\n  }\n  return outputLines.join(\"\\n\");\n}\nexport {\n  NoSolutionError,\n  serializeDefToTws,\n  serializeKTransformationDataToTws,\n  setArg,\n  setKPuzzleDefString,\n  solveScramble,\n  solveState\n};\n"],
  "mappings": "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",
  "names": ["importOnce", "fn", "cachedEmscriptenModule", "emscriptenModule", "cwrap", "returnType", "argTypes", "processReturnValue", "v", "wrapped", "args", "NoSolutionError", "parseResult", "s", "Alg", "stringArg", "setArg", "setKPuzzleDefString", "solveScramble", "solveState", "BLANK_LINE", "END", "sanitize", "serializeKTransformationDataToTws", "name", "t", "forScramble", "outputLines", "orbitName", "orbitData", "serializeDefToTws", "kpuzzle", "options", "def", "orbitInfo", "orbitDef", "include", "moveName", "moveDef", "moveAlgDef", "transformation"]
}
