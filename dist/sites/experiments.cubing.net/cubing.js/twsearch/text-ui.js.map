{
  "version": 3,
  "sources": ["../../../../../src/sites/experiments.cubing.net/cubing.js/twsearch/text-ui.ts"],
  "sourcesContent": ["import { KPuzzle, KState } from \"../../../../cubing/kpuzzle\";\nimport { cube2x2x2 } from \"../../../../cubing/puzzles\";\nimport { experimentalSolveTwsearch } from \"../../../../cubing/search\";\n\nconst LOCALSTORAGE_DEF = \"twsearch/text-ui/def\";\nconst LOCALSTORAGE_SEARCH = \"twsearch/text-ui/search\";\nconst LOCALSTORAGE_CHECKED_MOVES = \"twsearch/text-ui/checked-moves\";\n\nasync function defaultDef() {\n  return JSON.stringify((await cube2x2x2.kpuzzle()).definition, null, \"  \")\n    .replace(/,\\n *(\\d)/g, \", $1\")\n    .replace(/\\[\\n +(\\d)/g, \"[$1\")\n    .replace(/\\n +\\]/g, \"]\")\n    .replace(/( *)\\}\\n( *)\\}/g, \"$2}}\");\n}\n\nfunction validateAndSaveInput(\n  input: HTMLTextAreaElement,\n  localStorageField: string,\n): void {\n  try {\n    new KPuzzle(JSON.parse(input.value));\n    localStorage[localStorageField] = input.value;\n    input.classList.add(\"valid\");\n    input.classList.remove(\"invalid\");\n  } catch (e) {\n    input.classList.add(\"invalid\");\n    input.classList.remove(\"valid\");\n    throw e;\n  }\n}\n\n(async () => {\n  (\n    document.querySelector(\"#reset-def-search\") as HTMLButtonElement\n  ).addEventListener(\"click\", () => {\n    delete localStorage[LOCALSTORAGE_DEF];\n    delete localStorage[LOCALSTORAGE_SEARCH];\n    location.reload();\n  });\n  (\n    document.querySelector(\"#reset-move-subset\") as HTMLButtonElement\n  ).addEventListener(\"click\", () => {\n    delete localStorage[LOCALSTORAGE_CHECKED_MOVES];\n    location.reload();\n  });\n  (\n    document.querySelector(\"#toggle-move-subset\") as HTMLButtonElement\n  ).addEventListener(\"click\", () => {\n    for (const checkbox of Array.from(\n      moveSubsetElem.querySelectorAll(\"input[type=checkbox\"),\n    ) as HTMLInputElement[]) {\n      checkbox.checked = !checkbox.checked;\n      checkedMoves[checkbox.value] = !checkedMoves[checkbox.value];\n    }\n    saveCheckedMoves();\n  });\n\n  const def = document.querySelector(\"#def\") as HTMLTextAreaElement;\n  def.value = localStorage[LOCALSTORAGE_DEF]\n    ? localStorage[LOCALSTORAGE_DEF]\n    : await defaultDef();\n  validateAndSaveInput(def, LOCALSTORAGE_DEF);\n  def.addEventListener(\"input\", () =>\n    validateAndSaveInput(def, LOCALSTORAGE_DEF),\n  );\n\n  const search = document.querySelector(\"#search\") as HTMLTextAreaElement;\n  search.value = localStorage[LOCALSTORAGE_SEARCH]\n    ? localStorage[LOCALSTORAGE_SEARCH]\n    : `{\n  \"CORNERS\": {\n    \"pieces\": [0, 1, 2, 3, 4, 5, 6, 7],\n    \"orientation\": [1, 2, 0, 0, 0, 0, 0, 0]\n  }\n}`;\n  validateAndSaveInput(search, LOCALSTORAGE_SEARCH);\n  search.addEventListener(\"input\", () =>\n    validateAndSaveInput(search, LOCALSTORAGE_SEARCH),\n  );\n\n  const go = document.querySelector(\"#go\") as HTMLButtonElement;\n  const moveSubsetElem = document.querySelector(\n    \"#move-subset\",\n  ) as HTMLTextAreaElement;\n  const minDepthElem = document.querySelector(\n    \"#min-depth\",\n  ) as HTMLTextAreaElement;\n  const results = document.querySelector(\"#results\") as HTMLTextAreaElement;\n\n  let checkedMoves: Record<string, boolean> = {};\n  try {\n    checkedMoves = JSON.parse(\n      localStorage.getItem(LOCALSTORAGE_CHECKED_MOVES) ?? \"{}\",\n    );\n  } catch {}\n\n  async function updateMoveSubset(): Promise<void> {\n    const kpuzzle = new KPuzzle(JSON.parse(def.value));\n    moveSubsetElem.textContent = \"\";\n    const moveNames = Object.keys(kpuzzle.definition.moves)\n      .concat(Object.keys(kpuzzle.definition.experimentalDerivedMoves ?? {}))\n      .sort(function (a, b) {\n        return a.localeCompare(b);\n      });\n    // let lastMoveName = moveNames[0];\n    for (const moveName of moveNames) {\n      const id = `move-${moveName}`;\n      const wrapper = moveSubsetElem.appendChild(\n        document.createElement(\"label\"),\n      );\n      wrapper.setAttribute(\"for\", id);\n      wrapper.setAttribute(\"style\", \"border: 1px solid; padding: 0 0.5em;\");\n      const checkbox = wrapper.appendChild(document.createElement(\"input\"));\n      checkbox.type = \"checkbox\";\n      checkbox.value = moveName;\n      checkbox.id = id;\n      if (moveName in checkedMoves) {\n        checkbox.checked = checkedMoves[moveName];\n      } else {\n        const moveDefault =\n          !moveName.endsWith(\"v\") && moveName.toLowerCase() !== moveName; // Exclude what is probably a rotation.\n        checkedMoves[moveName] = moveDefault;\n        checkbox.checked = moveDefault;\n      }\n      const label = wrapper.appendChild(document.createElement(\"label\"));\n      label.textContent = moveName;\n      label.setAttribute(\"for\", id);\n      checkbox.addEventListener(\"input\", () => {\n        checkedMoves[moveName] = checkbox.checked;\n        saveCheckedMoves();\n      });\n      // lastMoveName = moveName;\n    }\n    saveCheckedMoves();\n  }\n\n  def.addEventListener(\"input\", updateMoveSubset);\n  updateMoveSubset();\n\n  function saveCheckedMoves() {\n    localStorage.setItem(\n      LOCALSTORAGE_CHECKED_MOVES,\n      JSON.stringify(checkedMoves),\n    );\n  }\n\n  function getMoveSubset(): string[] {\n    const output = [];\n    for (const checkbox of Array.from(\n      moveSubsetElem.querySelectorAll(\"input[type=checkbox\"),\n    ) as HTMLInputElement[]) {\n      if (checkbox.checked) {\n        output.push(checkbox.value);\n      }\n    }\n    return output;\n  }\n\n  go.addEventListener(\"click\", async () => {\n    const kpuzzle = new KPuzzle(JSON.parse(def.value));\n    const kstate = new KState(kpuzzle, JSON.parse(search.value));\n    results.value = \"Searching...\";\n    try {\n      results.value = (\n        await experimentalSolveTwsearch(kpuzzle, kstate, {\n          moveSubset: getMoveSubset(),\n          minDepth: parseInt(minDepthElem.value),\n        })\n      ).toString();\n    } catch (e) {\n      results.value = \"Error:\\n\" + e;\n      throw e;\n    }\n  });\n})();\n"],
  "mappings": "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",
  "names": ["LOCALSTORAGE_DEF", "LOCALSTORAGE_SEARCH", "LOCALSTORAGE_CHECKED_MOVES", "defaultDef", "cube2x2x2", "validateAndSaveInput", "input", "localStorageField", "KPuzzle", "e", "checkbox", "moveSubsetElem", "checkedMoves", "saveCheckedMoves", "def", "search", "go", "minDepthElem", "results", "updateMoveSubset", "kpuzzle", "moveNames", "a", "b", "moveName", "id", "wrapper", "moveDefault", "label", "getMoveSubset", "output", "kstate", "KState", "solveTwsearch"]
}
