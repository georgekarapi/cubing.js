{
  "version": 3,
  "sources": ["../../../../../src/sites/experiments.cubing.net/cubing.js/twsearch/benchmark.ts"],
  "sourcesContent": ["import { randomScrambleForEvent } from \"../../../../cubing/search/outside\";\n\nconst num = parseInt(new URL(location.href).searchParams.get(\"num\") ?? \"1000\");\n\nconst elem = document.querySelector(\"#results\") as HTMLDivElement;\nconst latest = document.querySelector(\"#latest\") as HTMLSpanElement;\nconst numElem = document.querySelector(\"#num\") as HTMLSpanElement;\nconst numCancelling = document.querySelector(\n  \"#num-cancelling\",\n) as HTMLSpanElement;\nconst mean = document.querySelector(\"#mean\") as HTMLSpanElement;\nconst restMean = document.querySelector(\"#rest-mean\") as HTMLSpanElement;\nconst median = document.querySelector(\"#median\") as HTMLSpanElement;\n(async () => {\n  let first: number;\n  let total = 0;\n  let cancelling = 0;\n  const results = [];\n  for (let n = 1; n <= num; n++) {\n    const start = performance.now();\n    const scramble = await randomScrambleForEvent(\"222\");\n    const ms = Math.floor(10 * (performance.now() - start)) / 10;\n    first ??= ms;\n    latest.textContent = scramble.toString();\n\n    numElem.textContent = `${n}`;\n    numCancelling.textContent = `${cancelling}`;\n    elem.textContent += `${ms}ms, `; // This is slow-ish, but we're not measuring it.\n    total += ms;\n    const unrepeated = scramble\n      .toString()\n      .replaceAll(\"2\", \"\")\n      .replaceAll(\"'\", \"\");\n    if (unrepeated.includes(\"L R\") || unrepeated.includes(\"R L\")) {\n      cancelling++;\n    }\n    mean.textContent = `${Math.floor((total / n) * 10) / 10}ms`;\n    if (n > 1) {\n      restMean.textContent = `${\n        Math.floor(((total - first) / (n - 1)) * 10) / 10\n      }ms`;\n    }\n\n    results.push(ms);\n    results.sort((a, b) => a - b);\n    median.textContent = `${results[Math.floor(results.length / 2)]}ms`;\n  }\n})();\n"],
  "mappings": "wWAEA,IAAMA,EAAM,SAAS,IAAI,IAAI,SAAS,IAAI,EAAE,aAAa,IAAI,KAAK,GAAK,MAAM,EAEvEC,EAAO,SAAS,cAAc,UAAU,EACxCC,EAAS,SAAS,cAAc,SAAS,EACzCC,EAAU,SAAS,cAAc,MAAM,EACvCC,EAAgB,SAAS,cAC7B,iBACF,EACMC,EAAO,SAAS,cAAc,OAAO,EACrCC,EAAW,SAAS,cAAc,YAAY,EAC9CC,EAAS,SAAS,cAAc,SAAS,GAC9C,SAAY,CACX,IAAIC,EACAC,EAAQ,EACRC,EAAa,EACXC,EAAU,CAAC,EACjB,QAASC,EAAI,EAAGA,GAAKZ,EAAKY,IAAK,CAC7B,IAAMC,EAAQ,YAAY,IAAI,EACxBC,EAAW,MAAMC,EAAuB,KAAK,EAC7CC,EAAK,KAAK,MAAM,IAAM,YAAY,IAAI,EAAIH,EAAM,EAAI,GAC1DL,MAAUQ,GACVd,EAAO,YAAcY,EAAS,SAAS,EAEvCX,EAAQ,YAAc,GAAGS,IACzBR,EAAc,YAAc,GAAGM,IAC/BT,EAAK,aAAe,GAAGe,QACvBP,GAASO,EACT,IAAMC,EAAaH,EAChB,SAAS,EACT,WAAW,IAAK,EAAE,EAClB,WAAW,IAAK,EAAE,GACjBG,EAAW,SAAS,KAAK,GAAKA,EAAW,SAAS,KAAK,IACzDP,IAEFL,EAAK,YAAc,GAAG,KAAK,MAAOI,EAAQG,EAAK,EAAE,EAAI,OACjDA,EAAI,IACNN,EAAS,YAAc,GACrB,KAAK,OAAQG,EAAQD,IAAUI,EAAI,GAAM,EAAE,EAAI,QAInDD,EAAQ,KAAKK,CAAE,EACfL,EAAQ,KAAK,CAACO,EAAGC,IAAMD,EAAIC,CAAC,EAC5BZ,EAAO,YAAc,GAAGI,EAAQ,KAAK,MAAMA,EAAQ,OAAS,CAAC,MAC/D,CACF,GAAG",
  "names": ["num", "elem", "latest", "numElem", "numCancelling", "mean", "restMean", "median", "first", "total", "cancelling", "results", "n", "start", "scramble", "randomScrambleForEvent", "ms", "unrepeated", "a", "b"]
}
