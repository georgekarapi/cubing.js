{
  "version": 3,
  "sources": ["../../../../../src/sites/experiments.cubing.net/cubing.js/speechcubing/index.ts"],
  "sourcesContent": ["// Stub file for testing.\n// Feel free to add code here if you need a quick place to run some code, but avoid committing any changes.\n\nimport { Alg } from \"../../../../cubing/alg\";\nimport { KPuzzle } from \"../../../../cubing/kpuzzle\";\nimport { experimentalCube3x3x3KPuzzleDefinition } from \"../../../../cubing/puzzles/cubing-private\";\nimport \"../../../../cubing/twisty\";\n\nconst AnySpeechRecognition = webkitSpeechRecognition;\nconst AnySpeechGrammarList = webkitSpeechGrammarList;\n// const AnySpeechRecognitionEvent = webkitSpeechRecognitionEvent;\n\nconst colors = \"ULFRBDxyzMES\".split(\"\");\nconst grammar = `#JSGF V1.0; grammar colors; public <color> = ${colors.join(\n  \" | \",\n)} ;`;\n\nconst recognition = new AnySpeechRecognition();\nconst speechRecognitionList = new AnySpeechGrammarList();\nspeechRecognitionList.addFromString(grammar, 1);\nrecognition.grammars = speechRecognitionList;\nrecognition.continuous = true;\nrecognition.lang = \"en-US\";\nrecognition.interimResults = false;\nrecognition.maxAlternatives = 10;\n\ndocument.body.onclick = function () {\n  recognition.start();\n  console.log(\"Ready to receive a color command.\");\n};\n\nconst kpuzzle = new KPuzzle(experimentalCube3x3x3KPuzzleDefinition);\nconst player = document.querySelector(\"twisty-player\")!;\nconst alternativeListElem = document.querySelector(\"alternative-list\")!;\n\nrecognition.onresult = function (event) {\n  const latestResult = event.results.item(event.results.length - 1);\n  alternativeListElem.textContent =\n    // rome-ignore lint/style/useTemplate: Using a template would make this more confusing.\n    \"Raw alternatives: \" +\n    Array.from(latestResult)\n      .map((alternative) => alternative.transcript)\n      .join(\" / \");\n  for (const alternative of Array.from(latestResult)) {\n    let transcript = alternative.transcript.trim().toUpperCase();\n    console.log(alternative);\n    transcript = transcript\n      .replace(\"YOUTUBE\", \"U2\")\n      .replace(\"YOU\", \"U\")\n      .replace(\" PRIME\", \"'\")\n      .replace(\" WIDE\", \"w\")\n      .replace(\" TWO\", \"2\")\n      .replace(\" TO\", \"2\")\n      .replace(\"WHY\", \"Y\")\n      .replace(\"DEEP\", \"D\")\n      .replace(\"DEE\", \"D\")\n      .replace(\"ARE\", \"R\")\n      .replace(\"OUR\", \"R\")\n      .replace(\"ALL\", \"L\")\n      .replace(\"EL\", \"L\")\n      .replace(\"WHITE\", \"WIDE\")\n      .replace(\"WHY DO\", \"WIDE\")\n      .replace(\"WHY ARE\", \"WIDE R\");\n    switch (transcript) {\n      case \"UNDO\": {\n        player.experimentalModel.alg.set(\n          (async () => {\n            const alg = (await player.experimentalModel.alg.get()).alg;\n            const algNode = Array.from(alg.childAlgNodes());\n            return new Alg(algNode.slice(0, algNode.length - 1));\n          })(),\n        );\n        return;\n      }\n      case \"CLEAR\": {\n        player.alg = \"\";\n        return;\n      }\n      case \"MEGAMINX\":\n      case \"PYRAMINX\":\n      case \"FTO\": {\n        player.puzzle = transcript.toLowerCase() as any;\n        return;\n      }\n      case \"START\": {\n        player.timestamp = \"start\";\n        return;\n      }\n      case \"PLAY\": {\n        player.play();\n        return;\n      }\n      case \"TWIZZLE\": {\n        player.controller.visitTwizzleLink();\n        return;\n      }\n      case \"FAST\": {\n        player.tempoScale = 5;\n        return;\n      }\n      case \"SLOW\": {\n        player.tempoScale = 1;\n        return;\n      }\n    }\n    transcript = transcript\n      .replace(\"X\", \"x\")\n      .replace(\"Y\", \"y\")\n      .replace(\"Z\", \"z\")\n      .replace(\"WIDE U\", \"Uw\")\n      .replace(\"WIDE F\", \"Fw\")\n      .replace(\"WIDE L\", \"Lw\")\n      .replace(\"WIDE R\", \"Rw\")\n      .replace(\"WIDE B\", \"Bw\")\n      .replace(\"WIDE D\", \"Dw\");\n    try {\n      kpuzzle.moveToTransformation(transcript);\n      player.experimentalAddMove(transcript);\n      break;\n    } catch (e) {\n      // ignore\n    }\n  }\n  console.log(latestResult);\n\n  const color = event.results[0][0].transcript;\n  console.log(color);\n  console.log(`Confidence: ${event.results[0][0].confidence}`);\n};\n\nrecognition.onspeechend = function () {\n  recognition.stop();\n};\n\nrecognition.onnomatch = function (_event: SpeechRecognitionEvent) {\n  // diagnostic.textContent = \"I didn't recognise that color.\";\n};\n\nrecognition.onerror = function (_event: Event) {\n  // diagnostic.textContent = \"Error occurred in recognition: \" + event.error;\n};\n"],
  "mappings": "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",
  "names": ["AnySpeechRecognition", "AnySpeechGrammarList", "colors", "grammar", "recognition", "speechRecognitionList", "kpuzzle", "KPuzzle", "cube3x3x3KPuzzleDefinition", "player", "alternativeListElem", "event", "latestResult", "alternative", "transcript", "alg", "algNode", "Alg", "color", "_event"]
}
