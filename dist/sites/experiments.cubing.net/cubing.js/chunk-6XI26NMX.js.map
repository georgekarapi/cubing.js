{
  "version": 3,
  "sources": ["../../../../src/cubing/search/inside/solve/puzzles/clock.ts", "../../../../src/cubing/search/inside/solve/puzzles/wca-minx.ts", "../../../../src/cubing/vendor/apache/comlink-everywhere/outside/index.ts", "../../../../src/cubing/search/inside/search-worker-ts-entry-path-getter.ts", "../../../../src/cubing/search/instantiator.ts", "../../../../src/cubing/search/outside.ts"],
  "sourcesContent": ["import { randomUIntBelow } from \"random-uint-below\";\n\nconst pins = [\"UR\", \"DR\", \"DL\", \"UL\"];\nconst backMoves = [\"U\", \"R\", \"D\", \"L\", \"ALL\"];\nconst frontMoves = pins.concat(backMoves);\n\nexport function randomClockScrambleString(): string {\n  let filteringMoveCount = 0;\n\n  function randomSuffix() {\n    const amount = randomUIntBelow(12);\n    if (amount !== 0) {\n      filteringMoveCount++;\n    }\n    if (amount <= 6) {\n      return `${amount}+`;\n    } else {\n      return `${12 - amount}-`;\n    }\n  }\n\n  const moves = [];\n  function side(families: string[]): void {\n    for (const family of families) {\n      moves.push(`${family}${randomSuffix()}`);\n    }\n  }\n\n  side(frontMoves);\n  moves.push(\"y2\");\n  side(backMoves);\n\n  // https://www.worldcubeassociation.org/regulations/#4b3\n  if (filteringMoveCount < 2) {\n    return randomClockScrambleString();\n  }\n\n  for (const pin of pins) {\n    if (randomUIntBelow(2) === 0) {\n      moves.push(pin);\n    }\n  }\n  return moves.join(\" \");\n}\n", "import { randomUIntBelow } from \"random-uint-below\";\n\nconst suffixes = [\"++\", \"--\"];\n\nexport function randomMegaminxScrambleString(): string {\n  function rdPair(): string {\n    return `R${suffixes[randomUIntBelow(2)]} D${suffixes[randomUIntBelow(2)]}`;\n  }\n\n  function randomU(): string {\n    return `U${[\"\", \"'\"][randomUIntBelow(2)]}`;\n  }\n\n  function row(): string {\n    const chunks = [];\n    for (let i = 0; i < 5; i++) {\n      chunks.push(rdPair());\n    }\n    chunks.push(randomU());\n    return chunks.join(\" \");\n  }\n\n  const chunks = [];\n  for (let i = 0; i < 6; i++) {\n    chunks.push(row());\n  }\n  return chunks.join(\"\\n\");\n}\n", "import nodeEndpoint from \"../node-adapter\";\n\nexport { wrap } from \"comlink\";\n// Mangled so that bundlers don't try to inline the source.\n\nconst worker_threads_mangled = \"node:w-orker-_threa-ds\";\nconst worker_threads_unmangled = () => worker_threads_mangled.replace(/-/g, \"\");\n\nconst useNodeWorkarounds =\n  typeof globalThis.Worker === \"undefined\" &&\n  typeof (globalThis as any).WorkerNavigator === \"undefined\";\n\nasync function nodeWorker(\n  source: string | URL,\n  options?: { eval?: boolean },\n): Promise<Worker> {\n  const { Worker: NodeWorker } = await import(\n    /* @vite-ignore */ worker_threads_unmangled()\n  );\n  const worker = new NodeWorker(source, options);\n  worker.unref();\n  return nodeEndpoint(worker);\n}\n\nexport async function constructWorker(\n  source: string | URL,\n  options?: { eval?: boolean; type?: WorkerType },\n): Promise<Worker> {\n  let worker;\n  if (useNodeWorkarounds) {\n    return nodeWorker(source, { eval: options?.eval });\n  } else {\n    if (options?.eval) {\n      const blob = new Blob([source as string], {\n        type: \"application/javascript\",\n      });\n      source = URL.createObjectURL(blob);\n    }\n    worker = new globalThis.Worker(source, {\n      type: options ? options.type : undefined, // TODO: Is it safe to use `options?.type`?\n    });\n  }\n  return worker;\n}\n", "import { exposeAPI } from \"./worker-guard\";\n\nexposeAPI.expose = false;\nexport async function getWorkerEntryFileURL() {\n  return (await import(\"./search-worker-ts-entry\")).WORKER_ENTRY_FILE_URL;\n}\n", "import {\n  constructWorker,\n  wrap,\n} from \"../vendor/apache/comlink-everywhere/outside\";\nimport { insideAPI, WorkerInsideAPI } from \"./inside/api\";\nimport { getWorkerEntryFileURL } from \"./inside/search-worker-ts-entry-path-getter\";\nimport { searchOutsideDebugGlobals } from \"./outside\";\n\nconst MODULE_WORKER_TIMEOUT_MILLISECONDS = 5000;\n\nexport interface WorkerOutsideAPI {\n  terminate: () => void; // `node` can return a `Promise` with an exit code, but we match the web worker API.\n}\nexport interface InsideOutsideAPI {\n  insideAPI: WorkerInsideAPI;\n  outsideAPI: WorkerOutsideAPI;\n}\n\nexport async function instantiateModuleWorker(): Promise<InsideOutsideAPI> {\n  // rome-ignore lint/suspicious/noAsyncPromiseExecutor: TODO\n  return new Promise<InsideOutsideAPI>(async (resolve, reject) => {\n    const timeoutID = setTimeout(() => {\n      reject(new Error(\"module instantiation timeout\"));\n    }, MODULE_WORKER_TIMEOUT_MILLISECONDS);\n\n    try {\n      const workerEntryFileURL = await getWorkerEntryFileURL();\n      if (!workerEntryFileURL) {\n        reject(new Error(\"Could not get worker entry file URL.\"));\n      }\n      let url: string | URL;\n      if (globalThis.Worker) {\n        // Standard browser-like environment.\n        const importSrc = `import \"${workerEntryFileURL}\";`;\n        const blob = new Blob([importSrc], {\n          type: \"text/javascript\",\n        });\n        url = URL.createObjectURL(blob);\n      } else {\n        // `node` < 18 doesn't have `Blob`:\n        // https://nodejs.org/ko/blog/announcements/v18-release-announce/#other-global-apis\n        // But `node` will not let us construct a worker from a `blob:` URL either.\n        //\n        // We need to keep the original entry file URL, but we have to wrap it in the `URL` class.\n        url = new URL(workerEntryFileURL);\n      }\n\n      const worker = (await constructWorker(url, {\n        type: \"module\",\n      })) as Worker & {\n        nodeWorker?: import(\"worker_threads\").Worker;\n      };\n\n      const onError = (e: ErrorEvent) => {\n        // TODO: Remove fallback when Firefox implements module workers: https://bugzilla.mozilla.org/show_bug.cgi?id=1247687\n        if (e.message?.startsWith(\"SyntaxError\")) {\n          reject(e);\n        }\n      };\n\n      const onFirstMessage = (messageData: string) => {\n        if (messageData === \"comlink-exposed\") {\n          // We need to clear the timeout so that we don't prevent `node` from exiting in the meantime.\n          clearTimeout(timeoutID);\n          resolve(wrapWithTerminate(worker));\n        } else {\n          reject(\n            new Error(`wrong module instantiation message ${messageData}`),\n          );\n        }\n      };\n\n      if (worker.nodeWorker) {\n        // We have to use `once` so the `unref()` from `comlink-everywhere` allows the process to quite as expected.\n        worker.nodeWorker.once(\"message\", onFirstMessage);\n      } else {\n        worker.addEventListener(\"error\", onError, {\n          once: true,\n        });\n        worker.addEventListener(\"message\", (e) => onFirstMessage(e.data), {\n          once: true,\n        });\n      }\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\nfunction wrapWithTerminate(worker: Worker): InsideOutsideAPI {\n  const insideAPI = wrap<WorkerInsideAPI>(worker);\n  const terminate = worker.terminate.bind(worker);\n  return { insideAPI, outsideAPI: { terminate } };\n}\n\nasync function instantiateClassicWorker(): Promise<InsideOutsideAPI> {\n  const { workerSource } = await import(\n    \"./search-worker-inside-generated-string.js\"\n  );\n  const worker = await constructWorker(workerSource, { eval: true });\n  return wrapWithTerminate(worker);\n}\n\nexport const allInsideOutsideAPIPromises: Promise<InsideOutsideAPI>[] = [];\n\nexport async function instantiateWorker(): Promise<InsideOutsideAPI> {\n  const insideOutsideAPIPromise = instantiateWorkerImplementation();\n  allInsideOutsideAPIPromises.push(insideOutsideAPIPromise);\n  insideAPI.setDebugMeasurePerf(searchOutsideDebugGlobals.logPerf);\n  insideAPI.setScramblePrefetchLevel(\n    searchOutsideDebugGlobals.scramblePrefetchLevel,\n  );\n  return insideOutsideAPIPromise;\n}\n\nexport async function mapToAllWorkers(\n  f: (worker: InsideOutsideAPI) => void,\n): Promise<void> {\n  await Promise.all(\n    allInsideOutsideAPIPromises.map((worker) => worker.then(f)),\n  );\n}\n\nasync function instantiateWorkerImplementation(): Promise<InsideOutsideAPI> {\n  if (searchOutsideDebugGlobals.forceStringWorker) {\n    console.warn(\n      \"Using the `forceStringWorker` workaround for search worker instantiation. This will require downloading significantly more code than necessary, but the functionality will be the same.\",\n    );\n    return instantiateClassicWorker();\n  }\n  try {\n    // `await` is important for `catch` to work.\n    return await instantiateModuleWorker();\n  } catch (e) {\n    const commonErrorPrefix =\n      \"Could not instantiate module worker (this may happen in Firefox, or when using Parcel).\";\n    if (searchOutsideDebugGlobals.disableStringWorker) {\n      console.error(\n        `${commonErrorPrefix} Fallback to string worker is disabled.`,\n        e,\n      );\n      throw new Error(\"Module worker instantiation failed.\");\n    }\n    console.warn(`${commonErrorPrefix} Falling back to string worker.`, e);\n    return instantiateClassicWorker();\n  }\n}\n", "import { Alg } from \"../alg\";\nimport type { KPuzzle } from \"../kpuzzle\";\n// import { preInitialize222 } from \"../implementations/2x2x2\";\nimport type { KState } from \"../kpuzzle/KState\";\nimport type { PrefetchLevel } from \"./inside/api\";\nimport { randomClockScrambleString } from \"./inside/solve/puzzles/clock\"; // TODO: don't reach into `inside` code.\nimport { randomMegaminxScrambleString } from \"./inside/solve/puzzles/wca-minx\"; // TODO: don't reach into `inside` code.\nimport type { TwsearchOptions } from \"./inside/solve/twsearch\";\nimport {\n  InsideOutsideAPI,\n  instantiateWorker,\n  mapToAllWorkers,\n} from \"./instantiator\";\n\nlet cachedWorkerInstance: Promise<InsideOutsideAPI> | null = null;\nasync function getCachedWorkerInstance(): Promise<InsideOutsideAPI> {\n  return await (cachedWorkerInstance ??= instantiateWorker());\n}\n\n// Pre-initialize the scrambler for the given event. (Otherwise, an event is\n// initialized the first time you ask for a scramble for that event.)\n//\n// Some typical numbers for a fast computer:\n// - 3x3x3 initialization: 200ms\n// - Each 3x3x3 scramble: 50ms\n// - 4x4x4 initialization: 2500ms\n// - Each 4x4x4 scramble: 300ms to 800ms\n//\n// It is safe to immediately call for a scramble\n// any time after starting pre-initialization, or to call for them without\n// pre-initializing. Pre-initializing essentially gives the scramble worker a\n// head start in case a scramble doesn't get requested immediately.\n//\n// Note that events cannot be pre-initialized in parallel. Attempting to\n// pre-initialize multiple events will initialize them consecutively. Scrambles\n// for a given event cannot be computed while another event is being initialized.\nexport function _preInitializationHintForEvent(\n  eventID: string,\n  // callback?: () => void\n): void {\n  switch (eventID) {\n    case \"clock\":\n    case \"minx\":\n      return;\n    case \"333oh\":\n      _preInitializationHintForEvent(\"333\");\n      return;\n  }\n  (async () => {\n    await (await getCachedWorkerInstance()).insideAPI.initialize(eventID);\n  })();\n}\n\nexport async function randomScrambleForEvent(eventID: string): Promise<Alg> {\n  switch (eventID) {\n    case \"clock\":\n      return Alg.fromString(await randomClockScrambleString());\n    case \"minx\":\n      return Alg.fromString(await randomMegaminxScrambleString());\n  }\n  const prom = _randomScrambleStringForEvent(eventID);\n  const wat = await prom;\n  return Alg.fromString(wat);\n}\n\nexport async function _randomScrambleStringForEvent(\n  eventID: string,\n): Promise<string> {\n  if (searchOutsideDebugGlobals.forceNewWorkerForEveryScramble) {\n  }\n  const worker = searchOutsideDebugGlobals.forceNewWorkerForEveryScramble\n    ? await instantiateWorker()\n    : await getCachedWorkerInstance();\n  return worker.insideAPI.randomScrambleStringForEvent(eventID);\n}\n\nexport async function randomScrambleStringForEvent(\n  eventID: string,\n): Promise<string> {\n  switch (eventID) {\n    case \"clock\":\n      return randomClockScrambleString();\n    case \"minx\":\n      return randomMegaminxScrambleString();\n  }\n  return await _randomScrambleStringForEvent(eventID);\n}\n\nexport async function experimentalSolve3x3x3IgnoringCenters(\n  state: KState,\n): Promise<Alg> {\n  const cwi = await getCachedWorkerInstance();\n  return Alg.fromString(await cwi.insideAPI.solve333ToString(state.stateData));\n}\n\nexport async function experimentalSolve2x2x2(state: KState): Promise<Alg> {\n  const cwi = await getCachedWorkerInstance();\n  return Alg.fromString(await cwi.insideAPI.solve222ToString(state.stateData));\n}\n\nexport async function solveSkewb(state: KState): Promise<Alg> {\n  const cwi = await getCachedWorkerInstance();\n  return Alg.fromString(\n    await cwi.insideAPI.solveSkewbToString(state.stateData),\n  );\n}\n\nexport async function solvePyraminx(state: KState): Promise<Alg> {\n  const cwi = await getCachedWorkerInstance();\n  return Alg.fromString(\n    await cwi.insideAPI.solvePyraminxToString(state.stateData),\n  );\n}\n\nexport async function solveMegaminx(state: KState): Promise<Alg> {\n  const cwi = await getCachedWorkerInstance();\n  return Alg.fromString(\n    await cwi.insideAPI.solveMegaminxToString(state.stateData),\n  );\n}\n\nexport async function solveTwsearch(\n  kpuzzle: KPuzzle,\n  state: KState,\n  options?: { moveSubset?: string[]; startState?: KState; minDepth?: number },\n): Promise<Alg> {\n  const { startState, ...otherOptions } = options ?? {};\n  const apiOptions: TwsearchOptions = otherOptions;\n  if (startState) {\n    apiOptions.startState =\n      startState.experimentalToTransformation()!.transformationData;\n  }\n  const { ...def } = kpuzzle.definition;\n  delete def.experimentalIsStateSolved;\n  // delete def.experimentalDerivedMoves;\n  const dedicatedWorker = await instantiateWorker();\n  try {\n    return Alg.fromString(\n      await dedicatedWorker.insideAPI.solveTwsearchToString(\n        def,\n        state.experimentalToTransformation()!.transformationData,\n        apiOptions,\n      ),\n    );\n  } finally {\n    console.log(\"Search ended, terminating dedicated `twsearch` worker.\");\n    // TODO: support re-using the same worker for multiple searches..\n    await dedicatedWorker.outsideAPI.terminate();\n  }\n}\n\ninterface SearchOutsideDebugGlobals {\n  logPerf: boolean;\n  scramblePrefetchLevel: `${PrefetchLevel}`;\n  forceStringWorker: boolean;\n  disableStringWorker: boolean;\n  forceNewWorkerForEveryScramble: boolean;\n}\nexport const searchOutsideDebugGlobals: SearchOutsideDebugGlobals = {\n  logPerf: false,\n  scramblePrefetchLevel: \"auto\",\n  forceStringWorker: false,\n  disableStringWorker: false,\n  forceNewWorkerForEveryScramble: false,\n};\n\nexport function setDebug(options: Partial<SearchOutsideDebugGlobals>): void {\n  const { logPerf, scramblePrefetchLevel } = options;\n  if (typeof logPerf !== \"undefined\") {\n    searchOutsideDebugGlobals.logPerf = logPerf;\n    mapToAllWorkers((worker) => worker.insideAPI.setDebugMeasurePerf(logPerf));\n  }\n  if (typeof scramblePrefetchLevel !== \"undefined\") {\n    searchOutsideDebugGlobals.scramblePrefetchLevel = scramblePrefetchLevel;\n    mapToAllWorkers((worker) =>\n      worker.insideAPI.setScramblePrefetchLevel(\n        scramblePrefetchLevel as PrefetchLevel,\n      ),\n    );\n  }\n  if (\"forceStringWorker\" in options) {\n    searchOutsideDebugGlobals.forceStringWorker = !!options.forceStringWorker;\n  }\n  if (\"disableStringWorker\" in options) {\n    searchOutsideDebugGlobals.disableStringWorker =\n      !!options.disableStringWorker;\n  }\n  if (\"forceNewWorkerForEveryScramble\" in options) {\n    searchOutsideDebugGlobals.forceNewWorkerForEveryScramble =\n      !!options.forceNewWorkerForEveryScramble;\n  }\n}\n"],
  "mappings": "+MAEA,IAAMA,EAAO,CAAC,KAAM,KAAM,KAAM,IAAI,EAC9BC,EAAY,CAAC,IAAK,IAAK,IAAK,IAAK,KAAK,EACtCC,EAAaF,EAAK,OAAOC,CAAS,EAEjC,SAASE,GAAoC,CAClD,IAAIC,EAAqB,EAEzB,SAASC,GAAe,CACtB,IAAMC,EAASC,EAAgB,EAAE,EAIjC,OAHID,IAAW,GACbF,IAEEE,GAAU,EACL,GAAGA,KAEH,GAAG,GAAKA,IAEnB,CAEA,IAAME,EAAQ,CAAC,EACf,SAASC,EAAKC,EAA0B,CACtC,QAAWC,KAAUD,EACnBF,EAAM,KAAK,GAAGG,IAASN,EAAa,GAAG,CAE3C,CAOA,GALAI,EAAKP,CAAU,EACfM,EAAM,KAAK,IAAI,EACfC,EAAKR,CAAS,EAGVG,EAAqB,EACvB,OAAOD,EAA0B,EAGnC,QAAWS,KAAOZ,EACZO,EAAgB,CAAC,IAAM,GACzBC,EAAM,KAAKI,CAAG,EAGlB,OAAOJ,EAAM,KAAK,GAAG,CACvB,CCzCA,IAAMK,EAAW,CAAC,KAAM,IAAI,EAErB,SAASC,GAAuC,CACrD,SAASC,GAAiB,CACxB,MAAO,IAAIF,EAASG,EAAgB,CAAC,OAAOH,EAASG,EAAgB,CAAC,IACxE,CAEA,SAASC,GAAkB,CACzB,MAAO,IAAI,CAAC,GAAI,GAAG,EAAED,EAAgB,CAAC,IACxC,CAEA,SAASE,GAAc,CACrB,IAAMC,EAAS,CAAC,EAChB,QAAS,EAAI,EAAG,EAAI,EAAG,IACrBA,EAAO,KAAKJ,EAAO,CAAC,EAEtB,OAAAI,EAAO,KAAKF,EAAQ,CAAC,EACdE,EAAO,KAAK,GAAG,CACxB,CAEA,IAAMA,EAAS,CAAC,EAChB,QAASC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAO,KAAKD,EAAI,CAAC,EAEnB,OAAOC,EAAO,KAAK;AAAA,CAAI,CACzB,CCtBA,IAAME,EAAyB,yBACzBC,EAA2B,IAAMD,EAAuB,QAAQ,KAAM,EAAE,EAExEE,EACJ,OAAO,WAAW,OAAW,KAC7B,OAAQ,WAAmB,gBAAoB,IAEjD,eAAeC,EACbC,EACAC,EACiB,CACjB,GAAM,CAAE,OAAQC,CAAW,EAAI,MAAM,OAChBL,EAAyB,GAExCM,EAAS,IAAID,EAAWF,EAAQC,CAAO,EAC7C,OAAAE,EAAO,MAAM,EACNC,EAAaD,CAAM,CAC5B,CAEA,eAAsBE,EACpBL,EACAC,EACiB,CACjB,IAAIE,EACJ,GAAIL,EACF,OAAOC,EAAWC,EAAQ,CAAE,KAAMC,GAAS,IAAK,CAAC,EAEjD,GAAIA,GAAS,KAAM,CACjB,IAAMK,EAAO,IAAI,KAAK,CAACN,CAAgB,EAAG,CACxC,KAAM,wBACR,CAAC,EACDA,EAAS,IAAI,gBAAgBM,CAAI,CACnC,CACA,OAAAH,EAAS,IAAI,WAAW,OAAOH,EAAQ,CACrC,KAAMC,EAAUA,EAAQ,KAAO,MACjC,CAAC,EAEIE,CACT,CCzCAI,EAAU,OAAS,GACnB,eAAsBC,GAAwB,CAC5C,OAAQ,KAAM,QAAO,yCAA6B,qBACpD,CCGA,IAAMC,EAAqC,IAU3C,eAAsBC,GAAqD,CAEzE,OAAO,IAAI,QAA0B,MAAOC,EAASC,IAAW,CAC9D,IAAMC,EAAY,WAAW,IAAM,CACjCD,EAAO,IAAI,MAAM,8BAA8B,CAAC,CAClD,EAAGH,CAAkC,EAErC,GAAI,CACF,IAAMK,EAAqB,MAAMC,EAAsB,EAClDD,GACHF,EAAO,IAAI,MAAM,sCAAsC,CAAC,EAE1D,IAAII,EACJ,GAAI,WAAW,OAAQ,CAErB,IAAMC,EAAY,WAAWH,MACvBI,EAAO,IAAI,KAAK,CAACD,CAAS,EAAG,CACjC,KAAM,iBACR,CAAC,EACDD,EAAM,IAAI,gBAAgBE,CAAI,CAChC,MAMEF,EAAM,IAAI,IAAIF,CAAkB,EAGlC,IAAMK,EAAU,MAAMC,EAAgBJ,EAAK,CACzC,KAAM,QACR,CAAC,EAIKK,EAAWC,GAAkB,CAE7BA,EAAE,SAAS,WAAW,aAAa,GACrCV,EAAOU,CAAC,CAEZ,EAEMC,EAAkBC,GAAwB,CAC1CA,IAAgB,mBAElB,aAAaX,CAAS,EACtBF,EAAQc,EAAkBN,CAAM,CAAC,GAEjCP,EACE,IAAI,MAAM,sCAAsCY,GAAa,CAC/D,CAEJ,EAEIL,EAAO,WAETA,EAAO,WAAW,KAAK,UAAWI,CAAc,GAEhDJ,EAAO,iBAAiB,QAASE,EAAS,CACxC,KAAM,EACR,CAAC,EACDF,EAAO,iBAAiB,UAAYG,GAAMC,EAAeD,EAAE,IAAI,EAAG,CAChE,KAAM,EACR,CAAC,EAEL,OAASA,EAAP,CACAV,EAAOU,CAAC,CACV,CACF,CAAC,CACH,CAEA,SAASG,EAAkBN,EAAkC,CAC3D,IAAMO,EAAYC,EAAsBR,CAAM,EACxCS,EAAYT,EAAO,UAAU,KAAKA,CAAM,EAC9C,MAAO,CAAE,UAAAO,EAAW,WAAY,CAAE,UAAAE,CAAU,CAAE,CAChD,CAEA,eAAeC,GAAsD,CACnE,GAAM,CAAE,aAAAC,CAAa,EAAI,KAAM,QAC7B,uDAEIX,EAAS,MAAMC,EAAgBU,EAAc,CAAE,KAAM,EAAK,CAAC,EACjE,OAAOL,EAAkBN,CAAM,CACjC,CAEO,IAAMY,EAA2D,CAAC,EAEzE,eAAsBC,GAA+C,CACnE,IAAMC,EAA0BC,EAAgC,EAChE,OAAAH,EAA4B,KAAKE,CAAuB,EACxDP,EAAU,oBAAoBS,EAA0B,OAAO,EAC/DT,EAAU,yBACRS,EAA0B,qBAC5B,EACOF,CACT,CAEA,eAAsBG,EACpBC,EACe,CACf,MAAM,QAAQ,IACZN,EAA4B,IAAKZ,GAAWA,EAAO,KAAKkB,CAAC,CAAC,CAC5D,CACF,CAEA,eAAeH,GAA6D,CAC1E,GAAIC,EAA0B,kBAC5B,eAAQ,KACN,yLACF,EACON,EAAyB,EAElC,GAAI,CAEF,OAAO,MAAMnB,EAAwB,CACvC,OAAS,EAAP,CACA,IAAM4B,EACJ,0FACF,GAAIH,EAA0B,oBAC5B,cAAQ,MACN,GAAGG,2CACH,CACF,EACM,IAAI,MAAM,qCAAqC,EAEvD,eAAQ,KAAK,GAAGA,mCAAoD,CAAC,EAC9DT,EAAyB,CAClC,CACF,CCpIA,IAAIU,EAAyD,KAC7D,eAAeC,GAAqD,CAClE,OAAO,MAAOD,MAAyBE,EAAkB,GAC3D,CAoCA,eAAsBC,GAAuBC,EAA+B,CAC1E,OAAQA,EAAS,CACf,IAAK,QACH,OAAOC,EAAI,WAAW,MAAMC,EAA0B,CAAC,EACzD,IAAK,OACH,OAAOD,EAAI,WAAW,MAAME,EAA6B,CAAC,CAC9D,CAEA,IAAMC,EAAM,MADCC,EAA8BL,CAAO,EAElD,OAAOC,EAAI,WAAWG,CAAG,CAC3B,CAEA,eAAsBC,EACpBL,EACiB,CACjB,OAAIM,EAA0B,gCAEfA,EAA0B,+BACrC,MAAMC,EAAkB,EACxB,MAAMC,EAAwB,GACpB,UAAU,6BAA6BR,CAAO,CAC9D,CAcA,eAAsBS,GACpBC,EACc,CACd,IAAMC,EAAM,MAAMC,EAAwB,EAC1C,OAAOC,EAAI,WAAW,MAAMF,EAAI,UAAU,iBAAiBD,EAAM,SAAS,CAAC,CAC7E,CAEA,eAAsBI,GAAuBJ,EAA6B,CACxE,IAAMC,EAAM,MAAMC,EAAwB,EAC1C,OAAOC,EAAI,WAAW,MAAMF,EAAI,UAAU,iBAAiBD,EAAM,SAAS,CAAC,CAC7E,CAEA,eAAsBK,GAAWL,EAA6B,CAC5D,IAAMC,EAAM,MAAMC,EAAwB,EAC1C,OAAOC,EAAI,WACT,MAAMF,EAAI,UAAU,mBAAmBD,EAAM,SAAS,CACxD,CACF,CAEA,eAAsBM,GAAcN,EAA6B,CAC/D,IAAMC,EAAM,MAAMC,EAAwB,EAC1C,OAAOC,EAAI,WACT,MAAMF,EAAI,UAAU,sBAAsBD,EAAM,SAAS,CAC3D,CACF,CAEA,eAAsBO,GAAcP,EAA6B,CAC/D,IAAMC,EAAM,MAAMC,EAAwB,EAC1C,OAAOC,EAAI,WACT,MAAMF,EAAI,UAAU,sBAAsBD,EAAM,SAAS,CAC3D,CACF,CAEA,eAAsBQ,GACpBC,EACAT,EACAU,EACc,CACd,GAAM,CAAE,WAAAC,KAAeC,CAAa,EAAIF,GAAW,CAAC,EAC9CG,EAA8BD,EAChCD,IACFE,EAAW,WACTF,EAAW,6BAA6B,EAAG,oBAE/C,GAAM,IAAKG,CAAI,EAAIL,EAAQ,WAC3B,OAAOK,EAAI,0BAEX,IAAMC,EAAkB,MAAMC,EAAkB,EAChD,GAAI,CACF,OAAOb,EAAI,WACT,MAAMY,EAAgB,UAAU,sBAC9BD,EACAd,EAAM,6BAA6B,EAAG,mBACtCa,CACF,CACF,CACF,QAAE,CACA,QAAQ,IAAI,wDAAwD,EAEpE,MAAME,EAAgB,WAAW,UAAU,CAC7C,CACF,CASO,IAAME,EAAuD,CAClE,QAAS,GACT,sBAAuB,OACvB,kBAAmB,GACnB,oBAAqB,GACrB,+BAAgC,EAClC,EAEO,SAASC,GAASR,EAAmD,CAC1E,GAAM,CAAE,QAAAS,EAAS,sBAAAC,CAAsB,EAAIV,EACvC,OAAOS,EAAY,MACrBF,EAA0B,QAAUE,EACpCE,EAAiBC,GAAWA,EAAO,UAAU,oBAAoBH,CAAO,CAAC,GAEvE,OAAOC,EAA0B,MACnCH,EAA0B,sBAAwBG,EAClDC,EAAiBC,GACfA,EAAO,UAAU,yBACfF,CACF,CACF,GAEE,sBAAuBV,IACzBO,EAA0B,kBAAoB,CAAC,CAACP,EAAQ,mBAEtD,wBAAyBA,IAC3BO,EAA0B,oBACxB,CAAC,CAACP,EAAQ,qBAEV,mCAAoCA,IACtCO,EAA0B,+BACxB,CAAC,CAACP,EAAQ,+BAEhB",
  "names": ["pins", "backMoves", "frontMoves", "randomClockScrambleString", "filteringMoveCount", "randomSuffix", "amount", "randomUIntBelow", "moves", "side", "families", "family", "pin", "suffixes", "randomMegaminxScrambleString", "rdPair", "randomUIntBelow", "randomU", "row", "chunks", "i", "worker_threads_mangled", "worker_threads_unmangled", "useNodeWorkarounds", "nodeWorker", "source", "options", "NodeWorker", "worker", "node_adapter_default", "constructWorker", "blob", "exposeAPI", "getWorkerEntryFileURL", "MODULE_WORKER_TIMEOUT_MILLISECONDS", "instantiateModuleWorker", "resolve", "reject", "timeoutID", "workerEntryFileURL", "getWorkerEntryFileURL", "url", "importSrc", "blob", "worker", "constructWorker", "onError", "e", "onFirstMessage", "messageData", "wrapWithTerminate", "insideAPI", "wrap", "terminate", "instantiateClassicWorker", "workerSource", "allInsideOutsideAPIPromises", "instantiateWorker", "insideOutsideAPIPromise", "instantiateWorkerImplementation", "searchOutsideDebugGlobals", "mapToAllWorkers", "f", "commonErrorPrefix", "cachedWorkerInstance", "getCachedWorkerInstance", "instantiateWorker", "randomScrambleForEvent", "eventID", "Alg", "randomClockScrambleString", "randomMegaminxScrambleString", "wat", "_randomScrambleStringForEvent", "searchOutsideDebugGlobals", "instantiateWorker", "getCachedWorkerInstance", "experimentalSolve3x3x3IgnoringCenters", "state", "cwi", "getCachedWorkerInstance", "Alg", "experimentalSolve2x2x2", "solveSkewb", "solvePyraminx", "solveMegaminx", "solveTwsearch", "kpuzzle", "options", "startState", "otherOptions", "apiOptions", "def", "dedicatedWorker", "instantiateWorker", "searchOutsideDebugGlobals", "setDebug", "logPerf", "scramblePrefetchLevel", "mapToAllWorkers", "worker"]
}
