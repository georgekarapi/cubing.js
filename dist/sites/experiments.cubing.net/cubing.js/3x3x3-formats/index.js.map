{
  "version": 3,
  "sources": ["../../../../../src/sites/experiments.cubing.net/cubing.js/3x3x3-formats/index.ts"],
  "sourcesContent": ["import { Alg } from \"../../../../cubing/alg\";\nimport type { KStateData } from \"../../../../cubing/kpuzzle\";\nimport { KState } from \"../../../../cubing/kpuzzle/KState\";\nimport {\n  binaryComponentsToReid3x3x3,\n  reid3x3x3ToBinaryComponents,\n  reid3x3x3ToTwizzleBinary,\n  twizzleBinaryToReid3x3x3,\n} from \"../../../../cubing/protocol/binary/binary3x3x3\";\nimport { cube3x3x3 } from \"../../../../cubing/puzzles\";\nimport { experimental3x3x3KPuzzle } from \"../../../../cubing/puzzles/cubing-private\";\nimport { ExperimentalKPuzzleSVGWrapper } from \"../../../../cubing/twisty\";\nimport {\n  kpuzzleToReidString,\n  kpuzzleToStickers,\n  stateToString as kstateToString,\n  reidStringToKState,\n  stickersToKPuzzle,\n} from \"./convert\";\n\nexport function bufferToSpacedHex(buffer: ArrayBuffer): string {\n  // buffer is an ArrayBuffer\n  return (\n    Array.prototype.map.call(new Uint8Array(buffer), (x: number) =>\n      `00${x.toString(16)}`.slice(-2),\n    ) as string[]\n  ).join(\" \");\n}\n\nexport function spacedHexToBuffer(hex: string): Uint8Array {\n  return new Uint8Array(hex.split(\" \").map((c) => parseInt(c, 16)));\n}\n\nclass App {\n  state = experimental3x3x3KPuzzle.startState();\n  svg = (async () => {\n    return new ExperimentalKPuzzleSVGWrapper(\n      experimental3x3x3KPuzzle,\n      await cube3x3x3.svg(),\n    );\n  })();\n  algTextarea = document.querySelector(\"#alg\") as HTMLTextAreaElement;\n  kstateTextarea = document.querySelector(\"#kstate\") as HTMLTextAreaElement;\n  reidStringTextarea = document.querySelector(\n    \"#reid-string\",\n  ) as HTMLTextAreaElement;\n\n  orderElem = document.querySelector(\"#order\")!;\n  isSolvedWithCenterOriElem = document.querySelector(\n    \"#is-solved-with-center-ori\",\n  )!;\n  isSolvedIgnoringCenterOriElem = document.querySelector(\n    \"#is-solved-ignoring-center-ori\",\n  )!;\n\n  stickersTextarea = document.querySelector(\"#stickers\") as HTMLTextAreaElement;\n\n  componentsTextarea = document.querySelector(\n    \"#components\",\n  ) as HTMLTextAreaElement;\n\n  binaryTextarea = document.querySelector(\"#binary\") as HTMLTextAreaElement;\n  constructor() {\n    const svgWrapper = document\n      .querySelector(\"#viewer\")!\n      .appendChild(document.createElement(\"div\"));\n    (async () => {\n      svgWrapper.appendChild((await this.svg).wrapperElement);\n    })();\n\n    document.querySelector(\"#reset\")!.addEventListener(\"click\", () => {\n      this.reset();\n    });\n    document.querySelector(\"#apply-alg\")!.addEventListener(\"click\", () => {\n      this.applyAlg(this.algTextarea.value);\n    });\n    document\n      .querySelector(\"#set-reid-string\")\n      ?.addEventListener(\"click\", () => {\n        this.setReidString(this.reidStringTextarea.value);\n      });\n    document.querySelector(\"#set-stickers\")!.addEventListener(\"click\", () => {\n      this.setStickers(this.stickersTextarea.value);\n    });\n    document.querySelector(\"#set-components\")!.addEventListener(\"click\", () => {\n      this.setComponents(this.componentsTextarea.value);\n    });\n    document.querySelector(\"#set-kpuzzle\")!.addEventListener(\"click\", () => {\n      this.setKStateData(JSON.parse(this.kstateTextarea.value));\n    });\n    document.querySelector(\"#set-binary\")!.addEventListener(\"click\", () => {\n      this.setBinary(this.binaryTextarea.value);\n    });\n\n    // const scene = new Twisty3DScene();\n    // const cube3D = new Cube3D();\n    // scene.add(cube3D);\n    // const canvas = new Twisty3DCanvas(scene);\n    // document.body.appendChild(canvas);\n    this.reset();\n  }\n\n  reset(): void {\n    this.setState(experimental3x3x3KPuzzle.startState());\n  }\n\n  applyAlg(s: string): void {\n    this.state = this.state.applyAlg(Alg.fromString(s));\n    this.setState(this.state);\n  }\n\n  setKStateData(kstateData: KStateData): void {\n    this.setState(new KState(experimental3x3x3KPuzzle, kstateData));\n  }\n\n  setReidString(s: string): void {\n    this.setState(reidStringToKState(s));\n  }\n\n  setStickers(s: string): void {\n    this.setState(stickersToKPuzzle(JSON.parse(s)));\n  }\n\n  setComponents(s: string): void {\n    this.setState(binaryComponentsToReid3x3x3(JSON.parse(s)));\n  }\n\n  setBinary(s: string): void {\n    this.setState(twizzleBinaryToReid3x3x3(spacedHexToBuffer(s)));\n  }\n\n  setState(state: KState): void {\n    this.state = state;\n    (async () => {\n      (await this.svg).draw(state);\n    })();\n    this.kstateTextarea.value = kstateToString(state);\n    this.reidStringTextarea.value = kpuzzleToReidString(state);\n    this.stickersTextarea.value = JSON.stringify(kpuzzleToStickers(state));\n    this.componentsTextarea.value = JSON.stringify(\n      reid3x3x3ToBinaryComponents(state),\n      null,\n      \"  \",\n    );\n    this.binaryTextarea.value = bufferToSpacedHex(\n      reid3x3x3ToTwizzleBinary(state),\n    );\n    this.orderElem.textContent = state\n      .experimentalToTransformation()!\n      .repetitionOrder()\n      .toString();\n    this.isSolvedIgnoringCenterOriElem.textContent = state\n      .experimentalIsSolved({\n        ignoreCenterOrientation: true,\n        ignorePuzzleOrientation: true,\n      })\n      .toString();\n    this.isSolvedWithCenterOriElem.textContent = state\n      .experimentalIsSolved({\n        ignoreCenterOrientation: false,\n        ignorePuzzleOrientation: true,\n      })\n      .toString();\n  }\n}\nconst app = new App();\n(window as any).app = app;\n"],
  "mappings": "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",
  "names": ["bufferToSpacedHex", "buffer", "x", "spacedHexToBuffer", "hex", "c", "App", "experimental3x3x3KPuzzle", "KPuzzleSVGWrapper", "cube3x3x3", "svgWrapper", "s", "Alg", "kstateData", "KState", "reidStringToKState", "stickersToKPuzzle", "binaryComponentsToReid3x3x3", "twizzleBinaryToReid3x3x3", "state", "stateToString", "kpuzzleToReidString", "kpuzzleToStickers", "reid3x3x3ToBinaryComponents", "reid3x3x3ToTwizzleBinary", "app"]
}
