{
  "version": 3,
  "sources": ["../../../../../src/sites/experiments.cubing.net/cubing.js/3x3x3-formats/tests.ts"],
  "sourcesContent": ["import type { KStateData } from \"../../../../cubing/kpuzzle\";\nimport { experimentalReid3x3x3ToTwizzleBinary } from \"../../../../cubing/protocol\";\nimport {\n  Binary3x3x3Components,\n  reid3x3x3ToBinaryComponents,\n} from \"../../../../cubing/protocol/binary/binary3x3x3\";\nimport { experimental3x3x3KPuzzle } from \"../../../../cubing/puzzles/cubing-private\";\nimport { kpuzzleToReidString, kpuzzleToStickers } from \"./convert\";\n\nconst tests: {\n  name: string;\n  alg: string;\n  kpuzzle: KStateData;\n  binaryComponents: Binary3x3x3Components;\n  binaryBytes: number[];\n  reidString: string;\n  stickers: number[];\n}[] = [];\n\nfunction addTest(name: string, alg: string): void {\n  const state = experimental3x3x3KPuzzle.algToTransformation(alg).toKState();\n  tests.push({\n    name: name,\n    alg: alg,\n    kpuzzle: state.stateData,\n    binaryComponents: reid3x3x3ToBinaryComponents(state),\n    binaryBytes: Array.from(\n      new Uint8Array(experimentalReid3x3x3ToTwizzleBinary(state)),\n    ),\n    reidString: kpuzzleToReidString(state),\n    stickers: kpuzzleToStickers(state),\n  });\n}\n\naddTest(\"Solved\", \"\");\nfor (const face of \"ULFRBDxyz\".split(\"\")) {\n  for (const suffix of [\"\", \"'\", \"2\"]) {\n    const move = face + suffix;\n    addTest(`${move} Move`, move);\n  }\n}\naddTest(\"K Trigger\", \"R U R'\");\naddTest(\"Sune\", \"R U R' U R U2 R'\");\naddTest(\"Pons Asinorum\", \"M2 E2 S2\");\naddTest(\"Pure epLex (4 3-cycles)\", \"(R2 U' R' U' R2 U R U R U2' R z)4\");\naddTest(\"Pure eoMask (superflip)\", \"((M' U')4 [U2, M' E2 M] x y)3\");\naddTest(\"Pure coMask (4cw, 4 ccw\", \"(L U L' U L U2 L' R' U' R U' R' U2' R z)4\");\naddTest(\"Pure cpLex (4 2-swaps)\", \"([[R: B'], F] [[R: B], F] z2)2\");\naddTest(\"Pure moMask (cw center + ccw center)\", \"[U, [M': E]]\");\naddTest(\"Pure moMask (rotate U center 180 degrees)\", \"(R' U' R U')5\");\naddTest(\"Center swaps\", \"[M', E]\");\naddTest(\n  \"3.47 world record scramble\",\n  \"F U2 L2 B2 F' U L2 U R2 D2 L' B L2 B' R2 U2\",\n);\naddTest(\n  \"random scramble\",\n  \"B2 R2 B2 L2 U2 L2 U2 F2 U2 F' D2 R' U B2 D' R' B L R' D L\",\n);\n\nconst testString = JSON.stringify(\n  tests,\n  (_: string, v: any) => {\n    if (v instanceof Array && typeof v[0] === \"number\") {\n      return `##[${v.join(\", \")}]##`;\n    } else {\n      return v as string;\n    }\n  },\n  \"  \",\n)\n  .replace(/\"##\\[/g, \"[\")\n  .replace(/\\]##\"/g, \"]\");\n\n(document.querySelector(\"#test-string\") as HTMLTextAreaElement).value =\n  testString;\n"],
  "mappings": "wPASA,IAAMA,EAQA,CAAC,EAEP,SAASC,EAAQC,EAAcC,EAAmB,CAChD,IAAMC,EAAQC,EAAyB,oBAAoBF,CAAG,EAAE,SAAS,EACzEH,EAAM,KAAK,CACT,KAAME,EACN,IAAKC,EACL,QAASC,EAAM,UACf,iBAAkBE,EAA4BF,CAAK,EACnD,YAAa,MAAM,KACjB,IAAI,WAAWG,EAAqCH,CAAK,CAAC,CAC5D,EACA,WAAYI,EAAoBJ,CAAK,EACrC,SAAUK,EAAkBL,CAAK,CACnC,CAAC,CACH,CAEAH,EAAQ,SAAU,EAAE,EACpB,QAAWS,IAAQ,YAAY,MAAM,EAAE,EACrC,QAAWC,IAAU,CAAC,GAAI,IAAK,GAAG,EAAG,CACnC,IAAMC,EAAOF,EAAOC,EACpBV,EAAQ,GAAGW,SAAaA,CAAI,CAC9B,CAEFX,EAAQ,YAAa,QAAQ,EAC7BA,EAAQ,OAAQ,kBAAkB,EAClCA,EAAQ,gBAAiB,UAAU,EACnCA,EAAQ,0BAA2B,mCAAmC,EACtEA,EAAQ,0BAA2B,+BAA+B,EAClEA,EAAQ,0BAA2B,2CAA2C,EAC9EA,EAAQ,yBAA0B,gCAAgC,EAClEA,EAAQ,uCAAwC,cAAc,EAC9DA,EAAQ,4CAA6C,eAAe,EACpEA,EAAQ,eAAgB,SAAS,EACjCA,EACE,6BACA,6CACF,EACAA,EACE,kBACA,2DACF,EAEA,IAAMY,EAAa,KAAK,UACtBb,EACA,CAACc,EAAWC,IACNA,aAAa,OAAS,OAAOA,EAAE,IAAO,SACjC,MAAMA,EAAE,KAAK,IAAI,OAEjBA,EAGX,IACF,EACG,QAAQ,SAAU,GAAG,EACrB,QAAQ,SAAU,GAAG,EAEvB,SAAS,cAAc,cAAc,EAA0B,MAC9DF",
  "names": ["tests", "addTest", "name", "alg", "state", "experimental3x3x3KPuzzle", "reid3x3x3ToBinaryComponents", "reid3x3x3ToTwizzleBinary", "kpuzzleToReidString", "kpuzzleToStickers", "face", "suffix", "move", "testString", "_", "v"]
}
