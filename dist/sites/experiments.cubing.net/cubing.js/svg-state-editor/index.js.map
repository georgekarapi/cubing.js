{
  "version": 3,
  "sources": ["../../../../../src/sites/experiments.cubing.net/cubing.js/svg-state-editor/index.ts"],
  "sourcesContent": ["import { puzzles, PuzzleLoader } from \"../../../../cubing/puzzles\";\n\ninterface Piece {\n  [orientation: number]: Facelet;\n}\n\ntype Mode = \"swap\" | \"twist\";\n\nclass App {\n  mode: Mode = \"swap\";\n  cube: Cube;\n\n  constructor() {\n    const puzzleSelect = document.querySelector(\n      \"#puzzles\",\n    ) as HTMLSelectElement;\n\n    for (const puzzle in puzzles) {\n      const option: HTMLOptionElement = puzzleSelect.appendChild(\n        document.createElement(\"option\"),\n      )!;\n      option.value = puzzle;\n      option.textContent = puzzles[puzzle].fullName;\n    }\n\n    const puzzle = new URL(location.href).searchParams.get(\"puzzle\") || \"3x3x3\";\n    if (puzzle) {\n      if (puzzle in puzzles) {\n        this.cube = new Cube(puzzles[puzzle]);\n        puzzleSelect.value = puzzle;\n      } else {\n        console.error(\"Invalid puzzle:\", puzzle);\n      }\n    }\n\n    puzzleSelect?.addEventListener(\"change\", () => {\n      this.cube.setPuzzle(puzzles[puzzleSelect.value]);\n\n      const url = new URL(location.href);\n      url.searchParams.set(\"puzzle\", puzzleSelect.value);\n      window.history.replaceState(\"\", \"\", url.toString());\n    });\n\n    document\n      .querySelectorAll('input[name=\"mode\"]')\n      .forEach((radio: HTMLInputElement) => {\n        radio.addEventListener(\"change\", () => {\n          this.mode = radio.value as Mode;\n        });\n      });\n  }\n}\n\nclass Cube {\n  selectedFacelet: Facelet | null;\n  pieces = new Map<string, { [position: number]: Piece }>();\n\n  puzzle: PuzzleLoader;\n\n  constructor(puzzle: PuzzleLoader) {\n    this.setPuzzle(puzzle);\n  }\n\n  setPuzzle(puzzle: PuzzleLoader) {\n    this.puzzle = puzzle;\n\n    puzzle.svg().then((svg) => {\n      document.querySelector(\"#puzzle\")!.innerHTML = svg;\n      document.querySelector(\"svg\")!.removeAttribute(\"width\");\n      document.querySelector(\"svg\")!.removeAttribute(\"height\");\n\n      this.displayCube();\n    });\n    this.selectedFacelet = null;\n  }\n\n  displayCube = async () => {\n    const { orbits } = (await this.puzzle.kpuzzle()).definition;\n\n    for (const orbitName in orbits) {\n      const orbitVal = orbits[orbitName];\n\n      for (\n        let orientation = 0;\n        orientation < orbitVal.numOrientations;\n        orientation++\n      ) {\n        for (let piece = 0; piece < orbitVal.numPieces; piece++) {\n          const facelet = new Facelet(orbitName, piece, orientation);\n          if (!this.pieces.get(orbitName)) {\n            this.pieces.set(orbitName, {});\n          }\n          this.pieces.get(orbitName)![piece] = {\n            ...this.pieces.get(orbitName)![piece],\n            [orientation]: facelet,\n          };\n        }\n      }\n    }\n  };\n\n  getFaceletByOrientation(piece: Piece, orientation: number) {\n    return piece[orientation];\n  }\n\n  getPieceByFacelet({ position, type }: Facelet) {\n    return this.pieces.get(type)![position];\n  }\n\n  swapFacelets(facelet1: Facelet, facelet2: Facelet) {\n    const temp = facelet1.element.style.fill;\n    facelet1.element.style.fill = facelet2.element.style.fill;\n    facelet2.element.style.fill = temp;\n  }\n\n  async twist(facelet: Facelet) {\n    const piece = this.getPieceByFacelet(facelet);\n\n    const { orbits } = (await this.puzzle.kpuzzle()).definition;\n\n    const { numOrientations } = orbits[facelet.type];\n\n    for (let i = 0; i < numOrientations - 1; i++) {\n      const facelet = this.getFaceletByOrientation(piece, i);\n      const facelet2Orientation =\n        (numOrientations + facelet.orientation + 1) % numOrientations;\n      this.swapFacelets(\n        facelet,\n        this.getFaceletByOrientation(piece, facelet2Orientation),\n      );\n    }\n  }\n\n  async swap(facelet1: Facelet, facelet2: Facelet) {\n    const piece1 = this.getPieceByFacelet(facelet1);\n    const piece2 = this.getPieceByFacelet(facelet2);\n\n    if (piece1 === piece2) {\n      return;\n    }\n\n    const offset = facelet2.orientation - facelet1.orientation;\n\n    const { orbits } = (await this.puzzle.kpuzzle()).definition;\n\n    const { numOrientations } = orbits[facelet1.type];\n\n    for (let i = 0; i < numOrientations; i++) {\n      const facelet = this.getFaceletByOrientation(piece1, i);\n\n      const facelet2Orientation =\n        (numOrientations + facelet.orientation + offset) % numOrientations;\n      this.swapFacelets(\n        facelet,\n        this.getFaceletByOrientation(piece2, facelet2Orientation),\n      );\n    }\n  }\n}\n\nclass Facelet {\n  type: string;\n  position: number;\n  orientation: number;\n  element: HTMLOrSVGImageElement;\n\n  constructor(type: string, position: number, orientation: number) {\n    this.type = type;\n    this.orientation = orientation;\n    this.position = position;\n    this.element = document.getElementById(\n      this.getId(),\n    )! as HTMLOrSVGImageElement;\n    this.element.onclick = () => this.click();\n  }\n\n  getId() {\n    return `${this.type}-l${this.position}-o${this.orientation}`;\n  }\n\n  deselect() {\n    app.cube.selectedFacelet = null;\n    this.element.style.opacity = \"1\";\n  }\n\n  select() {\n    if (app.cube.selectedFacelet) {\n      app.cube.selectedFacelet.deselect();\n    }\n\n    app.cube.selectedFacelet = this;\n    this.element.style.opacity = \"0.7\";\n  }\n\n  click() {\n    switch (app.mode) {\n      case \"swap\": {\n        if (\n          app.cube.selectedFacelet &&\n          app.cube.selectedFacelet.type === this.type\n        ) {\n          app.cube.swap(app.cube.selectedFacelet, this);\n\n          app.cube.selectedFacelet.deselect();\n        } else {\n          this.select();\n        }\n        break;\n      }\n      case \"twist\": {\n        app.cube.twist(this);\n        break;\n      }\n      default:\n        console.error(\"unexpected mode\", app.mode);\n        break;\n    }\n  }\n}\n\nconst app = new App();\n(window as any).app = app;\n"],
  "mappings": "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",
  "names": ["App", "puzzleSelect", "puzzle", "puzzles", "option", "Cube", "url", "radio", "orbits", "orbitName", "orbitVal", "orientation", "piece", "facelet", "Facelet", "svg", "position", "type", "facelet1", "facelet2", "temp", "numOrientations", "i", "facelet2Orientation", "piece1", "piece2", "offset", "app"]
}
