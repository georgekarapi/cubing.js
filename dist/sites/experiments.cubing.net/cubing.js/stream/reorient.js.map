{
  "version": 3,
  "sources": ["../../../../../src/cubing/stream/process/ReorientedStream.ts", "../../../../../src/cubing/twisty/views/stream/TwistyStreamSource.css.ts", "../../../../../src/cubing/twisty/views/stream/TwistyStreamSource.ts", "../../../../../src/sites/experiments.cubing.net/cubing.js/stream/reorient.ts"],
  "sourcesContent": ["import { experimentalIs, Move } from \"../../alg\";\nimport { experimental3x3x3KPuzzle } from \"../../puzzles/cubing-private\";\n\nexport interface PuzzleStreamMoveEventDetail {\n  move: Move;\n}\n\n// TODO: CustomEvent<PuzzleStreamMoveEventDetail>\nexport interface PuzzleStreamMoveEvent {\n  type: \"move\";\n  detail: PuzzleStreamMoveEventDetail;\n}\n\nexport type PuzzleStreamMoveEventRegisterCompatible =\n  CustomEvent<PuzzleStreamMoveEventDetail>;\n\nfunction ensurePuzzleStreamMoveEvent(\n  event: CustomEvent,\n): PuzzleStreamMoveEvent {\n  // console.log(event);\n  if (event?.type !== \"move\") {\n    throw new Error(\"Received non-move.\");\n  }\n  if (!experimentalIs(event?.detail?.move, Move)) {\n    throw new Error(\"Event detail move was not a `Move`.\");\n  }\n  return event as PuzzleStreamMoveEvent; // TODO\n}\n\nconst faces = \"ULFRBD\";\n// TODO: better typ\nconst rotationMap: Record<string, [Move, string]> = {\n  U: [new Move(\"y\"), \"D\"],\n  L: [new Move(\"x'\"), \"R\"],\n  F: [new Move(\"z\"), \"B\"],\n  R: [new Move(\"x\"), \"L\"],\n  B: [new Move(\"z\"), \"F\"],\n  D: [new Move(\"y'\"), \"U\"],\n};\n\nclass OrientationTracker {\n  state = experimental3x3x3KPuzzle.startState();\n\n  processMove(move: Move): Move[] {\n    // TODO: validation\n    if (\"xyz\".includes(move.family)) {\n      this.state = this.state.applyMove(move);\n      return [move];\n    } else if (move.family.slice(-1) === \"w\") {\n      const [rotation, family] = rotationMap[move.family.slice(-1)];\n      return this.processMove(rotation).concat(\n        this.processMove(move.modified({ family })),\n      );\n    } else if (move.family === move.family.toLowerCase()) {\n      const [rotation, family] = rotationMap[move.family.toUpperCase()];\n      return this.processMove(rotation).concat(\n        this.processMove(move.modified({ family })),\n      );\n    } else {\n      const faceIdx = faces.indexOf(move.family);\n      const family =\n        faces[this.state.stateData[\"CENTERS\"].pieces.indexOf(faceIdx)];\n      return [move.modified({ family })];\n    }\n  }\n}\n\nexport class ReorientedStream extends EventTarget {\n  orientationTracker = new OrientationTracker();\n\n  constructor(target: EventTarget) {\n    super();\n    target.addEventListener(\"move\", (e: CustomEvent) =>\n      this.onMove(ensurePuzzleStreamMoveEvent(e)),\n    );\n  }\n\n  dispatchMove(detail: PuzzleStreamMoveEventDetail): void {\n    this.dispatchEvent(\n      new CustomEvent(\"move\", {\n        detail,\n      }),\n    );\n  }\n\n  onMove(event: PuzzleStreamMoveEvent): void {\n    const moves = this.orientationTracker.processMove(event.detail.move);\n    for (const move of moves) {\n      this.dispatchMove({ move });\n    }\n  }\n}\n", "import { CSSSource } from \"../ManagedCustomElement\";\n\nexport const twistyStreamSourceCSS = new CSSSource(\n  `\n:host {\n  width: 384px;\n  height: 256px;\n  display: grid;\n\n  font-family: \"Ubuntu\", sans-serif;\n}\n\n.wrapper {\n  display: grid;\n  place-content: center;\n  gap: 0.5em;\n}\n`,\n);\n", "import { Move } from \"../../../alg\";\nimport type { KeyboardPuzzle } from \"../../../bluetooth/keyboard\";\nimport type {\n  BluetoothPuzzle,\n  AlgLeafEvent,\n} from \"../../../bluetooth/smart-puzzle/bluetooth-puzzle\";\nimport type { ExperimentalTwizzleStreamServer } from \"../../../stream\";\nimport type { PuzzleStreamMoveEventRegisterCompatible } from \"../../../stream/process/ReorientedStream\";\nimport { ManagedCustomElement } from \"../ManagedCustomElement\";\nimport { customElementsShim } from \"../node-custom-element-shims\";\nimport { twistyStreamSourceCSS } from \"./TwistyStreamSource.css\";\n\ninterface StreamSource extends EventTarget {\n  disconnect?: () => void;\n}\n\nclass BluetoothStreamSource extends EventTarget {\n  private constructor(private puzzle: BluetoothPuzzle) {\n    super();\n    puzzle.addAlgLeafListener((e: AlgLeafEvent): void => {\n      const move = e.latestAlgLeaf.as(Move);\n      if (!move) {\n        return;\n      }\n      this.dispatchEvent(\n        new CustomEvent(\"move\", {\n          detail: {\n            move,\n          },\n        }),\n      );\n    });\n  }\n\n  static async connect(): Promise<BluetoothStreamSource> {\n    const bluetooth = await import(\"../../../bluetooth\");\n    const puzzle = await bluetooth.connectSmartPuzzle();\n    return new BluetoothStreamSource(puzzle);\n  }\n\n  disconnect(): void {\n    this.puzzle.disconnect();\n  }\n}\n\nclass KeyboardStreamSource extends EventTarget {\n  private constructor(private puzzle: KeyboardPuzzle) {\n    super();\n    puzzle.addAlgLeafListener((e: AlgLeafEvent) => {\n      const move = e.latestAlgLeaf.as(Move);\n      if (!move) {\n        return;\n      }\n      this.dispatchEvent(\n        new CustomEvent(\"move\", {\n          detail: {\n            move,\n          },\n        }),\n      );\n    });\n  }\n\n  static async connect(): Promise<KeyboardStreamSource> {\n    const bluetooth = await import(\"../../../bluetooth\");\n    const puzzle = await bluetooth.debugKeyboardConnect();\n    return new KeyboardStreamSource(puzzle);\n  }\n\n  disconnect(): void {\n    this.puzzle.disconnect();\n  }\n}\n\nexport class TwistyStreamSource extends ManagedCustomElement {\n  constructor() {\n    super();\n    this.addCSS(twistyStreamSourceCSS);\n\n    this.addElement(document.createElement(\"span\")).textContent =\n      \"Connect a stream source:\";\n\n    const bluetoothButton = this.addSource(\n      \"\uD83D\uDCE1 Bluetooth\",\n      BluetoothStreamSource,\n    );\n    this.addSource(\"\u2328\uFE0F Keyboard\", KeyboardStreamSource);\n    this.addStreamSource();\n\n    if (!navigator?.bluetooth) {\n      bluetoothButton.disabled = true;\n    }\n  }\n\n  addSource(\n    label: string,\n    sourceClass: { connect: () => Promise<StreamSource> },\n  ): HTMLButtonElement {\n    const button = this.addElement(document.createElement(\"button\"));\n    button.textContent = label;\n    button.addEventListener(\"click\", async () => {\n      const source = await sourceClass.connect();\n      button.disabled = true;\n      button.textContent += \" \u2705\";\n      source.addEventListener(\n        \"move\",\n        (e: PuzzleStreamMoveEventRegisterCompatible) => {\n          this.dispatchEvent(new CustomEvent(\"move\", e));\n        },\n      );\n      // TODO: Hook up UI for disconnection.\n    });\n    return button;\n  }\n\n  addStreamSource(): void {\n    const SENTINEL_VALUE = \"SENTINEL\";\n    const button = this.addElement(document.createElement(\"button\"));\n    button.textContent = \"\uD83D\uDD34 Get Twizzle streams\";\n\n    const select = this.addElement(document.createElement(\"select\"));\n    select.appendChild(document.createElement(\"option\")).textContent =\n      \"Streams\";\n    select.disabled = true;\n\n    let streamServer: ExperimentalTwizzleStreamServer | null = null;\n    button.addEventListener(\"click\", async () => {\n      const TwizzleStreamServer = (await import(\"../../../stream\"))\n        .ExperimentalTwizzleStreamServer;\n      streamServer ||= new TwizzleStreamServer();\n      const streams = await streamServer.streams();\n      select.textContent = \"\";\n      select.disabled = false;\n      const info = select.appendChild(document.createElement(\"option\"));\n      info.textContent = `Select a stream (${streams.length} available)`;\n      info.value = SENTINEL_VALUE;\n      for (const stream of streams) {\n        const firstSender = stream.senders[0];\n        const option = select.appendChild(document.createElement(\"option\"));\n        option.value = stream.streamID;\n        option.textContent = `${firstSender.name} (${stream.streamID.slice(\n          -2,\n        )})`;\n      }\n    });\n\n    select.addEventListener(\"change\", () => {\n      const streamID = select.value;\n      if (streamID === SENTINEL_VALUE) {\n        return;\n      }\n      const stream = streamServer!.connect(streamID);\n      stream.addEventListener(\n        \"move\",\n        (moveEvent: PuzzleStreamMoveEventRegisterCompatible) => {\n          console.log(moveEvent);\n          this.dispatchEvent(new CustomEvent(\"move\", moveEvent));\n        },\n      );\n    });\n  }\n}\n\ncustomElementsShim.define(\"twisty-stream-source\", TwistyStreamSource);\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"twisty-stream-source\": TwistyStreamSource;\n  }\n}\n", "// Stub file for testing.\n// Feel free to add code here if you need a quick place to run some code, but avoid committing any changes.\n\nimport {\n  PuzzleStreamMoveEventRegisterCompatible,\n  ReorientedStream,\n} from \"../../../../cubing/stream/process/ReorientedStream\";\nimport \"../../../../cubing/twisty\";\nimport type { TwistyPlayer } from \"../../../../cubing/twisty\";\nimport \"../../../../cubing/twisty/views/stream/TwistyStreamSource\";\nimport type { TwistyStreamSource } from \"../../../../cubing/twisty/views/stream/TwistyStreamSource\";\n\nconst twistyStreamSource: TwistyStreamSource = document.querySelector(\n  \"twisty-stream-source\",\n)!;\nconst reorientedPlayer: TwistyPlayer = document.querySelector(\"#reoriented\")!;\nconst unreorientedPlayer: TwistyPlayer =\n  document.querySelector(\"#unreoriented\")!;\n\nconst reorienter = new ReorientedStream(twistyStreamSource);\n\nreorienter.addEventListener(\n  \"move\",\n  (e: PuzzleStreamMoveEventRegisterCompatible) => {\n    console.log(e.detail.move.toString());\n    reorientedPlayer.experimentalAddMove(e.detail.move);\n  },\n);\ntwistyStreamSource.addEventListener(\n  \"move\",\n  (e: PuzzleStreamMoveEventRegisterCompatible) => {\n    if (!\"xyz\".includes(e.detail.move.family)) {\n      unreorientedPlayer.experimentalAddMove(e.detail.move);\n    }\n  },\n);\n\nconsole.log(reorienter);\n"],
  "mappings": "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",
  "names": ["ensurePuzzleStreamMoveEvent", "event", "experimentalIs", "Move", "faces", "rotationMap", "OrientationTracker", "experimental3x3x3KPuzzle", "move", "rotation", "family", "faceIdx", "ReorientedStream", "target", "detail", "moves", "twistyStreamSourceCSS", "CSSSource", "BluetoothStreamSource", "puzzle", "move", "Move", "KeyboardStreamSource", "TwistyStreamSource", "ManagedCustomElement", "twistyStreamSourceCSS", "bluetoothButton", "label", "sourceClass", "button", "source", "e", "SENTINEL_VALUE", "select", "streamServer", "TwizzleStreamServer", "streams", "info", "stream", "firstSender", "option", "streamID", "moveEvent", "customElementsShim", "twistyStreamSource", "reorientedPlayer", "unreorientedPlayer", "reorienter", "ReorientedStream", "e"]
}
