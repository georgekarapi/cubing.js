{
  "version": 3,
  "sources": ["../../../../../src/sites/experiments.cubing.net/cubing.js/twisty/ll.ts"],
  "sourcesContent": ["import { puzzles } from \"../../../../cubing/puzzles\";\nimport \"../../../../cubing/twisty\";\nimport { KPuzzleSVGWrapper } from \"../../../../cubing/twisty/views/2D/KPuzzleSVGWrapper\";\n\nwindow.addEventListener(\"DOMContentLoaded\", async () => {\n  const kpuzzle = await puzzles[\"3x3x3\"].kpuzzle();\n  const llSVG = await puzzles[\"3x3x3\"].llSVG!(); // TODO: Avoid the need for an assertion?\n\n  {\n    const svg = new KPuzzleSVGWrapper(kpuzzle, llSVG);\n    const state = kpuzzle\n      .algToTransformation(\"R U R' U' R' F R2 U' R' U' R U R' F'\")\n      .toKState();\n    svg.draw(state);\n    document.body.appendChild(svg.wrapperElement);\n  }\n\n  {\n    const svg = new KPuzzleSVGWrapper(kpuzzle, llSVG);\n    const state = kpuzzle.algToTransformation(\"((M' U')4 x y)3\").toKState();\n    svg.draw(state);\n    document.body.appendChild(svg.wrapperElement);\n  }\n\n  {\n    const svg = new KPuzzleSVGWrapper(kpuzzle, llSVG);\n    const state = kpuzzle.algToTransformation(\"r U R' U R U2 r'\").toKState();\n    svg.draw(state);\n    document.body.appendChild(svg.wrapperElement);\n  }\n});\n"],
  "mappings": "0TAIA,OAAO,iBAAiB,mBAAoB,SAAY,CACtD,IAAMA,EAAU,MAAMC,EAAQ,SAAS,QAAQ,EACzCC,EAAQ,MAAMD,EAAQ,SAAS,MAAO,EAE5C,CACE,IAAME,EAAM,IAAIC,EAAkBJ,EAASE,CAAK,EAC1CG,EAAQL,EACX,oBAAoB,sCAAsC,EAC1D,SAAS,EACZG,EAAI,KAAKE,CAAK,EACd,SAAS,KAAK,YAAYF,EAAI,cAAc,CAC9C,CAEA,CACE,IAAMA,EAAM,IAAIC,EAAkBJ,EAASE,CAAK,EAC1CG,EAAQL,EAAQ,oBAAoB,iBAAiB,EAAE,SAAS,EACtEG,EAAI,KAAKE,CAAK,EACd,SAAS,KAAK,YAAYF,EAAI,cAAc,CAC9C,CAEA,CACE,IAAMA,EAAM,IAAIC,EAAkBJ,EAASE,CAAK,EAC1CG,EAAQL,EAAQ,oBAAoB,kBAAkB,EAAE,SAAS,EACvEG,EAAI,KAAKE,CAAK,EACd,SAAS,KAAK,YAAYF,EAAI,cAAc,CAC9C,CACF,CAAC",
  "names": ["kpuzzle", "puzzles", "llSVG", "svg", "KPuzzleSVGWrapper", "state"]
}
