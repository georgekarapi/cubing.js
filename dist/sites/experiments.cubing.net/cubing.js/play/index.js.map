{
  "version": 3,
  "sources": ["../../../../../src/sites/experiments.cubing.net/cubing.js/play/index.ts"],
  "sourcesContent": ["import { Alg, Move } from \"../../../../cubing/alg\";\nimport {\n  BluetoothPuzzle,\n  connectSmartPuzzle,\n  debugKeyboardConnect,\n  GoCube,\n  OrientationEvent,\n} from \"../../../../cubing/bluetooth\";\nimport type { AlgLeafEvent } from \"../../../../cubing/bluetooth/smart-puzzle/bluetooth-puzzle\";\nimport {\n  ExperimentalProxyEvent,\n  ExperimentalWebSocketProxySender,\n} from \"../../../../cubing/stream\";\nimport { setTwistyDebug } from \"../../../../cubing/twisty\";\nimport { Action, SwipeyPuzzle } from \"./input/SwipeyPuzzle\";\nimport {\n  debugShowRenderStats,\n  DEFAULT_PUZZLE_ID,\n  getPuzzleID,\n  PuzzleID,\n  receivingSocketOrigin,\n  sendingSocketOrigin,\n} from \"./url-params\";\nimport { CallbackProxyReceiver } from \"./websocket-proxy\";\n\nconst bluetoothSVG = new URL(\"./bluetooth.svg\", import.meta.url).toString();\nconst clearSVG = new URL(\"./clear.svg\", import.meta.url).toString();\n\nsetTwistyDebug({ showRenderStats: debugShowRenderStats() });\n// experimentalShowJumpingFlash(false); // TODO\n\nlet trackingOrientation: boolean = false;\nlet bluetoothPuzzle: BluetoothPuzzle | null = null;\n// let callbackProxyReceiver: CallbackProxyReceiver | null = null;\nlet sender: ExperimentalWebSocketProxySender | null = null;\n\nfunction puzzleName(puzzleID: PuzzleID): string {\n  const puzzleNameMap: Record<string, string> = {\n    megaminx: \"Megaminx\",\n  };\n  return puzzleNameMap[puzzleID] ?? puzzleID;\n}\n\nconst fn = async (\n  fromMouse: boolean,\n  fromKeyboard: boolean,\n  e: KeyboardEvent,\n) => {\n  if (!fromMouse && fromKeyboard) {\n    if (e?.which && e.which !== 32) {\n      return;\n    }\n  }\n\n  const twizzleLogo = document.querySelector(\"#twizzle-logo\")!;\n  twizzleLogo.animate([{ opacity: 1 }, { opacity: 0 }], {\n    duration: 200,\n    easing: \"ease-in\",\n  }).onfinish = () => {\n    document.body.removeChild(twizzleLogo);\n  };\n  twizzleLogo.classList.add(\"faded-away\");\n\n  const swipeWrapper = document.createElement(\"div\");\n  swipeWrapper.classList.add(\"swipe-wrapper\");\n  document.body.appendChild(swipeWrapper);\n\n  const controlBar = document.createElement(\"div\");\n  controlBar.classList.add(\"control-bar\");\n  swipeWrapper.appendChild(controlBar);\n\n  function algLeafListener(e: AlgLeafEvent) {\n    // TODO: This is a total hack. Needs to be pushed down into the keyboard map.\n    if (getPuzzleID() !== \"3x3x3\") {\n      const move = e.latestAlgLeaf.as(Move);\n      if (move) {\n        // TODO: allmoves\n        switch (move.family) {\n          // case \"x\":\n          //   // TODO: distinguish between Rv and Lv\n          //   e.latestAlgLeaf = modifiedBlockMove(e.latestAlgLeaf, {\n          //     family: \"Rv\"\n          //   })\n          //   break;\n          case \"y\": {\n            e = { ...e }; // Copy\n            e.latestAlgLeaf = move.modified({\n              family: \"Uv\",\n            });\n            break;\n          }\n          // case \"z\":\n          //   // TODO: map this to a corner turn for FTO\n          //   e.latestAlgLeaf = modifiedBlockMove(e.latestAlgLeaf, {\n          //     family: \"Fv\"\n          //   })\n          //   break;\n        }\n      }\n    }\n    swipeyPuzzle.addAlgLeaf(e.latestAlgLeaf);\n\n    if (sender) {\n      sender.sendMoveEvent(e);\n    }\n\n    updateAlgLink();\n  }\n\n  const clearButton = document.createElement(\"button\");\n  const clearIcon = document.createElement(\"img\");\n  clearIcon.src = clearSVG;\n  clearButton.appendChild(clearIcon);\n  controlBar.appendChild(clearButton);\n  clearButton.addEventListener(\"click\", space);\n\n  // function toLink(alg: Alg): string {\n  //   const url = new URL(\"../edit/\", import.meta.url);\n  //   const puzzleID = getPuzzleID();\n  //   if (puzzleID === \"3x3x3\") {\n  //     const opts: AlgCubingNetOptions = {\n  //       alg: alg,\n  //     };\n  //     /// TODO\n  //     // const setup = swipeyPuzzle.twistyPlayer.experimentalSetupAlg;\n  //     // if (!setup.experimentalIsEmpty()) {\n  //     //   opts.setup = setup;\n  //     // }\n  //     return algCubingNetLink(opts);\n  //   } else {\n  //     url.searchParams.set(\"puzzle\", puzzleID);\n  //     url.searchParams.set(\"alg\", alg.toString());\n  //     return url.toString();\n  //   }\n  // }\n\n  const algLink = document.createElement(\"a\");\n  const instructions =\n    fromKeyboard || fromMouse ? \"Type to add moves\" : \"Swipe to add moves.\";\n  algLink.textContent = instructions;\n  controlBar.appendChild(algLink);\n  async function updateAlgLink(): Promise<void> {\n    await new Promise((resolve) => setTimeout(resolve, 10));\n    const alg = await swipeyPuzzle.twistyPlayer.experimentalGet.alg();\n    if (alg.experimentalIsEmpty()) {\n      algLink.textContent = instructions;\n      algLink.removeAttribute(\"href\");\n    } else {\n      algLink.textContent = alg.toString();\n      algLink.href =\n        await swipeyPuzzle.twistyPlayer.experimentalModel.twizzleLink();\n    }\n  }\n\n  const bluetoothButton = document.createElement(\"button\");\n  const bluetoothIcon = document.createElement(\"img\");\n  bluetoothIcon.src = bluetoothSVG;\n  bluetoothButton.appendChild(bluetoothIcon);\n  controlBar.appendChild(bluetoothButton);\n\n  function resetCamera() {\n    if (trackingOrientation) {\n      // TODO\n    }\n  }\n\n  function orientationEventListener(event: OrientationEvent): void {\n    if (!trackingOrientation) {\n      // First orientation event.\n      trackingOrientation = true;\n      resetCamera();\n    }\n    // TODO\n    // swipeyPuzzle.twistyPlayer.scene!.twisty3Ds.forEach(\n    //   (twisty3DPuzzle: Twisty3DPuzzle) => {\n    //     twisty3DPuzzle.quaternion.copy(event.quaternion as Quaternion); // TODO\n    //   },\n    // );\n    // // TODO: expose a way to scheduler renders on objects.\n    // (swipeyPuzzle.twistyPlayer.timeline as any).dispatchTimestamp(); // TODO\n\n    if (sender) {\n      sender.sendOrientationEvent(event);\n    }\n  }\n\n  bluetoothButton.addEventListener(\"click\", async () => {\n    try {\n      bluetoothPuzzle = await connectSmartPuzzle();\n      bluetoothPuzzle.addAlgLeafListener(algLeafListener);\n      bluetoothButton.style.display = \"none\";\n      bluetoothPuzzle?.addOrientationListener(orientationEventListener);\n    } finally {\n      swipeyPuzzle.twistyPlayer.blur();\n    }\n  });\n  if (!navigator.bluetooth) {\n    bluetoothButton.style.display = \"none\";\n  }\n\n  swipeWrapper.animate([{ opacity: 0 }, { opacity: 1 }], {\n    duration: 200,\n    easing: \"ease-in\",\n  });\n  swipeWrapper.appendChild(swipeyPuzzle);\n\n  if (!(fromKeyboard || fromMouse)) {\n    swipeyPuzzle.showGrid();\n  }\n\n  const kbp = await debugKeyboardConnect(document.body);\n  kbp.addAlgLeafListener(algLeafListener);\n\n  window.removeEventListener(\"keydown\", keyboardCallback);\n  document.body.removeEventListener(\"mousedown\", mouseCallback);\n  document.body.removeEventListener(\"touchstart\", swipeCallback);\n\n  function space() {\n    resetCamera();\n    swipeyPuzzle.twistyPlayer.alg = new Alg();\n    updateAlgLink();\n\n    if (sender) {\n      console.log(\"resetting!\");\n      sender.sendResetEvent();\n    }\n\n    if ((bluetoothPuzzle as GoCube)?.resetOrientation) {\n      (bluetoothPuzzle as GoCube)?.resetOrientation();\n    }\n    clearButton.blur();\n  }\n\n  function backspace() {\n    swipeyPuzzle.twistyPlayer.experimentalRemoveFinalChild();\n    updateAlgLink();\n  }\n\n  async function enter() {\n    const url = await swipeyPuzzle.twistyPlayer.experimentalModel.twizzleLink();\n    // const seq = maybeCoalesce(swipeyPuzzle.twistyPlayer.alg);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.click();\n  }\n\n  window.addEventListener(\"keydown\", (e: KeyboardEvent) => {\n    if (e.which === 32) {\n      space();\n    }\n    if (e.which === 13) {\n      enter();\n    }\n    if (e.code === \"Backspace\") {\n      backspace();\n    }\n  });\n\n  swipeyPuzzle.setActionListener((action: Action) => {\n    switch (action) {\n      case \"space\": {\n        space();\n        break;\n      }\n      case \"enter\": {\n        enter();\n        break;\n      }\n      case \"backspace\": {\n        backspace();\n        break;\n      }\n    }\n  });\n\n  swipeyPuzzle.setAlgListener(updateAlgLink);\n\n  document.addEventListener(\"copy\", async (e) => {\n    const alg = await swipeyPuzzle.twistyPlayer.experimentalGet.alg(); // TODO\n    e.clipboardData!.setData(\"text/plain\", alg.toString());\n\n    const a = document.createElement(\"a\");\n    a.href = await swipeyPuzzle.twistyPlayer.experimentalModel.twizzleLink();\n    a.textContent = alg.toString();\n    const html = new XMLSerializer().serializeToString(a);\n    e.clipboardData!.setData(\"text/html\", html);\n\n    e.preventDefault();\n  });\n\n  if (fromKeyboard) {\n    e?.preventDefault();\n  }\n\n  const receivingOrigin = receivingSocketOrigin();\n  if (receivingOrigin) {\n    console.log(\"Registering receiver\");\n    const url = new URL(receivingOrigin);\n    url.pathname = \"/register-receiver\";\n    new CallbackProxyReceiver(url.toString(), (e: ExperimentalProxyEvent) => {\n      console.log(e);\n      switch (e.event) {\n        case \"move\": {\n          algLeafListener(e.data);\n          break;\n        }\n        case \"orientation\": {\n          orientationEventListener(e.data);\n          break;\n        }\n        case \"reset\": {\n          space();\n          break;\n        }\n      }\n    });\n  }\n\n  const sendingOrigin = sendingSocketOrigin();\n  if (sendingOrigin) {\n    console.log(\"Registering senter\");\n    const url = new URL(sendingOrigin);\n    url.pathname = \"/register-sender\";\n    sender = new ExperimentalWebSocketProxySender(url.toString());\n  }\n};\n\nconst keyboardCallback = fn.bind(fn, false, true);\nconst mouseCallback = fn.bind(fn, true, false);\nconst swipeCallback = fn.bind(fn, false, false);\n\nwindow.addEventListener(\"DOMContentLoaded\", () => {\n  window.addEventListener(\"keydown\", keyboardCallback);\n  document.body.addEventListener(\"mousedown\", mouseCallback);\n  document.body.addEventListener(\"touchstart\", swipeCallback);\n\n  const go = new URL(document.location.href).searchParams.get(\"go\");\n  switch (go) {\n    case \"keyboard\": {\n      keyboardCallback();\n      break;\n    }\n    case \"swipe\": {\n      swipeCallback();\n      break;\n    }\n  }\n\n  if (getPuzzleID() !== DEFAULT_PUZZLE_ID) {\n    document.title = `Twizzle | ${puzzleName(getPuzzleID())}`;\n  }\n});\n\n// Initialize ahead of time so that it can render more quickly.\nconst swipeyPuzzle = new SwipeyPuzzle(\n  getPuzzleID(),\n  () => {\n    /* */\n  },\n  () => {\n    /* */\n  },\n);\n"],
  "mappings": "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",
  "names": ["bluetoothSVG", "clearSVG", "setTwistyDebug", "debugShowRenderStats", "trackingOrientation", "bluetoothPuzzle", "sender", "puzzleName", "puzzleID", "fn", "fromMouse", "fromKeyboard", "e", "twizzleLogo", "swipeWrapper", "controlBar", "algLeafListener", "getPuzzleID", "move", "Move", "swipeyPuzzle", "updateAlgLink", "clearButton", "clearIcon", "space", "algLink", "instructions", "resolve", "alg", "bluetoothButton", "bluetoothIcon", "resetCamera", "orientationEventListener", "event", "connectSmartPuzzle", "debugKeyboardConnect", "keyboardCallback", "mouseCallback", "swipeCallback", "Alg", "backspace", "enter", "url", "a", "action", "html", "receivingOrigin", "receivingSocketOrigin", "CallbackProxyReceiver", "sendingOrigin", "sendingSocketOrigin", "WebSocketProxySender", "DEFAULT_PUZZLE_ID", "SwipeyPuzzle"]
}
