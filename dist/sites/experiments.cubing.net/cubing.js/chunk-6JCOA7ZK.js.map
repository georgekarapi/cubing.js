{
  "version": 3,
  "sources": ["../../../../src/cubing/protocol/index.ts", "../../../../src/cubing/protocol/binary/hex.ts"],
  "sourcesContent": ["export {\n  binaryComponentsToReid3x3x3 as experimentalBinaryComponentsToReid3x3x3,\n  reid3x3x3ToTwizzleBinary as experimentalReid3x3x3ToTwizzleBinary,\n  twizzleBinaryToBinaryComponents as experimentalTwizzleBinaryToBinaryComponents,\n  twizzleBinaryToReid3x3x3 as experimentalTwizzleBinaryToReid3x3x3,\n} from \"./binary/binary3x3x3\";\nexport {\n  bufferToSpacedHex as experimentalBufferToSpacedHex,\n  spacedHexToBuffer as experimentalSpacedHexToBuffer,\n} from \"./binary/hex\";\n", "export function bufferToSpacedHex(buffer: ArrayBuffer): string {\n  // buffer is an ArrayBuffer\n  return (\n    Array.prototype.map.call(new Uint8Array(buffer), (x: number) =>\n      `00${x.toString(16)}`.slice(-2),\n    ) as string[]\n  ).join(\" \");\n}\n\nexport function spacedHexToBuffer(hex: string): Uint8Array {\n  return new Uint8Array(hex.split(\" \").map((c) => parseInt(c, 16)));\n}\n"],
  "mappings": "qGAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,6CAAAE,EAAA,kCAAAC,EAAA,yCAAAC,EAAA,kCAAAC,EAAA,gDAAAC,EAAA,yCAAAC,ICAO,SAASC,EAAkBC,EAA6B,CAE7D,OACE,MAAM,UAAU,IAAI,KAAK,IAAI,WAAWA,CAAM,EAAIC,GAChD,KAAKA,EAAE,SAAS,EAAE,IAAI,MAAM,EAAE,CAChC,EACA,KAAK,GAAG,CACZ,CAEO,SAASC,EAAkBC,EAAyB,CACzD,OAAO,IAAI,WAAWA,EAAI,MAAM,GAAG,EAAE,IAAKC,GAAM,SAASA,EAAG,EAAE,CAAC,CAAC,CAClE",
  "names": ["protocol_exports", "__export", "binaryComponentsToReid3x3x3", "bufferToSpacedHex", "reid3x3x3ToTwizzleBinary", "spacedHexToBuffer", "twizzleBinaryToBinaryComponents", "twizzleBinaryToReid3x3x3", "bufferToSpacedHex", "buffer", "x", "spacedHexToBuffer", "hex", "c"]
}
