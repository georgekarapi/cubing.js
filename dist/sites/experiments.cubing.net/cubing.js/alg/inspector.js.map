{
  "version": 3,
  "sources": ["../../../../../src/sites/experiments.cubing.net/cubing.js/alg/inspector.ts"],
  "sourcesContent": ["import { Alg, AlgNode } from \"../../../../cubing/alg\";\nimport type { Parsed } from \"../../../../cubing/alg/parseAlg\";\nimport { extract } from \"./extractor\";\n\nconst algElem = document.querySelector(\"#alg\") as HTMLTextAreaElement;\nconst inspectorElem = document.querySelector(\"#inspector\") as HTMLPreElement;\n\nfunction bracket(n: number): string {\n  console.log({ n });\n  if (n < 2) {\n    return Array(n).fill(\"\u2423\").join(\"\");\n  }\n  return `\u2514${new Array(n - 2).fill(\"\u2500\").join(\"\")}\u2518`;\n}\n\nfunction updateInspector(s: string): void {\n  const singleLineS = s.replaceAll(\"\\n\", \"\u23CE\");\n  inspectorElem.textContent = \"\";\n  try {\n    const parsed = Alg.fromString(s);\n    for (const [name, v] of extract(parsed)) {\n      const parsed = v as Parsed<Alg | AlgNode>;\n      inspectorElem.textContent += \"\\n\";\n      inspectorElem.textContent += `${name}: `.padStart(12, \" \");\n      inspectorElem.textContent += \"\".padStart(parsed.startCharIndex, \" \");\n      inspectorElem.textContent += singleLineS.slice(\n        parsed.startCharIndex,\n        parsed.endCharIndex,\n      );\n      inspectorElem.textContent += \"\\n\";\n      inspectorElem.textContent += \"\".padEnd(12 + parsed.startCharIndex, \" \");\n      inspectorElem.textContent += bracket(\n        parsed.endCharIndex - parsed.startCharIndex,\n      );\n    }\n  } catch (e) {\n    console.error(e);\n    inspectorElem.textContent +=\n      \"\\n--------\\nERROR:\\n\" + (e as Error).toString();\n  }\n}\n\nalgElem.addEventListener(\"input\", () => updateInspector(algElem.value));\n\nupdateInspector(algElem.value);\n"],
  "mappings": "+GAIA,IAAMA,EAAU,SAAS,cAAc,MAAM,EACvCC,EAAgB,SAAS,cAAc,YAAY,EAEzD,SAASC,EAAQC,EAAmB,CAElC,OADA,QAAQ,IAAI,CAAE,EAAAA,CAAE,CAAC,EACbA,EAAI,EACC,MAAMA,CAAC,EAAE,KAAK,QAAG,EAAE,KAAK,EAAE,EAE5B,SAAI,IAAI,MAAMA,EAAI,CAAC,EAAE,KAAK,QAAG,EAAE,KAAK,EAAE,SAC/C,CAEA,SAASC,EAAgBC,EAAiB,CACxC,IAAMC,EAAcD,EAAE,WAAW;AAAA,EAAM,QAAG,EAC1CJ,EAAc,YAAc,GAC5B,GAAI,CACF,IAAMM,EAASC,EAAI,WAAWH,CAAC,EAC/B,OAAW,CAACI,EAAMC,CAAC,IAAKC,EAAQJ,CAAM,EAAG,CACvC,IAAMA,EAASG,EACfT,EAAc,aAAe;AAAA,EAC7BA,EAAc,aAAe,GAAGQ,MAAS,SAAS,GAAI,GAAG,EACzDR,EAAc,aAAe,GAAG,SAASM,EAAO,eAAgB,GAAG,EACnEN,EAAc,aAAeK,EAAY,MACvCC,EAAO,eACPA,EAAO,YACT,EACAN,EAAc,aAAe;AAAA,EAC7BA,EAAc,aAAe,GAAG,OAAO,GAAKM,EAAO,eAAgB,GAAG,EACtEN,EAAc,aAAeC,EAC3BK,EAAO,aAAeA,EAAO,cAC/B,CACF,CACF,OAASK,EAAP,CACA,QAAQ,MAAMA,CAAC,EACfX,EAAc,aACZ;AAAA;AAAA;AAAA,EAA0BW,EAAY,SAAS,CACnD,CACF,CAEAZ,EAAQ,iBAAiB,QAAS,IAAMI,EAAgBJ,EAAQ,KAAK,CAAC,EAEtEI,EAAgBJ,EAAQ,KAAK",
  "names": ["algElem", "inspectorElem", "bracket", "n", "updateInspector", "s", "singleLineS", "parsed", "Alg", "name", "v", "extract", "e"]
}
