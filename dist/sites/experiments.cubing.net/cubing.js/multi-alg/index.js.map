{
  "version": 3,
  "sources": ["../../../../../src/sites/experiments.cubing.net/cubing.js/multi-alg/index.ts"],
  "sourcesContent": ["import { Alg, LineComment, Newline } from \"../../../../cubing/alg\";\nimport { puzzles } from \"../../../../cubing/puzzles\";\nimport { experimentalStickerings } from \"../../../../cubing/puzzles/cubing-private\";\nimport { PuzzleID, TwistyPlayer } from \"../../../../cubing/twisty\";\n\nconst algsTextarea = document.querySelector(\"#algs\") as HTMLTextAreaElement;\nif (localStorage[\"multi-alg-textarea\"]) {\n  algsTextarea.value = localStorage[\"multi-alg-textarea\"];\n  algsTextarea.classList.add(\"saved\");\n}\n\nalgsTextarea.addEventListener(\"input\", () => {\n  algsTextarea.classList.remove(\"saved\");\n});\n\nconst player = new TwistyPlayer({});\ndocument.querySelector(\"#display\")!.appendChild(player);\n\nasync function downloadAlg(alg: Alg, name: string) {\n  player.alg = alg;\n  player.experimentalSetupAnchor = \"end\";\n  player.timestamp = \"opposite-anchor\";\n\n  await player.experimentalDownloadScreenshot(name);\n}\n\nconst puzzleSelect = document.querySelector(\"#puzzle\") as HTMLSelectElement;\nfor (const [puzzleID, puzzleManager] of Object.entries(puzzles)) {\n  const option: HTMLOptionElement = puzzleSelect.appendChild(\n    document.createElement(\"option\"),\n  )!;\n  option.value = puzzleID;\n  option.textContent = puzzleManager.fullName;\n}\nconst puzzleID = new URL(location.href).searchParams.get(\"puzzle\");\nif (puzzleID) {\n  if (puzzleID in puzzles) {\n    player.puzzle = puzzleID as PuzzleID;\n    puzzleSelect.value = puzzleID;\n  } else {\n    console.error(\"Invalid puzzle:\", puzzleID);\n  }\n}\n\npuzzleSelect.addEventListener(\"change\", () => {\n  const puzzleID = puzzleSelect.value;\n  player.puzzle = puzzleID as PuzzleID;\n\n  const url = new URL(location.href);\n  url.searchParams.set(\"puzzle\", puzzleID);\n  window.history.replaceState(\"\", \"\", url.toString());\n});\n\nconst stickeringSelect = document.querySelector(\n  \"#stickering\",\n) as HTMLSelectElement;\nfor (const stickering of Object.keys(experimentalStickerings)) {\n  const option: HTMLOptionElement = stickeringSelect.appendChild(\n    document.createElement(\"option\"),\n  )!;\n  option.value = stickering;\n  option.textContent = stickering;\n}\nconst stickering = new URL(location.href).searchParams.get(\"stickering\");\nif (stickering) {\n  if (stickering in experimentalStickerings) {\n    player.experimentalStickering = stickering;\n    stickeringSelect.value = stickering;\n  } else {\n    console.error(\"Invalid stickering:\", stickering);\n  }\n}\n\nstickeringSelect?.addEventListener(\"change\", () => {\n  const stickering = stickeringSelect.value;\n  player.experimentalStickering = stickering;\n\n  const url = new URL(location.href);\n  url.searchParams.set(\"stickering\", stickering);\n  window.history.replaceState(\"\", \"\", url.toString());\n});\n\ndocument.querySelector(\"#download\")?.addEventListener(\"click\", async () => {\n  const allAlgs = Alg.fromString(algsTextarea.value);\n\n  let currentAlg = new Alg();\n  const algList: {\n    alg: Alg;\n    name: string;\n  }[] = [];\n  for (const algNode of allAlgs.childAlgNodes()) {\n    if (algNode.is(LineComment)) {\n      algList.push({\n        alg: currentAlg,\n        name: (algNode as LineComment).text.trim(),\n      });\n      currentAlg = new Alg();\n    } else if (algNode.is(Newline)) {\n      // skip\n    } else {\n      currentAlg = currentAlg.concat([algNode]);\n    }\n  }\n\n  save();\n\n  for (const { alg, name } of algList) {\n    await downloadAlg(\n      new Alg(alg.experimentalExpand()),\n      `${stickeringSelect.value} \u2014 ${name}`,\n    );\n  }\n});\n\nfunction save() {\n  localStorage[\"multi-alg-textarea\"] = algsTextarea.value;\n  algsTextarea.classList.add(\"saved\");\n}\n\ndocument.querySelector(\"#save\")?.addEventListener(\"click\", save);\n"],
  "mappings": "2VAKA,IAAMA,EAAe,SAAS,cAAc,OAAO,EAC/C,aAAa,wBACfA,EAAa,MAAQ,aAAa,sBAClCA,EAAa,UAAU,IAAI,OAAO,GAGpCA,EAAa,iBAAiB,QAAS,IAAM,CAC3CA,EAAa,UAAU,OAAO,OAAO,CACvC,CAAC,EAED,IAAMC,EAAS,IAAIC,EAAa,CAAC,CAAC,EAClC,SAAS,cAAc,UAAU,EAAG,YAAYD,CAAM,EAEtD,eAAeE,EAAYC,EAAUC,EAAc,CACjDJ,EAAO,IAAMG,EACbH,EAAO,wBAA0B,MACjCA,EAAO,UAAY,kBAEnB,MAAMA,EAAO,+BAA+BI,CAAI,CAClD,CAEA,IAAMC,EAAe,SAAS,cAAc,SAAS,EACrD,OAAW,CAACC,EAAUC,CAAa,IAAK,OAAO,QAAQC,CAAO,EAAG,CAC/D,IAAMC,EAA4BJ,EAAa,YAC7C,SAAS,cAAc,QAAQ,CACjC,EACAI,EAAO,MAAQH,EACfG,EAAO,YAAcF,EAAc,QACrC,CACA,IAAMD,EAAW,IAAI,IAAI,SAAS,IAAI,EAAE,aAAa,IAAI,QAAQ,EAC7DA,IACEA,KAAYE,GACdR,EAAO,OAASM,EAChBD,EAAa,MAAQC,GAErB,QAAQ,MAAM,kBAAmBA,CAAQ,GAI7CD,EAAa,iBAAiB,SAAU,IAAM,CAC5C,IAAMC,EAAWD,EAAa,MAC9BL,EAAO,OAASM,EAEhB,IAAMI,EAAM,IAAI,IAAI,SAAS,IAAI,EACjCA,EAAI,aAAa,IAAI,SAAUJ,CAAQ,EACvC,OAAO,QAAQ,aAAa,GAAI,GAAII,EAAI,SAAS,CAAC,CACpD,CAAC,EAED,IAAMC,EAAmB,SAAS,cAChC,aACF,EACA,QAAWC,KAAc,OAAO,KAAKC,CAAuB,EAAG,CAC7D,IAAMJ,EAA4BE,EAAiB,YACjD,SAAS,cAAc,QAAQ,CACjC,EACAF,EAAO,MAAQG,EACfH,EAAO,YAAcG,CACvB,CACA,IAAMA,EAAa,IAAI,IAAI,SAAS,IAAI,EAAE,aAAa,IAAI,YAAY,EACnEA,IACEA,KAAcC,GAChBb,EAAO,uBAAyBY,EAChCD,EAAiB,MAAQC,GAEzB,QAAQ,MAAM,sBAAuBA,CAAU,GAInDD,GAAkB,iBAAiB,SAAU,IAAM,CACjD,IAAMC,EAAaD,EAAiB,MACpCX,EAAO,uBAAyBY,EAEhC,IAAMF,EAAM,IAAI,IAAI,SAAS,IAAI,EACjCA,EAAI,aAAa,IAAI,aAAcE,CAAU,EAC7C,OAAO,QAAQ,aAAa,GAAI,GAAIF,EAAI,SAAS,CAAC,CACpD,CAAC,EAED,SAAS,cAAc,WAAW,GAAG,iBAAiB,QAAS,SAAY,CACzE,IAAMI,EAAUC,EAAI,WAAWhB,EAAa,KAAK,EAE7CiB,EAAa,IAAID,EACfE,EAGA,CAAC,EACP,QAAWC,KAAWJ,EAAQ,cAAc,EACtCI,EAAQ,GAAGC,CAAW,GACxBF,EAAQ,KAAK,CACX,IAAKD,EACL,KAAOE,EAAwB,KAAK,KAAK,CAC3C,CAAC,EACDF,EAAa,IAAID,GACRG,EAAQ,GAAGE,CAAO,IAG3BJ,EAAaA,EAAW,OAAO,CAACE,CAAO,CAAC,GAI5CG,EAAK,EAEL,OAAW,CAAE,IAAAlB,EAAK,KAAAC,CAAK,IAAKa,EAC1B,MAAMf,EACJ,IAAIa,EAAIZ,EAAI,mBAAmB,CAAC,EAChC,GAAGQ,EAAiB,gBAAWP,GACjC,CAEJ,CAAC,EAED,SAASiB,GAAO,CACd,aAAa,sBAAwBtB,EAAa,MAClDA,EAAa,UAAU,IAAI,OAAO,CACpC,CAEA,SAAS,cAAc,OAAO,GAAG,iBAAiB,QAASsB,CAAI",
  "names": ["algsTextarea", "player", "TwistyPlayer", "downloadAlg", "alg", "name", "puzzleSelect", "puzzleID", "puzzleManager", "puzzles", "option", "url", "stickeringSelect", "stickering", "experimentalStickerings", "allAlgs", "Alg", "currentAlg", "algList", "algNode", "LineComment", "Newline", "save"]
}
