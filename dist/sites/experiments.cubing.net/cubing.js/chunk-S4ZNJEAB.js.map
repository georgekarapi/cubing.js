{
  "version": 3,
  "sources": ["../../../../src/cubing/puzzles/events.ts", "../../../../src/cubing/puzzles/implementations/2x2x2/index.ts", "../../../../src/cubing/puzzles/implementations/3x3x3/puzzle-specific-simplifications.ts", "../../../../src/cubing/puzzles/implementations/3x3x3/index.ts", "../../../../src/cubing/puzzles/index.ts", "../../../../src/cubing/puzzles/implementations/clock/index.ts", "../../../../src/cubing/puzzles/stickerings/fto-stickerings.ts", "../../../../src/cubing/puzzles/implementations/fto/index.ts", "../../../../src/cubing/puzzles/stickerings/megaminx-stickerings.ts", "../../../../src/cubing/puzzles/implementations/megaminx/index.ts", "../../../../src/cubing/puzzles/implementations/pyraminx/index.ts", "../../../../src/cubing/puzzles/implementations/square1/index.ts", "../../../../src/cubing/puzzles/implementations/kilominx/index.ts", "../../../../src/cubing/puzzles/implementations/redi-cube/index.ts", "../../../../src/cubing/puzzles/implementations/4x4x4/index.ts", "../../../../src/cubing/puzzles/implementations/melindas2x2x2x2/index.ts"],
  "sourcesContent": ["import type { PuzzleID } from \"../twisty\";\n\ninterface EventInfo {\n  puzzleID: PuzzleID;\n  eventName: string;\n}\n\nexport const wcaEvents: Record<string, EventInfo> = {\n  \"333\": { puzzleID: \"3x3x3\", eventName: \"3x3x3 Cube\" },\n  \"222\": { puzzleID: \"2x2x2\", eventName: \"2x2x2 Cube\" },\n  \"444\": { puzzleID: \"4x4x4\", eventName: \"4x4x4 Cube\" },\n  \"555\": { puzzleID: \"5x5x5\", eventName: \"5x5x5 Cube\" },\n  \"666\": { puzzleID: \"6x6x6\", eventName: \"6x6x6 Cube\" },\n  \"777\": { puzzleID: \"7x7x7\", eventName: \"7x7x7 Cube\" },\n  \"333bf\": { puzzleID: \"3x3x3\", eventName: \"3x3x3 Blindfolded\" },\n  \"333fm\": { puzzleID: \"3x3x3\", eventName: \"3x3x3 Fewest Moves\" },\n  \"333oh\": { puzzleID: \"3x3x3\", eventName: \"3x3x3 One-Handed\" },\n  clock: { puzzleID: \"clock\", eventName: \"Clock\" },\n  minx: { puzzleID: \"megaminx\", eventName: \"Megaminx\" },\n  pyram: { puzzleID: \"pyraminx\", eventName: \"Pyraminx\" },\n  skewb: { puzzleID: \"skewb\", eventName: \"Skewb\" },\n  sq1: { puzzleID: \"square1\", eventName: \"Square-1\" },\n  \"444bf\": { puzzleID: \"4x4x4\", eventName: \"4x4x4 Blindfolded\" },\n  \"555bf\": { puzzleID: \"5x5x5\", eventName: \"5x5x5 Blindfolded\" },\n  \"333mb\": { puzzleID: \"3x3x3\", eventName: \"3x3x3 Multi-Blind\" },\n};\n\n/** @category Event Info */\nexport function wcaEventInfo(event: string): EventInfo | null {\n  return wcaEvents[event] ?? null;\n}\n\nexport const twizzleEvents: Record<string, EventInfo> = {\n  ...wcaEvents,\n  fto: { puzzleID: \"fto\", eventName: \"Face-Turning Octahedron\" },\n  master_tetraminx: {\n    puzzleID: \"master_tetraminx\",\n    eventName: \"Master Tetraminx\",\n  },\n  kilominx: {\n    puzzleID: \"kilominx\",\n    eventName: \"Kilominx\",\n  },\n  redi_cube: {\n    puzzleID: \"redi_cube\",\n    eventName: \"Redi Cube\",\n  },\n};\n\n/** @category Event Info */\nexport function eventInfo(event: string): EventInfo | null {\n  return twizzleEvents[event] ?? null;\n}\n", "import { KPuzzle } from \"../../../kpuzzle\";\nimport type { ExperimentalStickering } from \"../../../twisty\";\nimport { asyncGetPuzzleGeometry } from \"../../async/async-pg3d\";\nimport { getCached } from \"../../async/lazy-cached\";\nimport type { PuzzleLoader } from \"../../PuzzleLoader\";\nimport type { StickeringMask } from \"../../stickerings/mask\";\nimport {\n  cubeLikeStickeringList,\n  cubeLikeStickeringMask,\n} from \"../../stickerings/cube-like-stickerings\";\n\n/** @category Specific Puzzles */\nexport const cube2x2x2: PuzzleLoader = {\n  id: \"2x2x2\",\n  fullName: \"2\u00D72\u00D72 Cube\",\n  kpuzzle: getCached(\n    async () =>\n      new KPuzzle(\n        (await import(\"../dynamic/side-events/puzzles-dynamic-side-events\"))\n          .cube2x2x2JSON,\n      ),\n  ),\n  svg: async () =>\n    (await import(\"../dynamic/side-events/puzzles-dynamic-side-events\"))\n      .cube2x2x2SVG,\n  llSVG: getCached(\n    async () =>\n      (await import(\"../dynamic/side-events/puzzles-dynamic-side-events\"))\n        .cube2x2x2LLSVG,\n  ),\n  pg: getCached(async () => {\n    return asyncGetPuzzleGeometry(\"2x2x2\");\n  }),\n  stickeringMask: (\n    stickering: ExperimentalStickering,\n  ): Promise<StickeringMask> => cubeLikeStickeringMask(cube2x2x2, stickering),\n  stickerings: () =>\n    cubeLikeStickeringList(\"2x2x2\", { use3x3x3Fallbacks: true }),\n};\n", "import type { PuzzleSpecificSimplifyOptions } from \"../../../alg\";\nimport { Move, QuantumMove } from \"../../../alg\";\n\nenum Axis {\n  X = \"x axis\",\n  Y = \"y axis\",\n  Z = \"z axis\",\n}\n\nenum MoveSourceType {\n  INDEXABLE_SLICE_NEAR,\n  INDEXABLE_SLICE_FAR,\n  INDEXABLE_WIDE_NEAR,\n  INDEXABLE_WIDE_FAR,\n  SPECIFIC_SLICE,\n  ROTATION,\n}\n\ninterface MoveSourceInfo {\n  family: string;\n  direction: -1 | 1;\n  type: MoveSourceType;\n  from: number;\n  to: number;\n}\n\nfunction makeSourceInfo(\n  moveStrings: string[],\n  type: MoveSourceType,\n  from: number,\n  to: number,\n): MoveSourceInfo[] {\n  const output: MoveSourceInfo[] = [];\n  for (const moveString of moveStrings) {\n    const move = Move.fromString(moveString);\n    const { family, amount: direction } = move;\n    if (![-1, 1].includes(direction)) {\n      // TODO: test iner/outer\n      // TODO: Can we move this to a test file?\n      throw new Error(\"Invalid config move\");\n    }\n    output.push({ family, direction: direction as -1 | 1, type, from, to });\n  }\n  return output;\n}\n\ninterface AxisInfo {\n  sliceDiameter: number;\n  extendsThroughEntirePuzzle: boolean;\n  moveSourceInfos: MoveSourceInfo[];\n}\n\n// TODO: wide slices\nconst axisInfos: Record<Axis, AxisInfo> = {\n  [Axis.X]: {\n    sliceDiameter: 3,\n    extendsThroughEntirePuzzle: true,\n    moveSourceInfos: [\n      ...makeSourceInfo([\"R\"], MoveSourceType.INDEXABLE_SLICE_NEAR, 0, 3),\n      ...makeSourceInfo([\"L'\"], MoveSourceType.INDEXABLE_SLICE_FAR, 0, 3),\n      ...makeSourceInfo([\"r\", \"Rw\"], MoveSourceType.INDEXABLE_WIDE_NEAR, 0, 2),\n      ...makeSourceInfo([\"l'\", \"Lw'\"], MoveSourceType.INDEXABLE_WIDE_FAR, 0, 2),\n      ...makeSourceInfo([\"M'\"], MoveSourceType.SPECIFIC_SLICE, 1, 2), // TODO: remove some indices?\n      ...makeSourceInfo([\"x\", \"Uv\", \"Dv'\"], MoveSourceType.ROTATION, 0, 3), // TODO: remove some indices?\n    ],\n  },\n  [Axis.Y]: {\n    sliceDiameter: 3,\n    extendsThroughEntirePuzzle: true,\n    moveSourceInfos: [\n      ...makeSourceInfo([\"U\"], MoveSourceType.INDEXABLE_SLICE_NEAR, 0, 3),\n      ...makeSourceInfo([\"D'\"], MoveSourceType.INDEXABLE_SLICE_FAR, 0, 3),\n      ...makeSourceInfo([\"u\", \"Uw\"], MoveSourceType.INDEXABLE_WIDE_NEAR, 0, 2),\n      ...makeSourceInfo([\"d'\", \"Dw'\"], MoveSourceType.INDEXABLE_WIDE_FAR, 0, 2),\n      ...makeSourceInfo([\"E'\"], MoveSourceType.SPECIFIC_SLICE, 1, 2), // TODO: remove some indices?\n      ...makeSourceInfo([\"y\", \"Uv\", \"Dv'\"], MoveSourceType.ROTATION, 0, 3), // TODO: remove some indices?\n    ],\n  },\n  [Axis.Z]: {\n    sliceDiameter: 3,\n    extendsThroughEntirePuzzle: true,\n    moveSourceInfos: [\n      ...makeSourceInfo([\"F\"], MoveSourceType.INDEXABLE_SLICE_NEAR, 0, 3),\n      ...makeSourceInfo([\"B'\"], MoveSourceType.INDEXABLE_SLICE_FAR, 0, 3),\n      ...makeSourceInfo([\"f\", \"Fw\"], MoveSourceType.INDEXABLE_WIDE_NEAR, 0, 3),\n      ...makeSourceInfo([\"b'\", \"Bw'\"], MoveSourceType.INDEXABLE_WIDE_FAR, 0, 3),\n      ...makeSourceInfo([\"S\"], MoveSourceType.SPECIFIC_SLICE, 1, 2), // TODO: remove some indices?\n      ...makeSourceInfo([\"z\", \"Fv\", \"Bv'\"], MoveSourceType.ROTATION, 0, 3), // TODO: remove some indices?\n    ],\n  },\n};\n\nconst byFamily: Record<string, { axis: Axis; moveSourceInfo: MoveSourceInfo }> =\n  {};\nfor (const [axis, info] of Object.entries(axisInfos)) {\n  for (const moveSourceInfo of info.moveSourceInfos) {\n    byFamily[moveSourceInfo.family] = { axis: axis as Axis, moveSourceInfo };\n  }\n}\n\n// TODO: lazy initialization?\nconst byAxisThenType: Record<\n  Axis,\n  Partial<Record<MoveSourceType, MoveSourceInfo[]>>\n> = {} as any; // TODO: avoid typecast (using `Object.fromEntries`?)\nfor (const axis of Object.keys(axisInfos) as Axis[]) {\n  const entry: Partial<Record<MoveSourceType, MoveSourceInfo[]>> = {};\n  byAxisThenType[axis] = entry;\n  for (const moveSourceInfo of axisInfos[axis].moveSourceInfos) {\n    (entry[moveSourceInfo.type] ??= []).push(moveSourceInfo);\n  }\n}\n\n// TODO: consolidate lookup tables?\nconst byAxisThenSpecificSlices: Record<\n  Axis,\n  Map<number, MoveSourceInfo>\n> = {} as any; // TODO: avoid typecast (using `Object.fromEntries`?)\nfor (const axis of Object.keys(axisInfos) as Axis[]) {\n  const entry: Map<number, MoveSourceInfo> = new Map();\n  byAxisThenSpecificSlices[axis] = entry;\n  for (const moveSourceInfo of axisInfos[axis].moveSourceInfos) {\n    // We only want to use the first entry per slice index (in the unlikely case there are multiple).\n    if (!entry.get(moveSourceInfo.from)) {\n      entry.set(moveSourceInfo.from, moveSourceInfo);\n    }\n  }\n}\n\nfunction firstOfType(\n  axis: Axis,\n  moveSourceType: MoveSourceType,\n): MoveSourceInfo {\n  const entry = byAxisThenType[axis][moveSourceType]?.[0];\n  if (!entry) {\n    throw new Error(\n      `Could not find a reference move (axis: ${axis}, move source type: ${moveSourceType})`,\n    );\n  }\n  return entry;\n}\n\nconst areQuantumMovesSameAxis = (\n  quantumMove1: QuantumMove,\n  quantumMove2: QuantumMove,\n) => {\n  return (\n    byFamily[quantumMove1.family].axis === byFamily[quantumMove2.family].axis\n  );\n};\n\nfunction simplestMove(\n  axis: Axis,\n  from: number,\n  to: number,\n  directedAmount: number,\n): Move {\n  if (from + 1 === to) {\n    const sliceSpecificInfo = byAxisThenSpecificSlices[axis].get(from);\n    if (sliceSpecificInfo) {\n      return new Move(\n        new QuantumMove(sliceSpecificInfo.family),\n        directedAmount * sliceSpecificInfo.direction,\n      );\n    }\n  }\n\n  const axisInfo = axisInfos[axis];\n  const { sliceDiameter } = axisInfo;\n  if (from === 0 && to === sliceDiameter) {\n    const moveSourceInfo = firstOfType(axis, MoveSourceType.ROTATION);\n    return new Move(\n      new QuantumMove(moveSourceInfo.family),\n      directedAmount * moveSourceInfo.direction,\n    );\n  }\n\n  // const specificSliceInfo = byAxisThenSpecificSlices[axis].get(from);\n  const far = from + to > sliceDiameter; // (from + to) / 2 > sliceDiameter / 2\n  if (far) {\n    [from, to] = [sliceDiameter - to, sliceDiameter - from];\n  }\n\n  let outerLayer: number | null = from + 1; // change to 1-indexed\n  let innerLayer: number | null = to; // already 1-indexed\n  const slice = outerLayer === innerLayer;\n  if (slice) {\n    innerLayer = null;\n  }\n\n  if (outerLayer === 1) {\n    outerLayer = null;\n  }\n  if (slice && outerLayer === 1) {\n    innerLayer = null;\n  }\n  if (!slice && innerLayer === 2) {\n    innerLayer = null;\n  }\n\n  const moveSourceType = slice\n    ? far\n      ? MoveSourceType.INDEXABLE_SLICE_FAR\n      : MoveSourceType.INDEXABLE_SLICE_NEAR\n    : far\n    ? MoveSourceType.INDEXABLE_WIDE_FAR\n    : MoveSourceType.INDEXABLE_WIDE_NEAR;\n  const moveSourceInfo = firstOfType(axis, moveSourceType);\n  return new Move(\n    new QuantumMove(moveSourceInfo.family, innerLayer, outerLayer),\n    directedAmount * moveSourceInfo.direction,\n  );\n}\n\nfunction simplifySameAxisMoves(\n  moves: Move[],\n  quantumMod: boolean = true, // TODO\n): Move[] {\n  if (moves.length === 0) {\n    // TODO: can we use the type system to avoid this?\n    return [];\n  }\n\n  const axis: Axis = byFamily[moves[0].family].axis;\n  const axisInfo = axisInfos[axis];\n  const { sliceDiameter } = axisInfo;\n  const sliceDeltas = new Map<number, number>();\n  let lastCandidateRange: {\n    suffixLength: number;\n    sliceDeltas: Map<number, number>;\n  } | null = null;\n\n  function adjustValue(idx: number, relativeDelta: number) {\n    let newDelta = (sliceDeltas.get(idx) ?? 0) + relativeDelta;\n    if (quantumMod) {\n      newDelta = (newDelta % 4) + (5 % 4) - 1; // TODO: Use a passed-in `modMove`?\n    }\n    if (newDelta === 0) {\n      sliceDeltas.delete(idx);\n    } else {\n      sliceDeltas.set(idx, newDelta);\n    }\n  }\n  // TODO: go as far as possible instead of trying to take all moves, e.g. simplify U y y' to U.\n  let suffixLength = 0;\n  // TODO: Reverse iterator?\n  for (const move of Array.from(moves).reverse()) {\n    suffixLength++;\n    const { moveSourceInfo } = byFamily[move.family];\n    const directedAmount = move.amount * moveSourceInfo.direction;\n    // console.log({ directedAmount });\n    switch (moveSourceInfo.type) {\n      case MoveSourceType.INDEXABLE_SLICE_NEAR: {\n        // We convert to zero-indexing\n        const idx = (move.innerLayer ?? 1) - 1;\n        adjustValue(idx, directedAmount);\n        adjustValue(idx + 1, -directedAmount);\n        break;\n      }\n      case MoveSourceType.INDEXABLE_SLICE_FAR: {\n        // We convert to zero-indexing (which cancels with the subtraction from the slice width)\n        const idx = sliceDiameter - (move.innerLayer ?? 1);\n        adjustValue(idx, directedAmount);\n        adjustValue(idx + 1, -directedAmount);\n        break;\n      }\n      case MoveSourceType.INDEXABLE_WIDE_NEAR: {\n        adjustValue((move.outerLayer ?? 1) - 1, directedAmount);\n        adjustValue(move.innerLayer ?? 2, -directedAmount);\n        break;\n      }\n      case MoveSourceType.INDEXABLE_WIDE_FAR: {\n        adjustValue(sliceDiameter - (move.innerLayer ?? 2), directedAmount);\n        adjustValue(\n          sliceDiameter - ((move.outerLayer ?? 1) - 1),\n          -directedAmount,\n        );\n        break;\n      }\n      case MoveSourceType.SPECIFIC_SLICE: {\n        // We convert to zero-indexing (which cancels with the subtraction from the slice width)\n        adjustValue(moveSourceInfo.from, directedAmount);\n        adjustValue(moveSourceInfo.to, -directedAmount);\n        break;\n      }\n      case MoveSourceType.ROTATION: {\n        adjustValue(0, directedAmount);\n        adjustValue(sliceDiameter, -directedAmount);\n        break;\n      }\n    }\n    if ([0, 2].includes(sliceDeltas.size)) {\n      lastCandidateRange = { suffixLength, sliceDeltas: new Map(sliceDeltas) };\n    }\n  }\n  if (sliceDeltas.size === 0) {\n    return [];\n  }\n  // TODO: handle this check in the destructuring assignment?\n  if (!lastCandidateRange) {\n    return moves;\n  }\n  let [from, to] = lastCandidateRange.sliceDeltas.keys();\n  if (from > to) {\n    [from, to] = [to, from];\n  }\n  const directedAmount = lastCandidateRange.sliceDeltas.get(from)!;\n  // TODO: Handle empty move\n  return [\n    ...moves.slice(0, -lastCandidateRange.suffixLength),\n    ...(directedAmount !== 0\n      ? [simplestMove(axis, from, to, directedAmount)]\n      : []),\n  ];\n}\n\nexport const puzzleSpecificSimplifyOptions333: PuzzleSpecificSimplifyOptions = {\n  quantumMoveOrder: () => 4,\n  // doQuantumMovesCommute: areQuantumMovesSameAxis,\n  axis: { areQuantumMovesSameAxis, simplifySameAxisMoves },\n};\n", "// Include 3x3x3 in the main bundle for better performance.\nimport type { ExperimentalStickering } from \"../../../twisty\";\nimport { asyncGetPuzzleGeometry } from \"../../async/async-pg3d\";\nimport { getCached } from \"../../async/lazy-cached\";\nimport { experimental3x3x3KPuzzle } from \"../../cubing-private\";\nimport type { PuzzleLoader } from \"../../PuzzleLoader\";\nimport type { StickeringMask } from \"../../stickerings/mask\";\nimport {\n  cubeLikeStickeringMask,\n  cubeLikeStickeringList,\n} from \"../../stickerings/cube-like-stickerings\";\nimport { puzzleSpecificSimplifyOptions333 } from \"./puzzle-specific-simplifications\";\n\n/** @category Specific Puzzles */\nexport const cube3x3x3: PuzzleLoader = {\n  id: \"3x3x3\",\n  fullName: \"3\u00D73\u00D73 Cube\",\n  inventedBy: [\"Ern\u0151 Rubik\"],\n  inventionYear: 1974, // https://en.wikipedia.org/wiki/Rubik%27s_Cube#Conception_and_development\n  kpuzzle: getCached(async () => {\n    return experimental3x3x3KPuzzle;\n  }),\n  svg: getCached(async () => {\n    return (\n      await import(\"../dynamic/3x3x3/puzzles-dynamic-3x3x3\")\n    ).cube3x3x3SVG;\n  }),\n  llSVG: getCached(async () => {\n    return (\n      await import(\"../dynamic/3x3x3/puzzles-dynamic-3x3x3\")\n    ).cube3x3x3LLSVG;\n  }),\n  pg: getCached(async () => {\n    return asyncGetPuzzleGeometry(\"3x3x3\");\n  }),\n  stickeringMask: (\n    stickering: ExperimentalStickering,\n  ): Promise<StickeringMask> => cubeLikeStickeringMask(cube3x3x3, stickering),\n  stickerings: () => cubeLikeStickeringList(\"3x3x3\"),\n  puzzleSpecificSimplifyOptions: puzzleSpecificSimplifyOptions333,\n};\n", "export { eventInfo, wcaEventInfo, wcaEvents, twizzleEvents } from \"./events\";\nexport type { PuzzleLoader };\nexport { cube2x2x2, cube3x3x3 };\n\nimport { CubePGPuzzleLoader, PGPuzzleLoader } from \"./async/async-pg3d\";\nimport { cube2x2x2 } from \"./implementations/2x2x2\";\nimport { cube3x3x3 } from \"./implementations/3x3x3\";\nimport { clock } from \"./implementations/clock\";\nimport { fto } from \"./implementations/fto\";\nimport { megaminx } from \"./implementations/megaminx\";\nimport { pyraminx } from \"./implementations/pyraminx\";\nimport { square1 } from \"./implementations/square1\";\nimport { kilominx } from \"./implementations/kilominx\";\nimport type { PuzzleLoader } from \"./PuzzleLoader\";\nimport { rediCube } from \"./implementations/redi-cube\";\nimport { cube4x4x4 } from \"./implementations/4x4x4\";\nimport { melindas2x2x2x2 } from \"./implementations/melindas2x2x2x2\";\n\n/** @category All Puzzles */\nexport const puzzles: Record<string, PuzzleLoader> = {\n  /******** Start of WCA Puzzles *******/\n  \"3x3x3\": cube3x3x3,\n  \"2x2x2\": cube2x2x2,\n  \"4x4x4\": cube4x4x4,\n  \"5x5x5\": new CubePGPuzzleLoader({ id: \"5x5x5\", fullName: \"5\u00D75\u00D75 Cube\" }),\n  \"6x6x6\": new CubePGPuzzleLoader({ id: \"6x6x6\", fullName: \"6\u00D76\u00D76 Cube\" }),\n  \"7x7x7\": new CubePGPuzzleLoader({ id: \"7x7x7\", fullName: \"7\u00D77\u00D77 Cube\" }),\n  \"40x40x40\": new CubePGPuzzleLoader({\n    id: \"40x40x40\",\n    fullName: \"40\u00D740\u00D740 Cube\",\n  }),\n  // 3x3x3 Blindfolded\n  // 3x3x3 Fewest Moves\n  // 3x3x3 One-Handed\n  clock,\n  megaminx: megaminx,\n  pyraminx,\n  skewb: new PGPuzzleLoader({\n    id: \"skewb\",\n    fullName: \"Skewb\",\n    inventedBy: [\"Tony Durham\"], // https://www.jaapsch.net/puzzles/skewb.htm\n    // inventionYear: 1982, // 1982 is actually the year of Hofstadter's column.\n  }),\n  square1,\n  // 4x4x4 Blindfolded\n  // 5x5x5 Blindfolded\n  /******** End of WCA puzzles ********/\n  fto: fto,\n  gigaminx: new PGPuzzleLoader({\n    id: \"gigaminx\",\n    fullName: \"Gigaminx\",\n    inventedBy: [\"Tyler Fox\"],\n    inventionYear: 2006, // Earliest date from https://www.twistypuzzles.com/cgi-bin/puzzle.cgi?pkey=1475\n  }),\n  master_tetraminx: new PGPuzzleLoader({\n    pgID: \"master tetraminx\",\n    id: \"master_tetraminx\",\n    fullName: \"Master Tetraminx\",\n    inventedBy: [\"Katsuhiko Okamoto\"], // Using master pyraminx: https://twistypuzzles.com/cgi-bin/puzzle.cgi?pkey=1352\n    inventionYear: 2002, // Using master pyraminx: https://twistypuzzles.com/cgi-bin/puzzle.cgi?pkey=1352\n  }),\n  kilominx,\n  redi_cube: rediCube,\n  melindas2x2x2x2,\n};\n", "import { KPuzzle } from \"../../../kpuzzle\";\nimport { getCached } from \"../../async/lazy-cached\";\nimport type { PuzzleLoader } from \"../../PuzzleLoader\";\n\nexport const clock: PuzzleLoader = {\n  id: \"clock\",\n  fullName: \"Clock\",\n  inventedBy: [\"Christopher C. Wiggs\", \"Christopher J. Taylor\"],\n  inventionYear: 1988, // Patent application year: https://www.jaapsch.net/puzzles/patents/us4869506.pdf\n  kpuzzle: getCached(\n    async () =>\n      new KPuzzle(\n        (await import(\"../dynamic/side-events/puzzles-dynamic-side-events\"))\n          .clockJSON,\n      ),\n  ),\n  svg: getCached(async () => {\n    return (\n      await import(\"../dynamic/side-events/puzzles-dynamic-side-events\")\n    ).clockSVG;\n  }),\n};\n", "import type { ExperimentalStickering } from \"../../twisty\";\nimport type { PuzzleLoader } from \"../PuzzleLoader\";\nimport {\n  StickeringMask,\n  PuzzleStickering,\n  StickeringManager,\n  PieceSet,\n  PieceStickering,\n} from \"./mask\";\n\nexport async function ftoStickering(\n  puzzleLoader: PuzzleLoader,\n  stickering: ExperimentalStickering,\n): Promise<StickeringMask> {\n  const kpuzzle = await puzzleLoader.kpuzzle();\n  const puzzleStickering = new PuzzleStickering(kpuzzle);\n  const m = new StickeringManager(kpuzzle);\n\n  const experimentalFTO_FC = (): PieceSet =>\n    m.and([m.move(\"U\"), m.not(m.or(m.moves([\"F\", \"BL\", \"BR\"])))]);\n  const experimentalFTO_F2T = (): PieceSet =>\n    m.and([m.move(\"U\"), m.not(m.move(\"F\"))]);\n  const experimentalFTO_SC = (): PieceSet =>\n    m.or([\n      experimentalFTO_F2T(),\n      m.and([m.move(\"F\"), m.not(m.or(m.moves([\"U\", \"BL\", \"BR\"])))]),\n    ]);\n  const experimentalFTO_L2C = (): PieceSet =>\n    m.not(\n      m.or([\n        m.and([m.move(\"U\"), m.move(\"F\")]),\n        m.and([m.move(\"F\"), m.move(\"BL\")]),\n        m.and([m.move(\"F\"), m.move(\"BR\")]),\n        m.and([m.move(\"BL\"), m.move(\"BR\")]),\n      ]),\n    );\n  const experimentalFTO_LBT = (): PieceSet =>\n    m.not(\n      m.or([\n        m.and([m.move(\"F\"), m.move(\"BL\")]),\n        m.and([m.move(\"F\"), m.move(\"BR\")]),\n        m.and([m.move(\"BL\"), m.move(\"BR\")]),\n      ]),\n    );\n\n  switch (stickering) {\n    case \"full\":\n      break;\n    case \"experimental-fto-fc\": {\n      puzzleStickering.set(\n        m.not(experimentalFTO_FC()),\n        PieceStickering.Ignored,\n      );\n      break;\n    }\n    case \"experimental-fto-f2t\": {\n      puzzleStickering.set(\n        m.not(experimentalFTO_F2T()),\n        PieceStickering.Ignored,\n      );\n      puzzleStickering.set(experimentalFTO_FC(), PieceStickering.Dim);\n      break;\n    }\n    case \"experimental-fto-sc\": {\n      puzzleStickering.set(\n        m.not(experimentalFTO_SC()),\n        PieceStickering.Ignored,\n      );\n      puzzleStickering.set(experimentalFTO_F2T(), PieceStickering.Dim);\n      break;\n    }\n    case \"experimental-fto-l2c\": {\n      puzzleStickering.set(\n        m.not(experimentalFTO_L2C()),\n        PieceStickering.Ignored,\n      );\n      puzzleStickering.set(experimentalFTO_SC(), PieceStickering.Dim);\n      break;\n    }\n    case \"experimental-fto-lbt\": {\n      puzzleStickering.set(\n        m.not(experimentalFTO_LBT()),\n        PieceStickering.Ignored,\n      );\n      puzzleStickering.set(experimentalFTO_L2C(), PieceStickering.Dim);\n      break;\n    }\n    case \"experimental-fto-l3t\": {\n      puzzleStickering.set(experimentalFTO_LBT(), PieceStickering.Dim);\n      break;\n    }\n    default:\n      console.warn(\n        `Unsupported stickering for ${puzzleLoader.id}: ${stickering}. Setting all pieces to dim.`,\n      );\n      puzzleStickering.set(m.and(m.moves([])), PieceStickering.Dim);\n  }\n  return puzzleStickering.toStickeringMask();\n}\n\nexport async function ftoStickerings(): Promise<ExperimentalStickering[]> {\n  return [\n    \"full\",\n    \"experimental-fto-fc\",\n    \"experimental-fto-f2t\",\n    \"experimental-fto-sc\",\n    \"experimental-fto-l2c\",\n    \"experimental-fto-lbt\",\n    \"experimental-fto-l3t\",\n  ];\n}\n", "import type { ExperimentalStickering } from \"../../../twisty\";\nimport { PGPuzzleLoader } from \"../../async/async-pg3d\";\nimport { getCached } from \"../../async/lazy-cached\";\nimport type { StickeringMask } from \"../../stickerings/mask\";\nimport {\n  ftoStickering,\n  ftoStickerings,\n} from \"../../stickerings/fto-stickerings\";\n\nclass FTOPuzzleLoader extends PGPuzzleLoader {\n  constructor() {\n    super({\n      pgID: \"FTO\",\n      id: \"fto\",\n      fullName: \"Face-Turning Octahedron\",\n      inventedBy: [\"Karl Rohrbach\", \"David Pitcher\"], // http://twistypuzzles.com/cgi-bin/puzzle.cgi?pkey=1663\n      inventionYear: 1983, // http://twistypuzzles.com/cgi-bin/puzzle.cgi?pkey=1663\n    });\n  }\n  stickeringMask(stickering: ExperimentalStickering): Promise<StickeringMask> {\n    return ftoStickering(this, stickering);\n  }\n  stickerings = ftoStickerings;\n  override svg = getCached(async () => {\n    return (\n      await import(\"../dynamic/unofficial/puzzles-dynamic-unofficial\")\n    ).ftoSVG;\n  });\n}\n\nexport const fto = new FTOPuzzleLoader();\n", "import type { ExperimentalStickering } from \"../../twisty\";\nimport type { PuzzleLoader } from \"../PuzzleLoader\";\nimport type { StickeringMask } from \"./mask\";\nimport {\n  cubeLikeStickeringList,\n  cubeLikeStickeringMask,\n} from \"./cube-like-stickerings\";\nimport { from } from \"../../vendor/mit/p-lazy/p-lazy\";\n\n// TODO: cache calculations?\nexport async function megaminxStickeringMask(\n  puzzleLoader: PuzzleLoader,\n  stickering: ExperimentalStickering,\n): Promise<StickeringMask> {\n  // TODO: optimize lookup instead of looking through a list\n  if ((await megaminxStickerings()).includes(stickering)) {\n    return cubeLikeStickeringMask(puzzleLoader, stickering);\n  }\n  console.warn(\n    `Unsupported stickering for ${puzzleLoader.id}: ${stickering}. Setting all pieces to dim.`,\n  );\n  return cubeLikeStickeringMask(puzzleLoader, \"full\");\n}\n\nconst megaminxStickeringListPromise: Promise<string[]> = from(() =>\n  cubeLikeStickeringList(\"megaminx\"),\n);\nexport function megaminxStickerings(): Promise<string[]> {\n  return megaminxStickeringListPromise;\n}\n", "import type { ExperimentalStickering } from \"../../../twisty\";\nimport { PGPuzzleLoader } from \"../../async/async-pg3d\";\nimport { getCached } from \"../../async/lazy-cached\";\nimport type { StickeringMask } from \"../../stickerings/mask\";\nimport {\n  megaminxStickeringMask,\n  megaminxStickerings,\n} from \"../../stickerings/megaminx-stickerings\";\n\nclass MegaminxPuzzleLoader extends PGPuzzleLoader {\n  constructor() {\n    super({\n      id: \"megaminx\",\n      fullName: \"Megaminx\",\n      // Too many simultaneous inventors to name.\n      inventionYear: 1981, // Earliest date from https://www.jaapsch.net/puzzles/megaminx.htm\n    });\n  }\n  stickeringMask(stickering: ExperimentalStickering): Promise<StickeringMask> {\n    return megaminxStickeringMask(this, stickering);\n  }\n  stickerings = megaminxStickerings;\n\n  llSVG = getCached(async () => {\n    return (\n      await import(\"../dynamic/megaminx/puzzles-dynamic-megaminx\")\n    ).megaminxLLSVG;\n  });\n}\n\nexport const megaminx = new MegaminxPuzzleLoader();\n", "import { PGPuzzleLoader } from \"../../async/async-pg3d\";\nimport { getCached } from \"../../async/lazy-cached\";\n\nclass PyraminxPuzzleLoader extends PGPuzzleLoader {\n  constructor() {\n    super({\n      id: \"pyraminx\",\n      fullName: \"Pyraminx\",\n      inventedBy: [\"Uwe Meffert\"],\n    });\n  }\n  override svg = getCached(async () => {\n    return (\n      await import(\"../dynamic/side-events/puzzles-dynamic-side-events\")\n    ).pyraminxSVG;\n  });\n}\n\nexport const pyraminx = new PyraminxPuzzleLoader();\n", "import { KPuzzle } from \"../../../kpuzzle\";\nimport { getCached } from \"../../async/lazy-cached\";\nimport type { PuzzleLoader } from \"../../PuzzleLoader\";\n\nexport const square1: PuzzleLoader = {\n  id: \"square1\",\n  fullName: \"Square-1\",\n  inventedBy: [\"Karel Hr\u0161el\", \"Vojtech Kopsk\u00FD\"],\n  inventionYear: 1990, // Czech patent application year: http://spisy.upv.cz/Patents/FullDocuments/277/277266.pdf\n  kpuzzle: getCached(\n    async () =>\n      new KPuzzle(\n        (await import(\"../dynamic/side-events/puzzles-dynamic-side-events\"))\n          .sq1HyperOrbitJSON,\n      ),\n  ),\n  svg: getCached(async () => {\n    return (\n      await import(\"../dynamic/side-events/puzzles-dynamic-side-events\")\n    ).sq1HyperOrbitSVG;\n  }),\n};\n", "import type { PuzzleLoader } from \"../..\";\nimport type { Move } from \"../../../alg\";\nimport { KPuzzle, KTransformationData } from \"../../../kpuzzle\";\nimport type { ExperimentalPGNotation } from \"../../../puzzle-geometry\";\nimport { asyncGetPuzzleGeometry } from \"../../async/async-pg3d\";\nimport { getCached } from \"../../async/lazy-cached\";\n\n// TODO: Make this consistent with Megaminx corners\nexport const kilominx: PuzzleLoader = {\n  id: \"kilominx\",\n  fullName: \"Kilominx\",\n  kpuzzle: getCached(async () => {\n    const pg = await asyncGetPuzzleGeometry(\"megaminx + chopasaurus\");\n    const kpuzzleDefinition = JSON.parse(\n      JSON.stringify(pg.getKPuzzleDefinition(true)),\n    );\n    delete kpuzzleDefinition.orbits.CENTERS;\n    delete kpuzzleDefinition.orbits.CENTERS2;\n    delete kpuzzleDefinition.startStateData.CENTERS;\n    delete kpuzzleDefinition.startStateData.CENTERS2;\n    for (const moveDefinition of Object.values(kpuzzleDefinition.moves)) {\n      delete (moveDefinition as any).CENTERS;\n      delete (moveDefinition as any).CENTERS2;\n    }\n    kpuzzleDefinition.name = \"kilominx\";\n    delete kpuzzleDefinition.experimentalPuzzleDescription;\n    const puzzleGeometry = await import(\"../../../puzzle-geometry\");\n    const pgNotation = new puzzleGeometry.ExperimentalPGNotation(\n      pg,\n      pg.getOrbitsDef(true),\n    );\n    const kpuzzle = new KPuzzle(kpuzzleDefinition, {\n      experimentalPGNotation: {\n        lookupMove: (move: Move): KTransformationData | null => {\n          if (move.toString() === \"x2\" || move.toString() === \"x2'\") {\n            return x2Transformation.transformationData;\n          }\n          return pgNotation.lookupMove(move);\n        },\n      } as ExperimentalPGNotation,\n    });\n    const x2Transformation = kpuzzle.algToTransformation(\"Rv2 Fv Uv'\");\n    kpuzzleDefinition.moves[\"x2\"] = x2Transformation;\n    return kpuzzle;\n  }),\n  svg: getCached(async () => {\n    return (\n      await import(\"../dynamic/unofficial/puzzles-dynamic-unofficial\")\n    ).kilominxSVG;\n  }),\n};\n", "import { KPuzzle } from \"../../../kpuzzle\";\nimport { getCached } from \"../../async/lazy-cached\";\nimport type { PuzzleLoader } from \"../../PuzzleLoader\";\n\nexport const rediCube: PuzzleLoader = {\n  id: \"redi_cube\",\n  fullName: \"Redi Cube\",\n  // Announced 2009-07-21: https://www.youtube.com/watch?v=cjfMzA1u3vM\n  // https://twistypuzzles.com/cgi-bin/puzzle.cgi?pkey=1520\n  inventedBy: [\"Oskar van Deventer\"],\n  inventionYear: 2009,\n  kpuzzle: getCached(\n    async () =>\n      new KPuzzle(\n        (await import(\"../dynamic/unofficial/puzzles-dynamic-unofficial\"))\n          .rediCubeJSON,\n      ),\n  ),\n  svg: async () => {\n    return (await import(\"../dynamic/unofficial/puzzles-dynamic-unofficial\"))\n      .rediCubeSVG;\n  },\n};\n", "import { CubePGPuzzleLoader } from \"../../async/async-pg3d\";\nimport { getCached } from \"../../async/lazy-cached\";\nimport type { PuzzleLoader } from \"../../PuzzleLoader\";\n\nconst cube4x4x4: PuzzleLoader = new CubePGPuzzleLoader({\n  id: \"4x4x4\",\n  fullName: \"4\u00D74\u00D74 Cube\",\n});\n\ncube4x4x4.llSVG = getCached(async () => {\n  return (\n    await import(\"../dynamic/4x4x4/puzzles-dynamic-4x4x4\")\n  ).cube4x4x4LLSVG;\n});\n\nexport { cube4x4x4 };\n", "import { KPuzzle } from \"../../../kpuzzle\";\nimport { getCached } from \"../../async/lazy-cached\";\nimport type { PuzzleLoader } from \"../../PuzzleLoader\";\n\nexport const melindas2x2x2x2: PuzzleLoader = {\n  id: \"melindas2x2x2x2\",\n  fullName: \"Melinda's 2\u00D72\u00D72\u00D72\",\n  inventedBy: [\"Melinda Green\"],\n  // inventionYear: 20__, // TODO\n  kpuzzle: getCached(\n    async () =>\n      new KPuzzle(\n        (await import(\"../dynamic/side-events/puzzles-dynamic-side-events\"))\n          .melindas2x2x2x2OrbitJSON,\n      ),\n  ),\n  svg: getCached(async () => {\n    return (\n      await import(\"../dynamic/side-events/puzzles-dynamic-side-events\")\n    ).melindas2x2x2x2OrbitSVG;\n  }),\n};\n"],
  "mappings": "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",
  "names": ["wcaEvents", "wcaEventInfo", "event", "twizzleEvents", "eventInfo", "cube2x2x2", "getCached", "KPuzzle", "asyncGetPuzzleGeometry", "stickering", "cubeLikeStickeringMask", "cubeLikeStickeringList", "makeSourceInfo", "moveStrings", "type", "from", "to", "output", "moveString", "move", "Move", "family", "direction", "axisInfos", "byFamily", "axis", "info", "moveSourceInfo", "byAxisThenType", "_a", "entry", "byAxisThenSpecificSlices", "firstOfType", "moveSourceType", "areQuantumMovesSameAxis", "quantumMove1", "quantumMove2", "simplestMove", "directedAmount", "sliceSpecificInfo", "QuantumMove", "axisInfo", "sliceDiameter", "far", "outerLayer", "innerLayer", "slice", "simplifySameAxisMoves", "moves", "quantumMod", "sliceDeltas", "lastCandidateRange", "adjustValue", "idx", "relativeDelta", "newDelta", "suffixLength", "puzzleSpecificSimplifyOptions333", "cube3x3x3", "getCached", "experimental3x3x3KPuzzle", "asyncGetPuzzleGeometry", "stickering", "cubeLikeStickeringMask", "cubeLikeStickeringList", "puzzleSpecificSimplifyOptions333", "puzzles_exports", "__export", "cube2x2x2", "cube3x3x3", "eventInfo", "puzzles", "twizzleEvents", "wcaEventInfo", "wcaEvents", "clock", "getCached", "KPuzzle", "ftoStickering", "puzzleLoader", "stickering", "kpuzzle", "puzzleStickering", "PuzzleStickering", "m", "StickeringManager", "experimentalFTO_FC", "experimentalFTO_F2T", "experimentalFTO_SC", "experimentalFTO_L2C", "experimentalFTO_LBT", "ftoStickerings", "FTOPuzzleLoader", "PGPuzzleLoader", "ftoStickerings", "getCached", "stickering", "ftoStickering", "fto", "megaminxStickeringMask", "puzzleLoader", "stickering", "megaminxStickerings", "cubeLikeStickeringMask", "megaminxStickeringListPromise", "from", "cubeLikeStickeringList", "MegaminxPuzzleLoader", "PGPuzzleLoader", "megaminxStickerings", "getCached", "stickering", "megaminxStickeringMask", "megaminx", "PyraminxPuzzleLoader", "PGPuzzleLoader", "getCached", "pyraminx", "square1", "getCached", "KPuzzle", "kilominx", "getCached", "pg", "asyncGetPuzzleGeometry", "kpuzzleDefinition", "moveDefinition", "puzzleGeometry", "pgNotation", "kpuzzle", "KPuzzle", "move", "x2Transformation", "rediCube", "getCached", "KPuzzle", "cube4x4x4", "CubePGPuzzleLoader", "getCached", "melindas2x2x2x2", "getCached", "KPuzzle", "puzzles", "cube3x3x3", "cube2x2x2", "cube4x4x4", "CubePGPuzzleLoader", "clock", "megaminx", "pyraminx", "PGPuzzleLoader", "square1", "fto", "kilominx", "rediCube", "melindas2x2x2x2"]
}
