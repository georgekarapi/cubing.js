{
  "version": 3,
  "sources": ["../../../../../src/sites/experiments.cubing.net/cubing.js/bluetooth/index.ts"],
  "sourcesContent": ["import { Alg } from \"../../../../cubing/alg\";\nimport {\n  connectSmartPuzzle,\n  OrientationEvent,\n} from \"../../../../cubing/bluetooth\";\nimport { debugKeyboardConnect, MoveEvent } from \"../../../../cubing/bluetooth\";\nimport { TwistyAlgViewer, TwistyPlayer } from \"../../../../cubing/twisty\";\n\nasync function asyncSetup(twistyPlayer: TwistyPlayer): Promise<void> {\n  console.log(\"asyncSetup\");\n  const keyboard = await debugKeyboardConnect(twistyPlayer); // TODO: attach to viewer only?\n  console.log(\"keyboard\", twistyPlayer, keyboard);\n  keyboard.addAlgLeafListener((e: MoveEvent) => {\n    console.log(\"listener\", e);\n    twistyPlayer.experimentalAddAlgLeaf(e.latestAlgLeaf, {\n      cancel: true,\n    });\n  });\n}\n\n(globalThis as any).puzzle = null;\n\nwindow.addEventListener(\"DOMContentLoaded\", async () => {\n  const twistyPlayer = new TwistyPlayer({\n    alg: new Alg(),\n  });\n  document.querySelector(\"#player\")!.appendChild(twistyPlayer);\n  document\n    .querySelector(\"#controls\")!\n    .appendChild(new TwistyAlgViewer({ twistyPlayer }));\n\n  asyncSetup(twistyPlayer);\n\n  const connectButton = document.querySelector(\"#connect\") as HTMLButtonElement;\n  connectButton.addEventListener(\"click\", async () => {\n    // const acceptAllDevices = (document.querySelector(\n    //   \"#acceptAllDevices\",\n    // ) as HTMLInputElement).checked;\n    const puzzle = await connectSmartPuzzle();\n    (globalThis as any).puzzle = puzzle;\n    // TODO\n    // try {\n    //   const state = await puzzle.getState();\n    //   twistyPlayer.experimentalSetStartStateOverride(state);\n    //   twistyPlayer.alg = new Alg();\n    // } catch (e) {\n    //   console.error(\"Unable to get initial state\", e);\n    // }\n    connectButton.textContent = `Connected: ${puzzle.name() ?? \"[unknown\"}`;\n    connectButton.disabled = true;\n\n    puzzle.addAlgLeafListener((e: MoveEvent) => {\n      twistyPlayer.experimentalAddAlgLeaf(e.latestAlgLeaf, {\n        cancel: true,\n      });\n    });\n\n    const resetButton = document.querySelector(\n      \"#player-state-reset\",\n    ) as HTMLButtonElement;\n    resetButton.addEventListener(\"click\", () => {\n      // twistyPlayer.experimentalSetStartStateOverride(null);\n      twistyPlayer.alg = new Alg();\n    });\n    resetButton.disabled = false;\n\n    // const cubeStateButton = document.querySelector(\n    //   \"#player-state-read\",\n    // ) as HTMLButtonElement;\n    // cubeStateButton.addEventListener(\"click\", async () => {\n    //   try {\n    //     twistyPlayer.experimentalSetStartStateOverride(await puzzle.getState());\n    //   } catch (e) {\n    //     twistyPlayer.experimentalSetStartStateOverride(null);\n    //   }\n    //   twistyPlayer.alg = new Alg();\n    // });\n    // cubeStateButton.disabled = false;\n\n    puzzle.addOrientationListener((_e: OrientationEvent) => {\n      // TODO\n      // const { x, y, z, w } = e.quaternion;\n      // twistyPlayer\n      //   .experimentalGetPlayer()\n      //   .cube3DView.experimentalGetCube3D()\n      //   .experimentalGetCube()\n      //   .quaternion.copy(new Quaternion(x, y, z, w));\n      // twistyPlayer\n      //   .experimentalGetAnim()\n      //   .experimentalGetScheduler()\n      //   .singleFrame();\n    });\n  });\n});\n"],
  "mappings": "wcAQA,eAAeA,EAAWC,EAA2C,CACnE,QAAQ,IAAI,YAAY,EACxB,IAAMC,EAAW,MAAMC,EAAqBF,CAAY,EACxD,QAAQ,IAAI,WAAYA,EAAcC,CAAQ,EAC9CA,EAAS,mBAAoBE,GAAiB,CAC5C,QAAQ,IAAI,WAAYA,CAAC,EACzBH,EAAa,uBAAuBG,EAAE,cAAe,CACnD,OAAQ,EACV,CAAC,CACH,CAAC,CACH,CAEC,WAAmB,OAAS,KAE7B,OAAO,iBAAiB,mBAAoB,SAAY,CACtD,IAAMH,EAAe,IAAII,EAAa,CACpC,IAAK,IAAIC,CACX,CAAC,EACD,SAAS,cAAc,SAAS,EAAG,YAAYL,CAAY,EAC3D,SACG,cAAc,WAAW,EACzB,YAAY,IAAIM,EAAgB,CAAE,aAAAN,CAAa,CAAC,CAAC,EAEpDD,EAAWC,CAAY,EAEvB,IAAMO,EAAgB,SAAS,cAAc,UAAU,EACvDA,EAAc,iBAAiB,QAAS,SAAY,CAIlD,IAAMC,EAAS,MAAMC,EAAmB,EACvC,WAAmB,OAASD,EAS7BD,EAAc,YAAc,cAAcC,EAAO,KAAK,GAAK,aAC3DD,EAAc,SAAW,GAEzBC,EAAO,mBAAoBL,GAAiB,CAC1CH,EAAa,uBAAuBG,EAAE,cAAe,CACnD,OAAQ,EACV,CAAC,CACH,CAAC,EAED,IAAMO,EAAc,SAAS,cAC3B,qBACF,EACAA,EAAY,iBAAiB,QAAS,IAAM,CAE1CV,EAAa,IAAM,IAAIK,CACzB,CAAC,EACDK,EAAY,SAAW,GAevBF,EAAO,uBAAwBG,GAAyB,CAYxD,CAAC,CACH,CAAC,CACH,CAAC",
  "names": ["asyncSetup", "twistyPlayer", "keyboard", "debugKeyboardConnect", "e", "TwistyPlayer", "Alg", "TwistyAlgViewer", "connectButton", "puzzle", "connectSmartPuzzle", "resetButton", "_e"]
}
