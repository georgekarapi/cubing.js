{
  "version": 3,
  "sources": ["../../../../src/sites/experiments.cubing.net/cubing.js/play/input/SwipeTracker.ts"],
  "sourcesContent": ["export interface ActiveSwipe {\n  sourceSector: HTMLElement;\n  currentSector: HTMLElement | null;\n  hasMovedAwayFromSourceSector: boolean;\n}\n\ninterface ActiveTouch extends ActiveSwipe {\n  touchIdentifier: number;\n}\n\nexport class SwipeTracker {\n  private sectorIndices: Map<HTMLElement, number> = new Map();\n  private activeTouchesByID: Map<number, ActiveTouch> = new Map();\n  private activeTouches: ActiveTouch[] = [];\n  constructor(\n    private sectors: HTMLElement[],\n    private swipeChangeListener: (activeSwipes: ActiveSwipe[]) => void,\n    private swipeFinishListener: (\n      source: HTMLElement,\n      target: HTMLElement,\n    ) => void,\n  ) {\n    for (const [idx, sector] of this.sectors.entries()) {\n      this.sectorIndices.set(sector, idx);\n      sector.addEventListener(\"touchstart\", this.touchStart.bind(this, sector));\n      sector.addEventListener(\"touchmove\", this.touchMove.bind(this));\n      sector.addEventListener(\"touchend\", this.touchEnd.bind(this, sector));\n      sector.addEventListener(\"touchcancel\", this.touchEnd.bind(this, sector));\n      // sector.addEventListener(\"mousedown\", this.swipeStart.bind(this, sector));\n      // sector.addEventListener(\"mouseup\", this.swipeStop.bind(this, sector));\n      // window.addEventListener(\"mouseup\", this.globalMouseup.bind(this));\n      // sector.addEventListener(\"mouseenter\", this.swipeStart.bind(this, sector));\n    }\n  }\n\n  public reset(): void {\n    this.activeTouches = [];\n    this.activeTouchesByID.clear();\n  }\n\n  public isSwipeStillActive(swipe: ActiveSwipe): boolean {\n    return this.activeTouches.includes(swipe as ActiveTouch);\n  }\n\n  // private idx(sector: HTMLElement): number {\n  //   return this.sectorIndices.get(sector);\n  // }\n\n  private dispatchTouchChange(): void {\n    this.swipeChangeListener(this.activeTouches);\n  }\n\n  private touchStart(sector: HTMLElement, e: TouchEvent): void {\n    for (const touch of e.changedTouches as any) {\n      const activeTouch = {\n        sourceSector: sector,\n        currentSector: sector,\n        hasMovedAwayFromSourceSector: false,\n        touchIdentifier: touch.identifier,\n      };\n      this.activeTouchesByID.set(touch.identifier, activeTouch);\n      this.activeTouches.push(activeTouch);\n      // console.log(\"Started touch #\", touch.identifier);\n    }\n    e.preventDefault();\n    this.dispatchTouchChange();\n  }\n\n  private touchMove(e: TouchEvent): void {\n    let anyChanged = false;\n    // console.log(\"touchMove\", sector, this.idx(sector), e);\n    // const foundIDs: Set<number> = new Set(); // TODO: is this expensive?\n    for (const touch of e.changedTouches as any) {\n      // foundIDs.add(touch.identifier);\n      const activeTouch = this.activeTouchesByID.get(touch.identifier)!;\n      if (!activeTouch) {\n        // TODO: this shouldn't happen?\n        // continue;\n      }\n      const sectorUnderSwipe = document.elementFromPoint(\n        touch.pageX,\n        touch.pageY,\n      ) as HTMLElement | null;\n\n      if (!(sectorUnderSwipe && this.sectorIndices.has(sectorUnderSwipe))) {\n        continue;\n      }\n\n      if (activeTouch.currentSector !== sectorUnderSwipe) {\n        // console.log(\n        //   `Touch #${\n        //     activeTouch.touchIdentifier\n        //   } has moved to sector #${this.idx(sectorUnderSwipe)}`\n        // );\n        activeTouch.currentSector = sectorUnderSwipe;\n        if (sectorUnderSwipe !== activeTouch.sourceSector) {\n          activeTouch.hasMovedAwayFromSourceSector = true;\n        }\n\n        anyChanged = true;\n        // console.table(x);\n      }\n    }\n    // for (const id of this.activeTouchesByID.keys()) {\n    //   if (!foundIDs.has(id)) {\n    //     this.activeTouchesByID.delete(id);\n    //   }\n    // }\n    if (anyChanged) {\n      this.dispatchTouchChange();\n    }\n  }\n\n  private touchEnd(_sector: HTMLElement, e: TouchEvent): void {\n    for (const touch of e.changedTouches as any) {\n      // console.log(\"Ended touch #\", touch.identifier);\n      // console.log(\"touchEnd\", sector, this.idx(sector), e);\n      const activeTouch = this.activeTouchesByID.get(touch.identifier)!;\n      this.activeTouchesByID.delete(touch.identifier);\n\n      const activeTouchIdx = this.activeTouches.indexOf(activeTouch);\n      this.activeTouches.splice(activeTouchIdx, 1);\n\n      this.swipeFinishListener(\n        activeTouch.sourceSector,\n        activeTouch.currentSector!,\n      );\n    }\n\n    this.dispatchTouchChange();\n  }\n  // globalMouseup(): void {}\n\n  // swipeStart(sector: HTMLElement): void {\n  //   console.log(\"start\", sector, this.idx(sector));\n  // }\n\n  // swipeStop(sector: HTMLElement): void {\n  //   console.log(\"stop\", sector, this.idx(sector));\n  // }\n}\n// const sector = document.createElement(\"div\");\n// if (this.active) {\n//   sector.addEventListener(\"touchstart\", this.swipeStart.bind(this, i, sector));\n//   sector.addEventListener(\"mousedown\", this.swipeStart.bind(this, i, sector));\n//   // div.addEventListener(\"touchenter\", this.swipeEnter.bind(this, i, div));\n//   sector.addEventListener(\"mouseenter\", this.swipeEnter.bind(this, i, sector));\n//   // div.addEventListener(\"touchleave\", this.swipeLeave.bind(this, i, div));\n//   sector.addEventListener(\"mouseleave\", this.swipeLeave.bind(this, i, sector));\n//   // div.addEventListener(\"touchend\", this.swipeEnd.bind(this, i, div));\n//   // div.addEventListener(\"mouseup\", this.swipeEnd.bind(this, i, div));\n// }\n// this.sectors.set(sector, i);\n"],
  "mappings": "AAUO,IAAMA,EAAN,KAAmB,CAIxB,YACUC,EACAC,EACAC,EAIR,CANQ,aAAAF,EACA,yBAAAC,EACA,yBAAAC,EANV,KAAQ,cAA0C,IAAI,IACtD,KAAQ,kBAA8C,IAAI,IAC1D,KAAQ,cAA+B,CAAC,EAStC,OAAW,CAACC,EAAKC,CAAM,IAAK,KAAK,QAAQ,QAAQ,EAC/C,KAAK,cAAc,IAAIA,EAAQD,CAAG,EAClCC,EAAO,iBAAiB,aAAc,KAAK,WAAW,KAAK,KAAMA,CAAM,CAAC,EACxEA,EAAO,iBAAiB,YAAa,KAAK,UAAU,KAAK,IAAI,CAAC,EAC9DA,EAAO,iBAAiB,WAAY,KAAK,SAAS,KAAK,KAAMA,CAAM,CAAC,EACpEA,EAAO,iBAAiB,cAAe,KAAK,SAAS,KAAK,KAAMA,CAAM,CAAC,CAM3E,CAEO,OAAc,CACnB,KAAK,cAAgB,CAAC,EACtB,KAAK,kBAAkB,MAAM,CAC/B,CAEO,mBAAmBC,EAA6B,CACrD,OAAO,KAAK,cAAc,SAASA,CAAoB,CACzD,CAMQ,qBAA4B,CAClC,KAAK,oBAAoB,KAAK,aAAa,CAC7C,CAEQ,WAAWD,EAAqBE,EAAqB,CAC3D,QAAWC,KAASD,EAAE,eAAuB,CAC3C,IAAME,EAAc,CAClB,aAAcJ,EACd,cAAeA,EACf,6BAA8B,GAC9B,gBAAiBG,EAAM,UACzB,EACA,KAAK,kBAAkB,IAAIA,EAAM,WAAYC,CAAW,EACxD,KAAK,cAAc,KAAKA,CAAW,CAErC,CACAF,EAAE,eAAe,EACjB,KAAK,oBAAoB,CAC3B,CAEQ,UAAUA,EAAqB,CACrC,IAAIG,EAAa,GAGjB,QAAWF,KAASD,EAAE,eAAuB,CAE3C,IAAME,EAAc,KAAK,kBAAkB,IAAID,EAAM,UAAU,EAKzDG,EAAmB,SAAS,iBAChCH,EAAM,MACNA,EAAM,KACR,EAEI,EAAEG,GAAoB,KAAK,cAAc,IAAIA,CAAgB,IAI7DF,EAAY,gBAAkBE,IAMhCF,EAAY,cAAgBE,EACxBA,IAAqBF,EAAY,eACnCA,EAAY,6BAA+B,IAG7CC,EAAa,GAGjB,CAMIA,GACF,KAAK,oBAAoB,CAE7B,CAEQ,SAASE,EAAsBL,EAAqB,CAC1D,QAAWC,KAASD,EAAE,eAAuB,CAG3C,IAAME,EAAc,KAAK,kBAAkB,IAAID,EAAM,UAAU,EAC/D,KAAK,kBAAkB,OAAOA,EAAM,UAAU,EAE9C,IAAMK,EAAiB,KAAK,cAAc,QAAQJ,CAAW,EAC7D,KAAK,cAAc,OAAOI,EAAgB,CAAC,EAE3C,KAAK,oBACHJ,EAAY,aACZA,EAAY,aACd,CACF,CAEA,KAAK,oBAAoB,CAC3B,CAUF",
  "names": ["SwipeTracker", "sectors", "swipeChangeListener", "swipeFinishListener", "idx", "sector", "swipe", "e", "touch", "activeTouch", "anyChanged", "sectorUnderSwipe", "_sector", "activeTouchIdx"]
}
