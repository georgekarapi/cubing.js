{
  "version": 3,
  "sources": ["../../../../../src/sites/experiments.cubing.net/cubing.js/robot/index.ts"],
  "sourcesContent": ["import { Alg, Move } from \"../../../../cubing/alg\";\nimport {\n  BluetoothPuzzle,\n  connectSmartPuzzle,\n  debugKeyboardConnect,\n  MoveEvent as algLeafEvent,\n} from \"../../../../cubing/bluetooth\";\nimport type { AlgLeafEvent } from \"../../../../cubing/bluetooth/smart-puzzle/bluetooth-puzzle\";\nimport { connectSmartRobot } from \"../../../../cubing/bluetooth/smart-robot\";\nimport type { GanRobot } from \"../../../../cubing/bluetooth/smart-robot/GanRobot\";\nimport { TwizzleStreamServer } from \"../../../../cubing/stream/twizzle/TwizzleStream\";\nimport \"../../../../cubing/twisty\";\nimport type { TwistyPlayer } from \"../../../../cubing/twisty\";\n\nconst BOGUS_VALUE = \"BOGUS\";\n\nclass RobotDemo {\n  // DOM\n  player: TwistyPlayer = document.querySelector(\"twisty-player\")!;\n  inputButton: HTMLButtonElement = document.querySelector(\"#input\")!;\n  getStreamsButton: HTMLButtonElement = document.querySelector(\"#get-streams\")!;\n  streamSelect: HTMLSelectElement = document.querySelector(\"#stream-select\")!;\n\n  streamServer = new TwizzleStreamServer();\n\n  outputButton: HTMLButtonElement = document.querySelector(\"#output\")!;\n  recorderButton: HTMLButtonElement = document.querySelector(\"#recorder\")!;\n  pauseButton: HTMLButtonElement = document.querySelector(\"#pause\")!;\n  // Devices\n  inputs: BluetoothPuzzle[] = [];\n  output: GanRobot | null = null;\n  paused: boolean = false;\n\n  sentStorageName: string;\n  recorderStorageName: string;\n\n  constructor() {\n    this.inputButton?.addEventListener(\n      \"click\",\n      this.connectBluetoothPuzzleInput.bind(this),\n    );\n    this.getStreamsButton.addEventListener(\"click\", this.getStreams.bind(this));\n    this.recorderButton.addEventListener(\n      \"click\",\n      this.connectRecorder.bind(this),\n    );\n    this.outputButton.addEventListener(\"click\", this.connectOutput.bind(this));\n    this.pauseButton.addEventListener(\"click\", () => this.togglePause());\n    this.connectKeyboardInput();\n\n    this.streamSelect.addEventListener(\"change\", () => this.onStreamSelect());\n    // this.getStreams();\n  }\n\n  resetSession(): void {\n    const date = Date.now();\n    console.log(\"Setting session:\", date);\n    this.sentStorageName = `robot-sent-${date}`;\n    this.recorderStorageName = `robot-recorded-${date}`;\n  }\n\n  async connectKeyboardInput(): Promise<void> {\n    const kb = await debugKeyboardConnect();\n    kb.addAlgLeafListener(this.onAlgLeaf.bind(this));\n  }\n\n  async connectRecorder(): Promise<void> {\n    this.recorderButton.disabled = true;\n    try {\n      const puzzle = await connectSmartPuzzle();\n      this.inputs.push(puzzle);\n      puzzle.addAlgLeafListener(this.recordAlgLeaf.bind(this));\n      this.recorderButton.textContent = `Recorder: ${\n        puzzle.name() ?? \"[unknown]\"\n      }`;\n    } catch {\n      this.recorderButton.disabled = false;\n    }\n  }\n\n  async getStreams(): Promise<void> {\n    const streams = await this.streamServer.streams();\n    this.streamSelect.textContent = \"\";\n    this.streamSelect.disabled = false;\n    const info = this.streamSelect.appendChild(\n      document.createElement(\"option\"),\n    );\n    info.textContent = `Select a stream (${streams.length} available)`;\n    info.value = BOGUS_VALUE;\n    for (const stream of streams) {\n      const firstSender = stream.senders[0];\n      const option = this.streamSelect.appendChild(\n        document.createElement(\"option\"),\n      );\n      option.value = stream.streamID;\n      option.textContent = `${firstSender.name} (0x${stream.streamID.slice(\n        -2,\n      )})`;\n    }\n  }\n\n  onStreamSelect(): void {\n    const streamID = this.streamSelect.value;\n    if (streamID === BOGUS_VALUE) {\n      return;\n    }\n    const stream = this.streamServer.connect(streamID);\n    stream.addEventListener(\"move\", (moveEvent: CustomEvent) => {\n      console.log(\"Incoming stream move:\", moveEvent.detail.move.toString());\n      this.onAlgLeaf({\n        latestAlgLeaf: moveEvent.detail.move,\n        timeStamp: Date.now(),\n      });\n    });\n  }\n\n  async connectBluetoothPuzzleInput(): Promise<void> {\n    this.inputButton.disabled = true;\n    try {\n      const puzzle = await connectSmartPuzzle();\n      this.inputs.push(puzzle);\n      puzzle.addAlgLeafListener(this.onAlgLeaf.bind(this));\n      this.inputButton.textContent = `Input: ${puzzle.name() ?? \"[unknown]\"}`;\n    } catch {\n      this.inputButton.disabled = false;\n    }\n    this.pauseButton.disabled = false;\n  }\n\n  async connectOutput(): Promise<void> {\n    this.outputButton.disabled = true;\n    try {\n      this.output = await connectSmartRobot();\n      this.output.experimentalDebugLog = console.log;\n      // this.output.experimentalOptions.bufferQueue = 150;\n      // this.output.experimentalOptions.postSleep = 100;\n      this.output.experimentalOptions.singleMoveFixHack = true;\n      this.output.experimentalOptions.xAngle = false;\n      this.output.experimentalDebugOnSend = (alg: Alg) => {\n        localStorage[this.sentStorageName] = `${\n          (localStorage[this.sentStorageName] ?? \"\") as string\n        }${alg.toString()} // ${Date.now()}\\n`;\n      };\n      this.outputButton.textContent = `Output: ${\n        this.output.name() ?? \"[unknown]\"\n      }`;\n    } catch {\n      this.outputButton.disabled = false;\n    }\n  }\n\n  applyAlgString(s: string): void {\n    const alg = Alg.fromString(s);\n    for (const move of alg.experimentalLeafMoves()) {\n      this.player.experimentalAddMove(move);\n    }\n    this.output?.applyMoves(Array.from(alg.experimentalLeafMoves()));\n  }\n\n  onAlgLeaf(algLeafEvent: algLeafEvent): void {\n    this.player.experimentalAddAlgLeaf(algLeafEvent.latestAlgLeaf);\n    if (this.paused) {\n      console.log(\"Paused. Not sending moves.\");\n    } else {\n      const move = algLeafEvent.latestAlgLeaf.as(Move);\n      if (!move) {\n        return;\n      }\n      this.output?.applyMoves([move]);\n    }\n  }\n\n  recordAlgLeaf(algLeafEvent: AlgLeafEvent): void {\n    localStorage[this.recorderStorageName] = `${\n      (localStorage[this.recorderStorageName] ?? \"\") as string\n    }${algLeafEvent.latestAlgLeaf.toString()} // ${Date.now()}\\n`;\n  }\n\n  togglePause(newPause?: boolean): void {\n    if (typeof newPause === \"undefined\") {\n      this.togglePause(!this.paused);\n      return;\n    }\n    console.log(\"Setting pause:\", newPause);\n    this.resetSession();\n    if (newPause) {\n      this.pauseButton.textContent = \"\u25B6\uFE0F\";\n      this.paused = newPause;\n    } else {\n      this.pauseButton.textContent = \"\u23F8\";\n      this.paused = newPause;\n    }\n  }\n}\n\n(window as any).robotDemo = new RobotDemo();\n"],
  "mappings": "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",
  "names": ["BOGUS_VALUE", "RobotDemo", "TwizzleStreamServer", "date", "debugKeyboardConnect", "puzzle", "connectSmartPuzzle", "streams", "info", "stream", "firstSender", "option", "streamID", "moveEvent", "connectSmartRobot", "alg", "s", "Alg", "move", "algLeafEvent", "Move", "newPause"]
}
