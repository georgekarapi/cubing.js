{
  "version": 3,
  "sources": ["../../../../src/sites/experiments.cubing.net/cubing.js/alg/extractor.ts"],
  "sourcesContent": ["import {\n  Alg,\n  Commutator,\n  Conjugate,\n  Grouping,\n  LineComment,\n  Move,\n  Newline,\n  Pause,\n  TraversalUp,\n  AlgNode,\n} from \"../../../../cubing/alg\";\nimport { functionFromTraversal } from \"../../../../cubing/alg\";\n\nclass Extractor extends TraversalUp<Generator<[string, AlgNode | Alg]>> {\n  *traverseAlg(alg: Alg): Generator<[string, AlgNode | Alg]> {\n    yield [\"Alg\", alg];\n    for (const algNode of alg.childAlgNodes()) {\n      yield* this.traverseAlgNode(algNode);\n    }\n  }\n\n  *traverseGrouping(grouping: Grouping): Generator<[string, AlgNode | Alg]> {\n    yield [\"Grouping\", grouping];\n    yield* this.traverseAlg(grouping.alg);\n  }\n\n  *traverseMove(move: Move): Generator<[string, AlgNode | Alg]> {\n    yield [\"Move\", move];\n  }\n\n  *traverseCommutator(\n    commutator: Commutator,\n  ): Generator<[string, AlgNode | Alg]> {\n    yield [\"Commutator\", commutator];\n    yield* this.traverseAlg(commutator.A);\n    yield* this.traverseAlg(commutator.B);\n  }\n\n  *traverseConjugate(conjugate: Conjugate): Generator<[string, AlgNode | Alg]> {\n    yield [\"Conjugate\", conjugate];\n    yield* this.traverseAlg(conjugate.A);\n    yield* this.traverseAlg(conjugate.B);\n  }\n\n  *traversePause(pause: Pause): Generator<[string, AlgNode | Alg]> {\n    yield [\"Pause\", pause];\n  }\n\n  *traverseNewline(newline: Newline): Generator<[string, AlgNode | Alg]> {\n    yield [\"Newline\", newline];\n  }\n\n  *traverseLineComment(\n    comment: LineComment,\n  ): Generator<[string, AlgNode | Alg]> {\n    yield [\"Comment\", comment];\n  }\n}\n\nexport const extract = functionFromTraversal(Extractor);\n"],
  "mappings": "+CAcA,IAAMA,EAAN,cAAwBC,CAAgD,CACtE,CAAC,YAAYC,EAA8C,CACzD,KAAM,CAAC,MAAOA,CAAG,EACjB,QAAWC,KAAWD,EAAI,cAAc,EACtC,MAAO,KAAK,gBAAgBC,CAAO,CAEvC,CAEA,CAAC,iBAAiBC,EAAwD,CACxE,KAAM,CAAC,WAAYA,CAAQ,EAC3B,MAAO,KAAK,YAAYA,EAAS,GAAG,CACtC,CAEA,CAAC,aAAaC,EAAgD,CAC5D,KAAM,CAAC,OAAQA,CAAI,CACrB,CAEA,CAAC,mBACCC,EACoC,CACpC,KAAM,CAAC,aAAcA,CAAU,EAC/B,MAAO,KAAK,YAAYA,EAAW,CAAC,EACpC,MAAO,KAAK,YAAYA,EAAW,CAAC,CACtC,CAEA,CAAC,kBAAkBC,EAA0D,CAC3E,KAAM,CAAC,YAAaA,CAAS,EAC7B,MAAO,KAAK,YAAYA,EAAU,CAAC,EACnC,MAAO,KAAK,YAAYA,EAAU,CAAC,CACrC,CAEA,CAAC,cAAcC,EAAkD,CAC/D,KAAM,CAAC,QAASA,CAAK,CACvB,CAEA,CAAC,gBAAgBC,EAAsD,CACrE,KAAM,CAAC,UAAWA,CAAO,CAC3B,CAEA,CAAC,oBACCC,EACoC,CACpC,KAAM,CAAC,UAAWA,CAAO,CAC3B,CACF,EAEaC,EAAUC,EAAsBZ,CAAS",
  "names": ["Extractor", "TraversalUp", "alg", "algNode", "grouping", "move", "commutator", "conjugate", "pause", "newline", "comment", "extract", "functionFromTraversal"]
}
