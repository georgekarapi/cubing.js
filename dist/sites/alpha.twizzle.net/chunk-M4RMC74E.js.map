{
  "version": 3,
  "sources": ["../../../src/cubing/bluetooth/debug.ts", "../../../src/cubing/bluetooth/transformer.ts", "../../../src/cubing/bluetooth/smart-puzzle/bluetooth-puzzle.ts", "../../../src/cubing/bluetooth/keyboard.ts", "../../../src/cubing/bluetooth/connect/index.ts", "../../../src/cubing/vendor/public-domain/unsafe-raw-aes/unsafe-raw-aes.ts", "../../../src/cubing/bluetooth/smart-puzzle/gan.ts", "../../../src/cubing/bluetooth/smart-puzzle/giiker.ts", "../../../src/cubing/bluetooth/smart-puzzle/gocube.ts", "../../../src/cubing/protocol/binary/orbit-indexing.ts", "../../../src/cubing/protocol/binary/binary3x3x3.ts", "../../../src/cubing/bluetooth/smart-puzzle/endianness.ts", "../../../src/cubing/bluetooth/smart-puzzle/Heykube.ts", "../../../src/cubing/bluetooth/smart-puzzle/connect.ts", "../../../src/cubing/bluetooth/smart-robot/GanRobot.ts", "../../../src/cubing/bluetooth/smart-robot/index.ts", "../../../src/cubing/bluetooth/smart-timer/GanTimer.ts", "../../../src/cubing/bluetooth/smart-timer/index.ts"],
  "sourcesContent": ["let DEBUG_LOGGING_ENABLED = false;\n\nexport function enableDebugLogging(enable: boolean): void {\n  DEBUG_LOGGING_ENABLED = enable;\n}\n\n// TODO: Remove this.\nexport function debugLog(...args: any[]): void {\n  if (!DEBUG_LOGGING_ENABLED) {\n    return;\n  }\n\n  if (console.info) {\n    console.info(...args);\n  } else {\n    console.log(...args);\n  }\n}\n", "import { Quaternion, Vector3 } from \"three\";\nimport type {\n  AlgLeafEvent,\n  OrientationEvent,\n} from \"./smart-puzzle/bluetooth-puzzle\";\n\n// TODO: Combine orientation and alg leaves into a single event to handle quaternion remapping.\nexport interface StreamTransformer {\n  // Modifies the input.\n  transformAlgLeaf(algLeafEvent: AlgLeafEvent): void;\n  // Modifies the input.\n  transformOrientation(orientationEvent: OrientationEvent): void;\n}\n\nfunction maxAxis(v: Vector3): string {\n  const maxVal = Math.max(Math.abs(v.x), Math.abs(v.y), Math.abs(v.z));\n  switch (maxVal) {\n    case v.x:\n      return \"x\";\n    case -v.x:\n      return \"-x\";\n    case v.y:\n      return \"y\";\n    case -v.y:\n      return \"-y\";\n    case v.z:\n      return \"z\";\n    case -v.z:\n      return \"-z\";\n    default:\n      throw new Error(\"Uh-oh.\");\n  }\n}\n\nconst s2 = Math.sqrt(0.5);\n\nconst m: { [s: string]: Quaternion } = {\n  \"y z\": new Quaternion(0, 0, 0, 1),\n  \"-z y\": new Quaternion(s2, 0, 0, s2),\n  \"x z\": new Quaternion(0, 0, -s2, s2),\n  \"-x z\": new Quaternion(0, 0, s2, s2),\n};\n\nexport class BasicRotationTransformer implements StreamTransformer {\n  // private reorientQuat = new Quaternion();\n\n  public transformAlgLeaf(_algLeafEvent: AlgLeafEvent): void {\n    // Nothing to do.\n  }\n\n  public transformOrientation(orientationEvent: OrientationEvent): void {\n    const { x, y, z, w } = orientationEvent.quaternion;\n    const quat = new Quaternion(x, y, z, w);\n\n    const U = new Vector3(0, 1, 0);\n    const F = new Vector3(0, 0, 1);\n    const maxU = maxAxis(U.applyQuaternion(quat));\n    const maxF = maxAxis(F.applyQuaternion(quat));\n\n    const oriQuat = m[`${maxU} ${maxF}`] || m[\"y z\"];\n\n    console.log(quat);\n    console.log(oriQuat);\n    const q2 = quat.premultiply(oriQuat);\n\n    // console.log(maxAxis(U.applyQuaternion(quat)), maxAxis(F.applyQuaternion(quat)));\n    console.log(q2);\n\n    orientationEvent.quaternion = quat;\n\n    console.log(orientationEvent.quaternion);\n  }\n}\n", "import type { AlgLeaf } from \"../../alg/alg-nodes/AlgNode\";\nimport type { KState } from \"../../kpuzzle/KState\";\nimport { BasicRotationTransformer, StreamTransformer } from \"../transformer\";\n\n/******** BluetoothPuzzle ********/\n\n// TODO: Use actual `CustomEvent`s?\n// https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\n/** @category Smart Puzzles */\nexport interface AlgLeafEvent {\n  latestAlgLeaf: AlgLeaf;\n  timeStamp: number;\n  debug?: Record<string, unknown>;\n  state?: KState;\n  quaternion?: any; // TODO: Unused\n}\n\n// TODO: Only use the `quaternion` field in the `AlgLeafEvent`?\n/** @category Smart Puzzles */\nexport interface OrientationEvent {\n  quaternion: {\n    x: number;\n    y: number;\n    z: number;\n    w: number;\n  };\n  timeStamp: number;\n  debug?: Record<string, unknown>;\n}\n\nexport interface BluetoothConfig<T> {\n  connect: (\n    server: BluetoothRemoteGATTServer,\n    device?: BluetoothDevice,\n  ) => Promise<T>;\n  // TODO: Can we reuse `filters`?\n  prefixes: string[]; // `[\"\"]` for GiiKER\n  filters: BluetoothLEScanFilter[];\n  optionalServices: BluetoothServiceUUID[];\n}\n\n// TODO: Expose device name (and/or globally unique identifier)?\n\n/** @category Smart Puzzles */\nexport abstract class BluetoothPuzzle extends EventTarget {\n  public transformers: StreamTransformer[] = [];\n  protected listeners: Array<(e: AlgLeafEvent) => void> = []; // TODO: type\n  protected orientationListeners: Array<(e: OrientationEvent) => void> = []; // TODO: type\n\n  public abstract name(): string | undefined;\n  public abstract disconnect(): void; // TODO: Can we make this reutrn (async) on success?\n\n  // TODO: require subclasses to implement this?\n  public async getState(): Promise<KState> {\n    throw new Error(\"cannot get state\");\n  }\n\n  public addAlgLeafListener(listener: (e: AlgLeafEvent) => void): void {\n    this.listeners.push(listener);\n  }\n\n  public addOrientationListener(listener: (e: OrientationEvent) => void): void {\n    this.orientationListeners.push(listener);\n  }\n\n  public experimentalAddBasicRotationTransformer(): void {\n    this.transformers.push(new BasicRotationTransformer());\n  }\n\n  protected dispatchAlgLeaf(algLeaf: AlgLeafEvent): void {\n    for (const transformer of this.transformers) {\n      transformer.transformAlgLeaf(algLeaf);\n    }\n    for (const l of this.listeners) {\n      l(algLeaf);\n    }\n  }\n\n  protected dispatchOrientation(orientationEvent: OrientationEvent): void {\n    for (const transformer of this.transformers) {\n      transformer.transformOrientation(orientationEvent);\n    }\n    const { x, y, z, w } = orientationEvent.quaternion;\n    // TODO: can we avoid mutating the source event?\n    orientationEvent.quaternion = {\n      x,\n      y,\n      z,\n      w,\n    };\n    for (const l of this.orientationListeners) {\n      // TODO: Convert quaternion.\n      l(orientationEvent);\n    }\n  }\n}\n", "import { Alg, keyToMove } from \"../alg\";\nimport type { KPuzzle } from \"../kpuzzle\";\nimport type { KState } from \"../kpuzzle/KState\";\nimport { puzzles } from \"../puzzles\";\nimport { BluetoothPuzzle } from \"./smart-puzzle/bluetooth-puzzle\";\n\n/** @category Keyboard Puzzles */\nexport class KeyboardPuzzle extends BluetoothPuzzle {\n  private puzzle: Promise<KPuzzle> = puzzles[\"3x3x3\"].kpuzzle();\n  private state: Promise<KState> = (async () =>\n    (await this.puzzle).startState())();\n\n  listener: (e: KeyboardEvent) => Promise<void>;\n\n  // TODO: Decide on the right arguments.\n  constructor(private target: Element) {\n    super();\n    // TODO: Filter out repeated keydown?\n    this.listener = this.onKeyDown.bind(this);\n    target.addEventListener(\"keydown\", this.listener);\n  }\n\n  public name(): string | undefined {\n    return \"Keyboard Input\";\n  }\n\n  disconnect() {\n    this.target.removeEventListener(\"keydown\", this.listener);\n  }\n\n  public override async getState(): Promise<KState> {\n    return this.state;\n  }\n\n  private async onKeyDown(e: KeyboardEvent): Promise<void> {\n    if (e.altKey || e.ctrlKey || e.metaKey || e.shiftKey) {\n      return;\n    }\n\n    const algLeaf = keyToMove(e);\n    if (algLeaf) {\n      const newState = (await this.state).applyAlg(new Alg([algLeaf])); // TODO\n      this.state = Promise.resolve(newState);\n      this.dispatchAlgLeaf({\n        latestAlgLeaf: algLeaf,\n        timeStamp: e.timeStamp,\n        state: newState,\n      });\n      e.preventDefault();\n    }\n  }\n}\n\n// TODO: Type\n/** @category Keyboard Puzzles */\nexport async function debugKeyboardConnect(\n  target: any = window,\n): Promise<KeyboardPuzzle> {\n  return new KeyboardPuzzle(target);\n}\n", "import { debugLog } from \"../debug\";\nimport type { BluetoothConfig } from \"../smart-puzzle/bluetooth-puzzle\";\n\n/******** requestOptions ********/\n\nfunction requestOptions<T>(\n  configs: BluetoothConfig<T>[],\n  acceptAllDevices: boolean = false,\n): RequestDeviceOptions {\n  const options = acceptAllDevices\n    ? {\n        acceptAllDevices: true,\n        optionalServices: [] as BluetoothServiceUUID[],\n      }\n    : {\n        filters: [] as BluetoothLEScanFilter[],\n        optionalServices: [] as BluetoothServiceUUID[],\n      };\n  for (const config of configs) {\n    if (!acceptAllDevices) {\n      options.filters = options.filters!.concat(config.filters);\n    }\n    options.optionalServices = options.optionalServices.concat(\n      config.optionalServices,\n    );\n  }\n  debugLog({ requestOptions: options });\n  return options;\n}\n\n/******** connect() ********/\n\nexport interface BluetoothConnectOptions {\n  acceptAllDevices?: boolean;\n}\n\n// We globally track the number of connection failures,\n// in order to offer the user recourse (accept all devices) if they're having issues.\n// This allows us to future-proof situations where a device might not show up in\n// the chooser, but works if we connect.\nlet consecutiveFailures = 0;\nconst MAX_FAILURES_BEFORE_ACCEPT_ALL_FALLBACK = 2;\n\n// TODO: Debug options to allow connecting to any device?\nexport async function bluetoothConnect<T>(\n  configs: BluetoothConfig<T>[],\n  options: BluetoothConnectOptions = {},\n): Promise<T> {\n  debugLog(\"Attempting to pair.\");\n  let device;\n  try {\n    let acceptAllDevices = options.acceptAllDevices;\n    if (\n      !acceptAllDevices &&\n      consecutiveFailures >= MAX_FAILURES_BEFORE_ACCEPT_ALL_FALLBACK\n    ) {\n      console.info(\n        `The last ${MAX_FAILURES_BEFORE_ACCEPT_ALL_FALLBACK} Bluetooth puzzle connection attempts failed. This time, the Bluetooth prompt will show all possible devices.`,\n      );\n      acceptAllDevices = true;\n    }\n    device = await navigator.bluetooth.requestDevice(\n      requestOptions<T>(configs, acceptAllDevices),\n    );\n    consecutiveFailures = 0;\n  } catch (e) {\n    consecutiveFailures++;\n    throw new Error(e);\n  }\n  debugLog(\"Device:\", device);\n\n  if (typeof device.gatt === \"undefined\") {\n    return Promise.reject(\"Device did not have a GATT server.\");\n  }\n\n  const server = await device.gatt.connect();\n  debugLog(\"Server:\", server);\n\n  const name = server.device?.name || \"\";\n\n  // TODO by reading supported matched filters or provided services.\n\n  for (const config of configs) {\n    for (const prefix of config.prefixes) {\n      if (name?.startsWith(prefix)) {\n        return config.connect(server, device);\n      }\n    }\n  }\n\n  throw Error(\"Unknown Bluetooth devive.\");\n}\n", "// Note: we could use the `unsafe-raw-aes` npm package instead. But:\n//\n// 1. This is a rather small amount of code, thanks to a clever hack of the Web Crypto API.\n// 2. This code is used (and therefore loaded) only for Gan cube decoding, and unlikely to be needed directly by projects using `cubing.js`.\n// 3. A dependency called `unsafe-raw-aes` would (rightfully) raise some eyebrows.\n//\n// So we just vendor the entire file instead.\n\nconst blockSize = 16;\nconst zeros = new Uint8Array(blockSize);\nconst paddingBlockPlaintext = new Uint8Array(\n  new Array(blockSize).fill(blockSize),\n);\nconst AES_CBC = \"AES-CBC\";\n\nexport async function importKey(keyBytes: ArrayBuffer): Promise<CryptoKey> {\n  return await crypto.subtle.importKey(\"raw\", keyBytes, AES_CBC, true, [\n    \"encrypt\",\n    \"decrypt\",\n  ]);\n}\n\nasync function unsafeEncryptBlockWithIV(\n  key: CryptoKey,\n  plaintextBlock: ArrayBuffer,\n  iv: ArrayBuffer,\n): Promise<ArrayBuffer> {\n  const cryptoResult: ArrayBuffer = await window.crypto.subtle.encrypt(\n    {\n      name: AES_CBC,\n      iv,\n    },\n    key,\n    plaintextBlock,\n  );\n  return cryptoResult.slice(0, blockSize);\n}\n\nexport async function unsafeEncryptBlock(\n  key: CryptoKey,\n  plaintextBlock: ArrayBuffer,\n): Promise<ArrayBuffer> {\n  return (await unsafeEncryptBlockWithIV(key, plaintextBlock, zeros)).slice(\n    0,\n    blockSize,\n  );\n}\n\nexport async function unsafeDecryptBlock(\n  key: CryptoKey,\n  ciphertextBlock: ArrayBuffer,\n): Promise<ArrayBuffer> {\n  const paddingBlock = await unsafeEncryptBlockWithIV(\n    key,\n    paddingBlockPlaintext,\n    ciphertextBlock,\n  );\n\n  const cbcCiphertext = new Uint8Array(2 * blockSize);\n  cbcCiphertext.set(new Uint8Array(ciphertextBlock), 0);\n  cbcCiphertext.set(new Uint8Array(paddingBlock), blockSize);\n\n  const cryptoResult: ArrayBuffer = await window.crypto.subtle.decrypt(\n    {\n      name: AES_CBC,\n      iv: zeros,\n    },\n    key,\n    cbcCiphertext,\n  );\n  return cryptoResult.slice(0, blockSize);\n}\n", "/* tslint:disable no-bitwise */\n\nimport { Quaternion } from \"three\";\nimport { Move } from \"../../alg\";\nimport type { KPuzzle, KStateData } from \"../../kpuzzle\";\nimport { KState } from \"../../kpuzzle\";\nimport { puzzles } from \"../../puzzles\";\nimport {\n  importKey,\n  unsafeDecryptBlock,\n} from \"../../vendor/public-domain/unsafe-raw-aes/unsafe-raw-aes\";\nimport { debugLog } from \"../debug\";\nimport { BluetoothConfig, BluetoothPuzzle } from \"./bluetooth-puzzle\";\n\n// This needs to be short enough to capture 6 moves (OBQTM).\nconst DEFAULT_INTERVAL_MS = 150;\n// Number of latest moves provided by the Gan 356i.\nconst MAX_LATEST_MOVES = 6;\n\nconst ganMoveToBlockMove: { [i: number]: Move } = {\n  0x00: new Move(\"U\"),\n  0x02: new Move(\"U\", -1),\n  0x03: new Move(\"R\"),\n  0x05: new Move(\"R\", -1),\n  0x06: new Move(\"F\"),\n  0x08: new Move(\"F\", -1),\n  0x09: new Move(\"D\"),\n  0x0b: new Move(\"D\", -1),\n  0x0c: new Move(\"L\"),\n  0x0e: new Move(\"L\", -1),\n  0x0f: new Move(\"B\"),\n  0x11: new Move(\"B\", -1),\n};\n\nlet homeQuatInverse: Quaternion | null = null;\n\nfunction probablyDecodedCorrectly(data: Uint8Array): boolean {\n  return (\n    data[13] < 0x12 &&\n    data[14] < 0x12 &&\n    data[15] < 0x12 &&\n    data[16] < 0x12 &&\n    data[17] < 0x12 &&\n    data[18] < 0x12\n  );\n}\n\nconst key10 = new Uint8Array([\n  198, 202, 21, 223, 79, 110, 19, 182, 119, 13, 230, 89, 58, 175, 186, 162,\n]);\nconst key11 = new Uint8Array([\n  67, 226, 91, 214, 125, 220, 120, 216, 7, 96, 163, 218, 130, 60, 1, 241,\n]);\n\n// Clean-room reverse-engineered\nasync function decryptState(\n  data: Uint8Array,\n  aesKey: CryptoKey | null,\n): Promise<Uint8Array> {\n  if (aesKey === null) {\n    return data;\n  }\n\n  const copy = new Uint8Array(data);\n  copy.set(new Uint8Array(await unsafeDecryptBlock(aesKey, copy.slice(3))), 3);\n  copy.set(\n    new Uint8Array(await unsafeDecryptBlock(aesKey, copy.slice(0, 16))),\n    0,\n  );\n\n  if (probablyDecodedCorrectly(copy)) {\n    return copy;\n  }\n\n  throw new Error(\"Invalid Gan cube state\");\n}\n\nclass PhysicalState {\n  public static async read(\n    characteristic: BluetoothRemoteGATTCharacteristic,\n    aesKey: CryptoKey | null,\n  ): Promise<PhysicalState> {\n    const value = await decryptState(\n      new Uint8Array((await characteristic.readValue()).buffer),\n      aesKey,\n    );\n    const timeStamp = Date.now();\n    // console.log(value);\n    return new PhysicalState(new DataView(value.buffer), timeStamp);\n  }\n\n  private arr: Uint8Array;\n  private arrLen = 19;\n  private constructor(private dataView: DataView, public timeStamp: number) {\n    this.arr = new Uint8Array(dataView.buffer);\n    if (this.arr.length !== this.arrLen) {\n      throw new Error(\"Unexpected array length\");\n    }\n  }\n\n  public rotQuat(): Quaternion {\n    let x = this.dataView.getInt16(0, true) / 16384;\n    let y = this.dataView.getInt16(2, true) / 16384;\n    let z = this.dataView.getInt16(4, true) / 16384;\n    [x, y, z] = [-y, z, -x];\n    const wSquared = 1 - (x * x + y * y + z * z);\n    const w = wSquared > 0 ? Math.sqrt(wSquared) : 0;\n    const quat = new Quaternion(x, y, z, w);\n\n    if (!homeQuatInverse) {\n      homeQuatInverse = quat.clone().invert();\n    }\n\n    return quat.clone().multiply(homeQuatInverse.clone());\n  }\n\n  // Loops from 255 to 0.\n  public moveCounter(): number {\n    return this.arr[12];\n  }\n\n  public numMovesSince(previousMoveCounter: number): number {\n    return (this.moveCounter() - previousMoveCounter) & 0xff;\n  }\n\n  // Due to the design of the Gan356i protocol, it's common to query for the\n  // latest physical state and find 0 moves have been performed since the last\n  // query. Therefore, it's useful to allow 0 as an argument.\n  public latestMoves(n: number): Move[] {\n    if (n < 0 || n > MAX_LATEST_MOVES) {\n      throw new Error(`Must ask for 0 to 6 latest moves. (Asked for ${n})`);\n    }\n    return Array.from(this.arr.slice(19 - n, 19)).map(\n      (i) => ganMoveToBlockMove[i],\n    );\n  }\n\n  public debugInfo(): { arr: Uint8Array } {\n    return {\n      arr: this.arr,\n    };\n  }\n}\n\n// TODO: Short IDs\nconst UUIDs = {\n  ganCubeService: \"0000fff0-0000-1000-8000-00805f9b34fb\",\n  physicalStateCharacteristic: \"0000fff5-0000-1000-8000-00805f9b34fb\",\n  actualAngleAndBatteryCharacteristic: \"0000fff7-0000-1000-8000-00805f9b34fb\",\n  faceletStatus1Characteristic: \"0000fff2-0000-1000-8000-00805f9b34fb\",\n  faceletStatus2Characteristic: \"0000fff3-0000-1000-8000-00805f9b34fb\",\n  infoService: \"0000180a-0000-1000-8000-00805f9b34fb\",\n  systemIDCharacteristic: \"00002a23-0000-1000-8000-00805f9b34fb\",\n  versionCharacteristic: \"00002a28-0000-1000-8000-00805f9b34fb\",\n};\n\nconst commands: { [cmd: string]: BufferSource } = {\n  reset: new Uint8Array([\n    0x00, 0x00, 0x24, 0x00, 0x49, 0x92, 0x24, 0x49, 0x6d, 0x92, 0xdb, 0xb6,\n    0x49, 0x92, 0xb6, 0x24, 0x6d, 0xdb,\n  ]),\n};\n\nfunction buf2hex(buffer: ArrayBuffer): string {\n  // buffer is an ArrayBuffer\n  return (\n    Array.prototype.map.call(new Uint8Array(buffer), (x: number) =>\n      `00${x.toString(16)}`.slice(-2),\n    ) as string[]\n  ).join(\" \");\n}\n\nconst reidEdgeOrder = \"UF UR UB UL DF DR DB DL FR FL BR BL\".split(\" \");\nconst reidCornerOrder = \"UFR URB UBL ULF DRF DFL DLB DBR\".split(\" \");\n\ninterface PieceInfo {\n  piece: number;\n  orientation: number;\n}\n\nfunction rotateLeft(s: string, i: number): string {\n  return s.slice(i) + s.slice(0, i);\n}\n\nconst pieceMap: { [s: string]: PieceInfo } = {};\n// TODO: Condense the for loops.\nreidEdgeOrder.forEach((edge, idx) => {\n  for (let i = 0; i < 2; i++) {\n    pieceMap[rotateLeft(edge, i)] = { piece: idx, orientation: i };\n  }\n});\nreidCornerOrder.forEach((corner, idx) => {\n  for (let i = 0; i < 3; i++) {\n    pieceMap[rotateLeft(corner, i)] = { piece: idx, orientation: i };\n  }\n});\n\nconst gan356iCornerMappings = [\n  [0, 21, 15],\n  [5, 13, 47],\n  [7, 45, 39],\n  [2, 37, 23],\n  [29, 10, 16],\n  [31, 18, 32],\n  [26, 34, 40],\n  [24, 42, 8],\n];\n\nconst gan356iEdgeMappings = [\n  [1, 22],\n  [3, 14],\n  [6, 46],\n  [4, 38],\n  [30, 17],\n  [27, 9],\n  [25, 41],\n  [28, 33],\n  [19, 12],\n  [20, 35],\n  [44, 11],\n  [43, 36],\n];\nconst faceOrder = \"URFDLB\";\n\nasync function getKey(\n  server: BluetoothRemoteGATTServer,\n): Promise<CryptoKey | null> {\n  const infoService = await server.getPrimaryService(UUIDs.infoService);\n\n  const versionCharacteristic = await infoService.getCharacteristic(\n    UUIDs.versionCharacteristic,\n  );\n  const versionBuffer = new Uint8Array(\n    (await versionCharacteristic.readValue()).buffer,\n  );\n\n  const versionValue =\n    (((versionBuffer[0] << 8) + versionBuffer[1]) << 8) + versionBuffer[2];\n  if (versionValue < 0x01_00_08) {\n    return null;\n  }\n\n  const keyXor = versionValue < 0x01_01_00 ? key10 : key11;\n\n  const systemIDCharacteristic = await infoService.getCharacteristic(\n    UUIDs.systemIDCharacteristic,\n  );\n  const systemID = new Uint8Array(\n    (await systemIDCharacteristic.readValue()).buffer,\n  ).reverse();\n\n  const key = new Uint8Array(keyXor);\n  for (let i = 0; i < systemID.length; i++) {\n    key[i] = (key[i] + systemID[i]) % 256;\n  }\n\n  return importKey(key);\n}\n\n/** @category Smart Puzzles */\nexport class GanCube extends BluetoothPuzzle {\n  // We have to perform async operations before we call the constructor.\n  public static async connect(\n    server: BluetoothRemoteGATTServer,\n  ): Promise<GanCube> {\n    const ganCubeService = await server.getPrimaryService(UUIDs.ganCubeService);\n    debugLog(\"Service:\", ganCubeService);\n\n    const physicalStateCharacteristic = await ganCubeService.getCharacteristic(\n      UUIDs.physicalStateCharacteristic,\n    );\n    debugLog(\"Characteristic:\", physicalStateCharacteristic);\n\n    const aesKey = await getKey(server);\n\n    const initialMoveCounter = (\n      await PhysicalState.read(physicalStateCharacteristic, aesKey)\n    ).moveCounter();\n    debugLog(\"Initial Move Counter:\", initialMoveCounter);\n    const cube = new GanCube(\n      await puzzles[\"3x3x3\"].kpuzzle(),\n      ganCubeService,\n      server,\n      physicalStateCharacteristic,\n      initialMoveCounter,\n      aesKey,\n    );\n    return cube;\n  }\n\n  public INTERVAL_MS: number = DEFAULT_INTERVAL_MS;\n  private intervalHandle: number | null = null;\n  private state: KState;\n  private cachedFaceletStatus1Characteristic: Promise<BluetoothRemoteGATTCharacteristic>;\n\n  private cachedFaceletStatus2Characteristic: Promise<BluetoothRemoteGATTCharacteristic>;\n\n  private cachedActualAngleAndBatteryCharacteristic: Promise<BluetoothRemoteGATTCharacteristic>;\n\n  private constructor(\n    private kpuzzle: KPuzzle,\n    private service: BluetoothRemoteGATTService,\n    private server: BluetoothRemoteGATTServer,\n    private physicalStateCharacteristic: BluetoothRemoteGATTCharacteristic,\n    private lastMoveCounter: number,\n    private aesKey: CryptoKey | null,\n  ) {\n    super();\n    this.state = kpuzzle.startState();\n    this.startTrackingMoves();\n  }\n\n  public name(): string | undefined {\n    return this.server.device.name;\n  }\n\n  disconnect(): void {\n    this.server.disconnect();\n  }\n\n  public startTrackingMoves(): void {\n    // `window.setInterval` instead of `setInterval`:\n    // https://github.com/Microsoft/TypeScript/issues/842#issuecomment-252445883\n    this.intervalHandle = window.setInterval(\n      this.intervalHandler.bind(this),\n      this.INTERVAL_MS,\n    );\n  }\n\n  public stopTrackingMoves(): void {\n    if (!this.intervalHandle) {\n      throw new Error(\"Not tracking moves!\");\n    }\n    clearInterval(this.intervalHandle);\n    this.intervalHandle = null;\n  }\n\n  // TODO: Can we ever receive async responses out of order?\n  public async intervalHandler(): Promise<void> {\n    const physicalState = await PhysicalState.read(\n      this.physicalStateCharacteristic,\n      this.aesKey,\n    );\n    let numInterveningMoves = physicalState.numMovesSince(this.lastMoveCounter);\n    // console.log(numInterveningMoves);\n    if (numInterveningMoves > MAX_LATEST_MOVES) {\n      debugLog(\n        `Too many moves! Dropping ${\n          numInterveningMoves - MAX_LATEST_MOVES\n        } moves`,\n      );\n      numInterveningMoves = MAX_LATEST_MOVES;\n    }\n    for (const move of physicalState.latestMoves(numInterveningMoves)) {\n      // console.log(move);\n      this.state = this.state.applyMove(move);\n      this.dispatchAlgLeaf({\n        latestAlgLeaf: move,\n        timeStamp: physicalState.timeStamp,\n        debug: physicalState.debugInfo(),\n        state: this.state,\n        // quaternion: physicalState.rotQuat(),\n      });\n    }\n    this.dispatchOrientation({\n      timeStamp: physicalState.timeStamp,\n      quaternion: physicalState.rotQuat(),\n    });\n    this.lastMoveCounter = physicalState.moveCounter();\n  }\n\n  public async getBattery(): Promise<number> {\n    return new Uint8Array(\n      await this.readActualAngleAndBatteryCharacteristic(),\n    )[7];\n  }\n\n  public override async getState(): Promise<KState> {\n    const arr: Uint8Array = await decryptState(\n      new Uint8Array(await this.readFaceletStatus1Characteristic()),\n      this.aesKey,\n    );\n    const stickers: number[] = [];\n    for (let i = 0; i < 18; i += 3) {\n      let v = (((arr[i ^ 1] << 8) + arr[(i + 1) ^ 1]) << 8) + arr[(i + 2) ^ 1];\n      for (let j = 0; j < 8; j++) {\n        stickers.push(v & 7);\n        v >>= 3;\n      }\n    }\n\n    const stateData: KStateData = {\n      CORNERS: {\n        pieces: [],\n        orientation: [],\n      },\n      EDGES: {\n        pieces: [],\n        orientation: [],\n      },\n      CENTERS: {\n        pieces: [0, 1, 2, 3, 4, 5],\n        orientation: [0, 0, 0, 0, 0, 0],\n      },\n    };\n\n    for (const cornerMapping of gan356iCornerMappings) {\n      const pieceInfo: PieceInfo =\n        pieceMap[cornerMapping.map((i) => faceOrder[stickers[i]]).join(\"\")];\n      stateData.CORNERS.pieces.push(pieceInfo.piece);\n      stateData.CORNERS.orientation.push(pieceInfo.orientation);\n    }\n\n    for (const edgeMapping of gan356iEdgeMappings) {\n      const pieceInfo: PieceInfo =\n        pieceMap[edgeMapping.map((i) => faceOrder[stickers[i]]).join(\"\")];\n      stateData.EDGES.pieces.push(pieceInfo.piece);\n      stateData.EDGES.orientation.push(pieceInfo.orientation);\n    }\n\n    return new KState(this.kpuzzle, stateData);\n  }\n\n  public async faceletStatus1Characteristic(): Promise<BluetoothRemoteGATTCharacteristic> {\n    this.cachedFaceletStatus1Characteristic =\n      this.cachedFaceletStatus1Characteristic ||\n      this.service.getCharacteristic(UUIDs.faceletStatus1Characteristic);\n    return this.cachedFaceletStatus1Characteristic;\n  }\n\n  public async faceletStatus2Characteristic(): Promise<BluetoothRemoteGATTCharacteristic> {\n    this.cachedFaceletStatus2Characteristic =\n      this.cachedFaceletStatus2Characteristic ||\n      this.service.getCharacteristic(UUIDs.faceletStatus2Characteristic);\n    return this.cachedFaceletStatus2Characteristic;\n  }\n\n  public async actualAngleAndBatteryCharacteristic(): Promise<BluetoothRemoteGATTCharacteristic> {\n    this.cachedActualAngleAndBatteryCharacteristic =\n      this.cachedActualAngleAndBatteryCharacteristic ||\n      this.service.getCharacteristic(UUIDs.actualAngleAndBatteryCharacteristic);\n    return this.cachedActualAngleAndBatteryCharacteristic;\n  }\n\n  public async reset(): Promise<void> {\n    const faceletStatus1Characteristic =\n      await this.faceletStatus1Characteristic();\n    await faceletStatus1Characteristic.writeValue(commands.reset);\n  }\n\n  public async readFaceletStatus1Characteristic(): Promise<ArrayBuffer> {\n    const faceletStatus1Characteristic =\n      await this.faceletStatus1Characteristic();\n    return (await faceletStatus1Characteristic.readValue()).buffer;\n  }\n\n  public async readFaceletStatus2Characteristic(): Promise<string> {\n    const faceletStatus2Characteristic =\n      await this.faceletStatus2Characteristic();\n    return buf2hex((await faceletStatus2Characteristic.readValue()).buffer);\n  }\n\n  public async readActualAngleAndBatteryCharacteristic(): Promise<ArrayBuffer> {\n    const actualAngleAndBatteryCharacteristic =\n      await this.actualAngleAndBatteryCharacteristic();\n    return (await actualAngleAndBatteryCharacteristic.readValue()).buffer;\n  }\n  // TODO\n  // private onphysicalStateCharacteristicChanged(event: any): void {\n  //   var val = event.target.value;\n  //   debugLog(val);\n  // }\n}\n\n// // TODO: Move this into a factory?\nexport const ganConfig: BluetoothConfig<BluetoothPuzzle> = {\n  connect: GanCube.connect.bind(GanCube),\n  prefixes: [\"GAN\"],\n  filters: [{ namePrefix: \"GAN\" }],\n  optionalServices: [UUIDs.ganCubeService, UUIDs.infoService],\n};\n", "/* tslint:disable no-bitwise */\n\nimport { Move } from \"../../alg\";\nimport { KState, KStateData } from \"../../kpuzzle\";\nimport { experimental3x3x3KPuzzle } from \"../../puzzles/cubing-private\";\nimport { debugLog } from \"../debug\";\nimport { BluetoothConfig, BluetoothPuzzle } from \"./bluetooth-puzzle\";\n\nconst MESSAGE_LENGTH = 20;\n\nconst UUIDs = {\n  cubeService: \"0000aadb-0000-1000-8000-00805f9b34fb\",\n  cubeCharacteristic: \"0000aadc-0000-1000-8000-00805f9b34fb\",\n};\n\n// TODO: Expose for testing.\nfunction giikerMoveToAlgMove(face: number, amount: number): Move {\n  switch (amount) {\n    case 3: {\n      amount = -1;\n      break;\n    }\n    case 9: {\n      debugLog(\"Encountered 9\", face, amount);\n      amount = -2;\n      break;\n    }\n  }\n\n  const family = [\"?\", \"B\", \"D\", \"L\", \"U\", \"R\", \"F\"][face];\n  return new Move(family, amount);\n}\n\nexport { giikerMoveToAlgMove as giikerMoveToAlgMoveForTesting };\n\nfunction giikerStateStr(giikerState: number[]): string {\n  let str = \"\";\n  str += giikerState.slice(0, 8).join(\".\");\n  str += \"\\n\";\n  str += giikerState.slice(8, 16).join(\".\");\n  str += \"\\n\";\n  str += giikerState.slice(16, 28).join(\".\");\n  str += \"\\n\";\n  str += giikerState.slice(28, 32).join(\".\");\n  str += \"\\n\";\n  str += giikerState.slice(32, 40).join(\".\");\n  return str;\n}\n\n// TODO\n// const Reid333Orbits = {\n//   \"EDGES\":   {\"numPieces\": 12, \"orientations\": 2},\n//   \"CORNERS\": {\"numPieces\": 8,  \"orientations\": 3},\n//   \"CENTERS\": {\"numPieces\": 6,  \"orientations\": 4}\n// };\n\nconst Reid333SolvedCenters = {\n  pieces: [0, 1, 2, 3, 4, 5],\n  orientation: [0, 0, 0, 0, 0, 0],\n};\n\nconst epGiiKERtoReid333: number[] = [4, 8, 0, 9, 5, 1, 3, 7, 6, 10, 2, 11];\nconst epReid333toGiiKER: number[] = [2, 5, 10, 6, 0, 4, 8, 7, 1, 3, 9, 11];\n\nconst preEO: number[] = [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0];\nconst postEO: number[] = [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0];\n\nconst cpGiiKERtoReid333: number[] = [4, 0, 3, 5, 7, 1, 2, 6];\nconst cpReid333toGiiKER: number[] = [1, 5, 6, 2, 0, 3, 7, 4];\n\nconst preCO: number[] = [1, 2, 1, 2, 2, 1, 2, 1];\nconst postCO: number[] = [2, 1, 2, 1, 1, 2, 1, 2];\n\nconst coFlip: number[] = [-1, 1, -1, 1, 1, -1, 1, -1];\n\nfunction getNibble(val: Uint8Array, i: number): number {\n  if (i % 2 === 1) {\n    return val[(i / 2) | 0] % 16;\n  }\n  return 0 | (val[(i / 2) | 0] / 16);\n}\n\nfunction probablyEncrypted(data: Uint8Array): boolean {\n  return data[18] === 0xa7;\n}\n\nconst lookup = [\n  176, 81, 104, 224, 86, 137, 237, 119, 38, 26, 193, 161, 210, 126, 150, 81, 93,\n  13, 236, 249, 89, 235, 88, 24, 113, 81, 214, 131, 130, 199, 2, 169, 39, 165,\n  171, 41,\n];\n\nfunction decryptState(data: Uint8Array): Uint8Array {\n  const offset1 = getNibble(data, 38);\n  const offset2 = getNibble(data, 39);\n  const output = new Uint8Array(MESSAGE_LENGTH);\n  for (let i = 0; i < MESSAGE_LENGTH; i++) {\n    output[i] = data[i] + lookup[offset1 + i] + lookup[offset2 + i];\n  }\n  return output;\n}\n\n// TODO: Support caching which decoding strategy worked last time.\nasync function decodeState(data: Uint8Array): Promise<Uint8Array> {\n  if (!probablyEncrypted(data)) {\n    return data;\n  }\n  return decryptState(data);\n  // TODO: Check that the decrypted state is a valid staet.\n}\n\n/** @category Smart Puzzles */\nexport class GiiKERCube extends BluetoothPuzzle {\n  public static async connect(\n    server: BluetoothRemoteGATTServer,\n  ): Promise<GiiKERCube> {\n    const cubeService = await server.getPrimaryService(UUIDs.cubeService);\n    debugLog(\"Service:\", cubeService);\n\n    const cubeCharacteristic = await cubeService.getCharacteristic(\n      UUIDs.cubeCharacteristic,\n    );\n    debugLog(\"Characteristic:\", cubeCharacteristic);\n\n    // TODO: Can we safely save the async promise instead of waiting for the response?\n\n    const originalValue = await decodeState(\n      new Uint8Array((await cubeCharacteristic.readValue()).buffer),\n    );\n    debugLog(\"Original value:\", originalValue);\n    const cube = new GiiKERCube(server, cubeCharacteristic, originalValue);\n\n    await cubeCharacteristic.startNotifications();\n    cubeCharacteristic.addEventListener(\n      \"characteristicvaluechanged\",\n      cube.onCubeCharacteristicChanged.bind(cube),\n    );\n\n    return cube;\n  }\n\n  private constructor(\n    private server: BluetoothRemoteGATTServer,\n    private cubeCharacteristic: BluetoothRemoteGATTCharacteristic,\n    private originalValue?: Uint8Array | null,\n  ) {\n    super();\n  }\n\n  public name(): string | undefined {\n    return this.server.device.name;\n  }\n\n  disconnect(): void {\n    this.server.disconnect();\n  }\n\n  public override async getState(): Promise<KState> {\n    return this.toReid333(\n      new Uint8Array((await this.cubeCharacteristic.readValue()).buffer),\n    );\n  }\n\n  private getBit(val: Uint8Array, i: number): number {\n    const n = (i / 8) | 0;\n    const shift = 7 - (i % 8);\n    return (val[n] >> shift) & 1;\n  }\n\n  private toReid333(val: Uint8Array): KState {\n    const state: KStateData = {\n      EDGES: {\n        pieces: new Array(12),\n        orientation: new Array(12),\n      },\n      CORNERS: {\n        pieces: new Array(8),\n        orientation: new Array(8),\n      },\n      CENTERS: Reid333SolvedCenters,\n    };\n\n    for (let i = 0; i < 12; i++) {\n      const gi = epReid333toGiiKER[i];\n      state.EDGES.pieces[i] = epGiiKERtoReid333[getNibble(val, gi + 16) - 1];\n      state.EDGES.orientation[i] =\n        this.getBit(val, gi + 112) ^ preEO[state.EDGES.pieces[i]] ^ postEO[i];\n    }\n    for (let i = 0; i < 8; i++) {\n      const gi = cpReid333toGiiKER[i];\n      state.CORNERS.pieces[i] = cpGiiKERtoReid333[getNibble(val, gi) - 1];\n      state.CORNERS.orientation[i] =\n        (getNibble(val, gi + 8) * coFlip[gi] +\n          preCO[state.CORNERS.pieces[i]] +\n          postCO[i]) %\n        3;\n    }\n    return new KState(experimental3x3x3KPuzzle, state);\n  }\n\n  private async onCubeCharacteristicChanged(event: any): Promise<void> {\n    const val = await decodeState(new Uint8Array(event.target.value.buffer));\n    debugLog(val);\n    debugLog(val);\n\n    if (this.isRepeatedInitialValue(val)) {\n      debugLog(\"Skipping repeated initial value.\");\n      return;\n    }\n\n    const giikerState = [];\n    for (let i = 0; i < MESSAGE_LENGTH; i++) {\n      giikerState.push(Math.floor(val[i] / 16));\n      giikerState.push(val[i] % 16);\n    }\n    debugLog(giikerState);\n    const str = giikerStateStr(giikerState);\n    debugLog(str);\n\n    this.dispatchAlgLeaf({\n      latestAlgLeaf: giikerMoveToAlgMove(giikerState[32], giikerState[33]),\n      timeStamp: event.timeStamp,\n      debug: {\n        stateStr: str,\n      },\n      state: this.toReid333(val),\n    });\n  }\n\n  private isRepeatedInitialValue(val: Uint8Array): boolean {\n    if (typeof this.originalValue === \"undefined\") {\n      // TODO: Test this branch.\n      throw new Error(\"GiiKERCube has uninitialized original value.\");\n    }\n\n    if (this.originalValue === null) {\n      return false;\n    }\n\n    const originalValue = this.originalValue;\n    // Reset the value here, so we can return early below.\n    this.originalValue = null;\n\n    debugLog(\"Comparing against original value.\");\n    for (let i = 0; i < MESSAGE_LENGTH - 2; i++) {\n      if (originalValue[i] !== val[i]) {\n        debugLog(\"Different at index \", i);\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\n// TODO: Move this into a factory?\nexport const giiKERConfig: BluetoothConfig<BluetoothPuzzle> = {\n  connect: GiiKERCube.connect.bind(GiiKERCube),\n  prefixes: [\"Gi\", \"\"], // Hack\n  filters: [\n    // Known prefixes: GiC, GiS (3x3x3), Gi2 (2x2x2)\n    // Suspected prefixes GiY, Gi3\n    { namePrefix: \"Gi\" },\n    { services: [\"0000aadb-0000-1000-8000-00805f9b34fb\"] },\n    { services: [\"0000aaaa-0000-1000-8000-00805f9b34fb\"] },\n    { services: [\"0000fe95-0000-1000-8000-00805f9b34fb\"] },\n  ],\n  optionalServices: [\n    // \"00001530-1212-efde-1523-785feabcd123\",\n    // \"0000aaaa-0000-1000-8000-00805f9b34fb\",\n    UUIDs.cubeService,\n    // \"0000180f-0000-1000-8000-00805f9b34fb\",\n    // \"0000180a-0000-1000-8000-00805f9b34fb\"\n  ],\n};\n", "import { Quaternion } from \"three\";\nimport { Alg, experimentalAppendMove, Move } from \"../../alg\";\nimport { debugLog } from \"../debug\";\nimport { BluetoothConfig, BluetoothPuzzle } from \"./bluetooth-puzzle\";\n\nconst UUIDs = {\n  goCubeService: \"6e400001-b5a3-f393-e0a9-e50e24dcca9e\",\n  goCubeStateCharacteristic: \"6e400003-b5a3-f393-e0a9-e50e24dcca9e\",\n};\n\n// https://stackoverflow.com/a/40031979\nfunction buf2hex(buffer: ArrayBuffer): string {\n  // buffer is an ArrayBuffer\n  return (\n    Array.prototype.map.call(new Uint8Array(buffer), (x: number) =>\n      `00${x.toString(16)}`.slice(-2),\n    ) as string[]\n  ).join(\" \");\n}\n\nfunction bufferToString(buffer: ArrayBuffer): string {\n  const byteView = new Uint8Array(buffer);\n  let str = \"\";\n  for (const charCode of byteView) {\n    str += String.fromCharCode(charCode);\n  }\n  return str;\n}\n\nconst moveMap: Move[] = [\n  new Move(\"B\", 1),\n  new Move(\"B\", -1),\n  new Move(\"F\", 1),\n  new Move(\"F\", -1),\n  new Move(\"U\", 1),\n  new Move(\"U\", -1),\n  new Move(\"D\", 1),\n  new Move(\"D\", -1),\n  new Move(\"R\", 1),\n  new Move(\"R\", -1),\n  new Move(\"L\", 1),\n  new Move(\"L\", -1),\n];\n\n/** @category Smart Puzzles */\nexport class GoCube extends BluetoothPuzzle {\n  // We have to perform async operations before we call the constructor.\n  public static async connect(\n    server: BluetoothRemoteGATTServer,\n  ): Promise<GoCube> {\n    const service = await server.getPrimaryService(UUIDs.goCubeService);\n    debugLog({ service });\n    const goCubeStateCharacteristic = await service.getCharacteristic(\n      UUIDs.goCubeStateCharacteristic,\n    );\n    debugLog({ goCubeStateCharacteristic });\n\n    const cube = new GoCube(server, goCubeStateCharacteristic);\n\n    await goCubeStateCharacteristic.startNotifications();\n    goCubeStateCharacteristic.addEventListener(\n      \"characteristicvaluechanged\",\n      cube.onCubeCharacteristicChanged.bind(cube),\n    );\n\n    return cube;\n  }\n\n  // public async getState(): Promise<PuzzleState> {\n  //   return new Promise((resolve, reject) => {\n  //     this.resolve = (value: any) => {\n  //       resolve(buf2hex(value.buffer) as any);\n  //     };\n  //     this.goCubeStateCharacteristic.startNotifications();\n  //   });\n  // }\n\n  private recorded: any[][] = [];\n\n  private homeQuatInverse: Quaternion | null = null;\n  private lastRawQuat: Quaternion = new Quaternion(0, 0, 0, 1);\n  private currentQuat: Quaternion = new Quaternion(0, 0, 0, 1);\n  private lastTarget: Quaternion = new Quaternion(0, 0, 0, 1);\n  private alg: Alg = new Alg();\n\n  private constructor(\n    private server: BluetoothRemoteGATTServer,\n    public goCubeStateCharacteristic: BluetoothRemoteGATTCharacteristic,\n  ) {\n    super();\n  }\n\n  disconnect(): void {\n    this.server.disconnect();\n  }\n\n  public reset(): void {\n    this.resetAlg();\n    this.resetOrientation();\n  }\n\n  public resetAlg(alg?: Alg): void {\n    this.alg = alg || new Alg();\n  }\n\n  public resetOrientation(): void {\n    this.homeQuatInverse = this.lastRawQuat.clone().invert();\n    this.currentQuat = new Quaternion(0, 0, 0, 1);\n    this.lastTarget = new Quaternion(0, 0, 0, 1);\n  }\n\n  public name(): string | undefined {\n    return this.server.device.name;\n  }\n\n  private onCubeCharacteristicChanged(event: any): void {\n    const buffer: DataView = event.target.value;\n    this.recorded.push([event.timeStamp, buf2hex(buffer.buffer)]);\n    // TODO: read bytes from buffer instead of guessing meaning based on length.\n    if (buffer.byteLength < 16) {\n      for (let i = 3; i < buffer.byteLength - 4; i += 2) {\n        const move = moveMap[buffer.getUint8(i)];\n        this.alg = experimentalAppendMove(this.alg, move);\n        this.dispatchAlgLeaf({\n          latestAlgLeaf: moveMap[buffer.getUint8(i)],\n          timeStamp: event.timeStamp,\n          debug: {\n            stateStr: buf2hex(buffer.buffer),\n          },\n        });\n      }\n    } else {\n      const coords = bufferToString(\n        buffer.buffer.slice(3, buffer.byteLength - 3),\n      )\n        .split(\"#\")\n        .map((s) => parseInt(s, 10) / 16384);\n      const quat = new Quaternion(coords[0], coords[1], coords[2], coords[3]);\n\n      this.lastRawQuat = quat.clone();\n\n      if (!this.homeQuatInverse) {\n        this.homeQuatInverse = quat.clone().invert();\n      }\n\n      const targetQuat = quat.clone().multiply(this.homeQuatInverse.clone());\n      targetQuat.y = -targetQuat.y; // GoCube axis fix.\n\n      this.lastTarget.slerp(targetQuat, 0.5);\n      this.currentQuat.rotateTowards(this.lastTarget, rotateTowardsRate);\n\n      this.dispatchOrientation({\n        quaternion: this.currentQuat,\n        timeStamp: event.timeStamp,\n      });\n    }\n  }\n}\n\nconst rotateTowardsRate = 0.5;\n\n// TODO: Move this into a factory?\nexport const goCubeConfig: BluetoothConfig<BluetoothPuzzle> = {\n  connect: GoCube.connect.bind(GoCube),\n  prefixes: [\"GoCube\", \"Rubik\"],\n  filters: [{ namePrefix: \"GoCube\" }, { namePrefix: \"Rubik\" }],\n  optionalServices: [UUIDs.goCubeService],\n};\n", "export function identityPermutation(numElems: number): number[] {\n  const arr = new Array<number>(numElems);\n  for (let i = 0; i < numElems; i++) {\n    arr[i] = i;\n  }\n  return arr;\n}\n\n// Inclusive start, exclusive end (similar to `Array.prototype.slice`)\nexport function orientationsToMask(\n  radix: number,\n  orientations: number[],\n): number {\n  let val = 0;\n  for (const orientation of orientations) {\n    val *= radix;\n    val += orientation;\n  }\n  return val;\n}\n\n// Inclusive start, exclusive end (similar to `Array.prototype.slice`)\nexport function maskToOrientations(\n  radix: number,\n  numElems: number,\n  mask: number,\n): number[] {\n  const arr = [];\n  while (mask > 0) {\n    arr.push(mask % radix);\n    mask = Math.floor(mask / radix);\n  }\n  return new Array<number>(numElems - arr.length).fill(0).concat(arr.reverse());\n}\n\n// From https://www.jaapsch.net/puzzles/compindx.htm#perm\nexport function permutationToLex(permutation: number[]): number {\n  const n = permutation.length;\n  let lexicographicIdx = 0;\n  for (let i = 0; i < n - 1; i++) {\n    lexicographicIdx = lexicographicIdx * (n - i);\n    for (let j = i + 1; j < n; j++) {\n      if (permutation[i] > permutation[j]) {\n        lexicographicIdx += 1;\n      }\n    }\n  }\n  return lexicographicIdx;\n}\n\n// From https://www.jaapsch.net/puzzles/compindx.htm#perm\nexport function lexToPermutation(\n  numPieces: number,\n  lexicographicIdx: number,\n): number[] {\n  const permutation: number[] = new Array(numPieces);\n  permutation[numPieces - 1] = 0;\n  for (let i = numPieces - 2; i >= 0; i--) {\n    permutation[i] = lexicographicIdx % (numPieces - i);\n    lexicographicIdx = Math.floor(lexicographicIdx / (numPieces - i));\n    for (let j = i + 1; j < numPieces; j++) {\n      if (permutation[j] >= permutation[i]) {\n        permutation[j] = permutation[j] + 1;\n      }\n    }\n  }\n  return permutation;\n}\n", "import { KState } from \"../../kpuzzle\";\nimport {\n  experimental3x3x3KPuzzle,\n  experimentalNormalize3x3x3Orientation,\n  experimentalPuzzleOrientation3x3x3Cache,\n  experimentalPuzzleOrientation3x3x3Idx,\n} from \"../../puzzles/cubing-private\";\nimport {\n  identityPermutation,\n  lexToPermutation,\n  maskToOrientations,\n  orientationsToMask,\n  permutationToLex,\n} from \"./orbit-indexing\";\n\n// TODO: combine with `orientPuzzle`?\nexport function reorientPuzzle(\n  state: KState,\n  idxU: number,\n  idxL: number,\n): KState {\n  return state.applyTransformation(\n    experimentalPuzzleOrientation3x3x3Cache()[idxU][idxL].invert(),\n  );\n}\n\ntype Binary3x3x3State = ArrayBuffer;\n\n// Bit lengths of the encoded components, in order.\nconst BIT_LENGTHS = [29, 12, 16, 13, 3, 2, 1, 12];\n\n// These fields are sorted by the order in which they appear in the binary format.\nexport interface Binary3x3x3Components {\n  epLex: number; // 29 bits, edge permutation\n  eoMask: number; // 12 bits, edge orientation\n  cpLex: number; // 16 bits, corner permutation\n  coMask: number; // 13 bits, corner orientation\n  poIdxU: number; // 3 bits, puzzle orientation (U face)\n  poIdxL: number; // 2 bits, puzzle orientation (L face)\n  moSupport: number; // 1 bit, center orientation support\n  moMask: number; // 12 bits, center orientation\n}\n\n// There are various clever ways to do this, but this is simple and efficient.\nfunction arraySum(arr: number[]): number {\n  let total = 0;\n  for (const entry of arr) {\n    total += entry;\n  }\n  return total;\n}\n\n// Due to limitations in JS bit operations, this is unsafe if any of the bit lengths span across the contents of more than 4 bytes.\n// - Safe: [8, 32]\n// - Unsafe: [4, 32, 4]\n// - Unsafe: [40, 4]\nfunction splitBinary(bitLengths: number[], buffy: ArrayBuffer): number[] {\n  const u8buffy = new Uint8Array(buffy);\n  let at = 0;\n  let bits = 0;\n  let accum = 0;\n  const values: number[] = [];\n  for (const bitLength of bitLengths) {\n    while (bits < bitLength) {\n      accum = (accum << 8) | u8buffy[at++];\n      bits += 8;\n    }\n    values.push((accum >> (bits - bitLength)) & ((1 << bitLength) - 1));\n    bits -= bitLength;\n  }\n  return values;\n}\n\n// See above for safety notes.\nfunction concatBinary(bitLengths: number[], values: number[]): ArrayBuffer {\n  const buffy = new Uint8Array(Math.ceil(arraySum(bitLengths) / 8));\n  let at = 0;\n  let bits = 0;\n  let accum = 0;\n  for (let i = 0; i < bitLengths.length; i++) {\n    accum = (accum << bitLengths[i]) | values[i];\n    bits += bitLengths[i];\n    while (bits >= 8) {\n      buffy[at++] = accum >> (bits - 8);\n      bits -= 8;\n    }\n  }\n  if (bits > 0) {\n    buffy[at++] = accum << (8 - bits);\n  }\n  return buffy;\n}\n\n// 0x111 (for idxU) means \"not supported\"\nfunction supportsPuzzleOrientation(components: Binary3x3x3Components): boolean {\n  return components.poIdxU !== 7;\n}\n\nexport function reid3x3x3ToBinaryComponents(\n  state: KState,\n): Binary3x3x3Components {\n  const normedState = experimentalNormalize3x3x3Orientation(state);\n\n  const epLex = permutationToLex(normedState.stateData[\"EDGES\"].pieces);\n  const eoMask = orientationsToMask(\n    2,\n    normedState.stateData[\"EDGES\"].orientation,\n  );\n  const cpLex = permutationToLex(normedState.stateData[\"CORNERS\"].pieces);\n  const coMask = orientationsToMask(\n    3,\n    normedState.stateData[\"CORNERS\"].orientation,\n  );\n  const [poIdxU, poIdxL] = experimentalPuzzleOrientation3x3x3Idx(state);\n  const moSupport = 1; // Required for now.\n  const moMask = orientationsToMask(\n    4,\n    normedState.stateData[\"CENTERS\"].orientation,\n  );\n\n  return {\n    epLex,\n    eoMask,\n    cpLex,\n    coMask,\n    poIdxU,\n    poIdxL,\n    moSupport,\n    moMask,\n  };\n}\n\nexport function binaryComponentsToTwizzleBinary(\n  components: Binary3x3x3Components,\n): Binary3x3x3State {\n  const { epLex, eoMask, cpLex, coMask, poIdxU, poIdxL, moSupport, moMask } =\n    components;\n\n  return concatBinary(BIT_LENGTHS, [\n    epLex,\n    eoMask,\n    cpLex,\n    coMask,\n    poIdxU,\n    poIdxL,\n    moSupport,\n    moMask,\n  ]);\n}\n\n/** @category Binary 3x3x3 Format */\nexport function reid3x3x3ToTwizzleBinary(state: KState): Binary3x3x3State {\n  const components: Binary3x3x3Components = reid3x3x3ToBinaryComponents(state);\n  return binaryComponentsToTwizzleBinary(components);\n}\n\n/** @category Binary 3x3x3 Format */\nexport function twizzleBinaryToBinaryComponents(\n  buffer: ArrayBuffer,\n): Binary3x3x3Components {\n  const [epLex, eoMask, cpLex, coMask, poIdxU, poIdxL, moSupport, moMask] =\n    splitBinary(BIT_LENGTHS, buffer);\n\n  return {\n    epLex,\n    eoMask,\n    cpLex,\n    coMask,\n    poIdxU,\n    poIdxL,\n    moSupport,\n    moMask,\n  };\n}\n\n/** @category Binary 3x3x3 Format */\nexport function binaryComponentsToReid3x3x3(\n  components: Binary3x3x3Components,\n): KState {\n  if (components.moSupport !== 1) {\n    throw new Error(\"Must support center orientation.\");\n  }\n\n  const normedState = new KState(experimental3x3x3KPuzzle, {\n    EDGES: {\n      pieces: lexToPermutation(12, components.epLex),\n      orientation: maskToOrientations(2, 12, components.eoMask),\n    },\n    CORNERS: {\n      pieces: lexToPermutation(8, components.cpLex),\n      orientation: maskToOrientations(3, 8, components.coMask),\n    },\n    CENTERS: {\n      pieces: identityPermutation(6),\n      orientation: maskToOrientations(4, 6, components.moMask),\n    },\n  });\n\n  if (!supportsPuzzleOrientation(components)) {\n    return normedState;\n  }\n\n  return reorientPuzzle(normedState, components.poIdxU, components.poIdxL);\n}\n\n// Returns a list of error string.\n// An empty list means validation success.\nfunction validateComponents(components: Binary3x3x3Components): string[] {\n  const errors = [];\n  if (components.epLex < 0 || components.epLex >= 479001600) {\n    errors.push(`epLex (${components.epLex}) out of range`);\n  }\n  if (components.cpLex < 0 || components.cpLex >= 40320) {\n    errors.push(`cpLex (${components.cpLex}) out of range`);\n  }\n  if (components.coMask < 0 || components.coMask >= 6561) {\n    errors.push(`coMask (${components.coMask}) out of range`);\n  }\n  if (components.poIdxU < 0 || components.poIdxU >= 6) {\n    // 0x111 (for idxU) means \"not supported\"\n    if (supportsPuzzleOrientation(components)) {\n      errors.push(`poIdxU (${components.poIdxU}) out of range`);\n    }\n  }\n  // The following cannot be (f decoded from binary properl) out of rangey.\n  if (components.eoMask < 0 || components.eoMask >= 4096) {\n    errors.push(`eoMask (${components.eoMask}) out of range`);\n  }\n  if (components.moMask < 0 || components.moMask >= 4096) {\n    errors.push(`moMask (${components.moMask}) out of range`);\n  }\n  if (components.poIdxL < 0 || components.poIdxL >= 4) {\n    errors.push(`poIdxL (${components.poIdxL}) out of range`);\n  }\n  if (components.moSupport < 0 || components.moSupport >= 2) {\n    errors.push(`moSupport (${components.moSupport}) out of range`);\n  }\n  return errors;\n}\n\n/** @category Binary 3x3x3 Format */\nexport function twizzleBinaryToReid3x3x3(buffy: ArrayBuffer): KState {\n  const components = twizzleBinaryToBinaryComponents(buffy);\n  const errors = validateComponents(components);\n  if (errors.length !== 0) {\n    throw new Error(`Invalid binary state components: ${errors.join(\", \")}`);\n  }\n  return binaryComponentsToReid3x3x3(components);\n}\n", "export function flipBitOrder(v: number, numBits: number): number {\n  let result = 0;\n  for (let i = 0; i < numBits; i++) {\n    const shiftLeft = numBits - 1 - 2 * i;\n    const unShiftedBit = v & (0b1 << i);\n    // console.log(\n    //   unShiftedBit,\n    //   shiftLeft,\n    //   shiftLeft < 0 ? unShiftedBit >> -shiftLeft : unShiftedBit << shiftLeft,\n    // );\n    result +=\n      shiftLeft < 0 ? unShiftedBit >> -shiftLeft : unShiftedBit << shiftLeft;\n  }\n  return result;\n}\n", "/* tslint:disable no-bitwise */\n\nimport { Move } from \"../../alg\";\nimport type { KPuzzle } from \"../../kpuzzle\";\nimport type { KState } from \"../../kpuzzle/KState\";\nimport {\n  experimentalBinaryComponentsToReid3x3x3,\n  experimentalTwizzleBinaryToBinaryComponents,\n} from \"../../protocol\";\nimport { puzzles } from \"../../puzzles\";\nimport { debugLog } from \"../debug\";\nimport { BluetoothConfig, BluetoothPuzzle } from \"./bluetooth-puzzle\";\nimport { flipBitOrder } from \"./endianness\";\n\n// TODO: Short IDs\nconst UUIDs = {\n  heykubeService: \"b46a791a-8273-4fc1-9e67-94d3dc2aac1c\",\n  stateCharacteristic: \"a2f41a4e-0e31-4bbc-9389-4253475481fb\",\n  batteryCharacteristic: \"fd51b3ba-99c7-49c6-9f85-5644ff56a378\",\n};\n\n/** @category Smart Puzzles */\nexport class HeykubeCube extends BluetoothPuzzle {\n  // We have to perform async operations before we call the constructor.\n  public static async connect(\n    server: BluetoothRemoteGATTServer,\n    device: BluetoothDevice,\n  ): Promise<HeykubeCube> {\n    const service = await server.getPrimaryService(UUIDs.heykubeService);\n    debugLog(\"Service:\", service);\n\n    const stateCharacteristic = await service.getCharacteristic(\n      UUIDs.stateCharacteristic,\n    );\n    debugLog(\"Characteristic:\", stateCharacteristic);\n\n    const cube = new HeykubeCube(\n      await puzzles[\"3x3x3\"].kpuzzle(),\n      service,\n      device,\n      server,\n      stateCharacteristic,\n    );\n    return cube;\n  }\n\n  private constructor(\n    _kpuzzle: KPuzzle,\n    _service: BluetoothRemoteGATTService,\n    device: BluetoothDevice,\n    private server: BluetoothRemoteGATTServer,\n    private stateCharacteristic: BluetoothRemoteGATTCharacteristic,\n  ) {\n    super();\n\n    device.addEventListener(\n      \"gattserverdisconnected\",\n      this.onDisconnect.bind(this),\n    );\n\n    this.stateCharacteristic.startNotifications();\n    this.startTrackingMoves();\n  }\n\n  public name(): string | undefined {\n    return this.server.device.name;\n  }\n\n  disconnect(): void {\n    this.server.disconnect();\n  }\n\n  onDisconnect(): void {\n    this.dispatchEvent(new CustomEvent(\"disconnect\"));\n  }\n\n  public startTrackingMoves(): void {\n    this.stateCharacteristic.addEventListener(\n      \"characteristicvaluechanged\",\n      (e: any) => this.onStateCharacteristic(e),\n    ); // TODO\n  }\n\n  // public stopTrackingMoves(): void {}\n\n  // public async getBattery(): Promise<number> {\n  //   return new Uint8Array(\n  //     await this.readActualAngleAndBatteryCharacteristic(),\n  //   )[7];\n  // }srcElement: BluetoothRemoteGATTCharacteristic\n\n  private onStateCharacteristic(event: {\n    target: BluetoothRemoteGATTCharacteristic;\n    timeStamp: number;\n  }): void {\n    const state = this.decodeState(event.target.value!);\n    // console.log(event, state.latestMove.toString(), state);\n    this.dispatchAlgLeaf({\n      latestAlgLeaf: state.latestMove,\n      timeStamp: event.timeStamp,\n      state: state.state,\n    });\n  }\n\n  private decodeState(dv: DataView): { state: KState; latestMove: Move } {\n    const moves = [\n      new Move(\"U\"),\n      new Move(\"U'\"),\n      new Move(\"B\"),\n      new Move(\"B'\"),\n      new Move(\"F\"),\n      new Move(\"F'\"),\n      null,\n      null,\n      new Move(\"L\"),\n      new Move(\"L'\"),\n      new Move(\"D\"),\n      new Move(\"D'\"),\n      new Move(\"R\"),\n      new Move(\"R'\"),\n      // null,\n      // null,\n    ];\n\n    const b2 = new Uint8Array(dv.byteLength);\n    for (let i = 0; i < dv.byteLength; i++) {\n      b2[i] = flipBitOrder(dv.getUint8(i), 8);\n    }\n    const components1 = experimentalTwizzleBinaryToBinaryComponents(\n      b2.slice(0, 11),\n    );\n    // console.log(\"sliced\", dv.byteLength, bufferToSpacedHex(b2.slice(11)));\n    const components2 = {\n      epLex: flipBitOrder(components1.epLex, 29),\n      eoMask: flipBitOrder(components1.eoMask, 12),\n      cpLex: flipBitOrder(components1.cpLex, 16),\n      coMask: flipBitOrder(components1.coMask, 13),\n      poIdxL: 0,\n      poIdxU: 0b111,\n      moSupport: 0b1, // TODO\n      moMask: 0,\n    };\n    // console.log(components2, binaryComponentsToReid3x3x3(components2));\n\n    return {\n      state: experimentalBinaryComponentsToReid3x3x3(components2),\n      latestMove: moves[b2[20] & 0b00001111]!,\n    };\n  }\n\n  public override async getState(): Promise<KState> {\n    const b1 = await this.stateCharacteristic.readValue();\n    return this.decodeState(b1).state;\n  }\n}\n\n// // TODO: Move this into a factory?\nexport const heykubeConfig: BluetoothConfig<BluetoothPuzzle> = {\n  connect: HeykubeCube.connect.bind(HeykubeCube),\n  prefixes: [\"HEYKUBE\"],\n  filters: [{ namePrefix: \"HEYKUBE\" }],\n  optionalServices: [UUIDs.heykubeService],\n};\n", "import { bluetoothConnect, BluetoothConnectOptions } from \"../connect\";\nimport type { BluetoothPuzzle } from \"./bluetooth-puzzle\";\nimport { ganConfig } from \"./gan\";\nimport { giiKERConfig } from \"./giiker\";\nimport { goCubeConfig } from \"./gocube\";\nimport { heykubeConfig } from \"./Heykube\";\n\nconst smartPuzzleConfigs = [\n  ganConfig,\n  goCubeConfig,\n  heykubeConfig,\n  giiKERConfig, // GiiKER must be last, due to Xiaomi naming. TODO: enforce this using tests.\n];\n\n/** @category Smart Puzzles */\nexport async function connectSmartPuzzle(\n  options?: BluetoothConnectOptions,\n): Promise<BluetoothPuzzle> {\n  return bluetoothConnect<BluetoothPuzzle>(smartPuzzleConfigs, options);\n}\n", "import { Alg, Move } from \"../../alg\";\nimport { cube3x3x3 } from \"../../puzzles\";\nimport type { BluetoothConfig } from \"../smart-puzzle/bluetooth-puzzle\";\n\n// TODO: Remove this. It's only used for debugging.\nfunction buf2hex(buffer: ArrayBuffer): string {\n  // buffer is an ArrayBuffer\n  return (\n    Array.prototype.map.call(new Uint8Array(buffer), (x: number) =>\n      `00${x.toString(16)}`.slice(-2),\n    ) as string[]\n  ).join(\" \");\n}\n\nconst MAX_NIBBLES_PER_WRITE = 18 * 2;\nconst QUANTUM_TURN_DURATION_MS = 150;\nconst DOUBLE_TURN_DURATION_MS = 250;\n\nconst U_D_SWAP = new Alg(\"F B R2 L2 B' F'\");\nconst U_D_UNSWAP = U_D_SWAP.invert(); // TODO: make `cubing.js` clever enough to be able to reuse the regular swap.\nconst F_B_SWAP = new Alg(\"U D R2 L2 D' U'\");\nconst F_B_UNSWAP = F_B_SWAP.invert();\n\n// TODO: Short IDs\nconst UUIDs = {\n  ganRobotService: \"0000fff0-0000-1000-8000-00805f9b34fb\",\n  statusCharacteristic: \"0000fff2-0000-1000-8000-00805f9b34fb\",\n  moveCharacteristic: \"0000fff3-0000-1000-8000-00805f9b34fb\",\n};\n\nconst moveMap: Record<string, number> = {\n  R: 0,\n  R2: 1,\n  \"R2'\": 1,\n  \"R'\": 2,\n  F: 3,\n  F2: 4,\n  \"F2'\": 4,\n  \"F'\": 5,\n  D: 6,\n  D2: 7,\n  \"D2'\": 7,\n  \"D'\": 8,\n  L: 9,\n  L2: 10,\n  \"L2'\": 10,\n  \"L'\": 11,\n  B: 12,\n  B2: 13,\n  \"B2'\": 13,\n  \"B'\": 14,\n};\n\nconst moveMapX: Record<string, number> = {\n  R: 0,\n  R2: 1,\n  \"R2'\": 1,\n  \"R'\": 2,\n  U: 3,\n  U2: 4,\n  \"U2'\": 4,\n  \"U'\": 5,\n  F: 6,\n  F2: 7,\n  \"F2'\": 7,\n  \"F'\": 8,\n  L: 9,\n  L2: 10,\n  \"L2'\": 10,\n  \"L'\": 11,\n  D: 12,\n  D2: 13,\n  \"D2'\": 13,\n  \"D'\": 14,\n};\n\nfunction isDoubleTurnNibble(nibble: number): boolean {\n  return nibble % 3 === 1;\n}\n\nfunction nibbleDuration(nibble: number): number {\n  return isDoubleTurnNibble(nibble)\n    ? DOUBLE_TURN_DURATION_MS\n    : QUANTUM_TURN_DURATION_MS;\n}\n\nfunction throwInvalidMove(move: Move) {\n  console.error(\"invalid move\", move, move.toString());\n  throw new Error(\"invalid move!\");\n}\n\nfunction sleep(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport interface GanRobotStatus {\n  movesRemaining: number;\n}\n\ninterface GanRobotOptions {\n  xAngle: boolean;\n  singleMoveFixHack: boolean;\n  bufferQueue: number;\n  postSleep: number;\n}\n\n/** @category Robots */\nexport class GanRobot extends EventTarget {\n  experimentalDebugOnSend: ((alg: Alg) => void) | null = null;\n  experimentalDebugLog: typeof console.log = () => {};\n\n  // Because our Bluetooth connection code is set up not to know what kind of device is connecting, we put these options directly on the class.\n  experimentalOptions: GanRobotOptions = {\n    xAngle: false,\n    singleMoveFixHack: false,\n    bufferQueue: 0,\n    postSleep: 0,\n  };\n\n  constructor(\n    _service: BluetoothRemoteGATTService,\n    private server: BluetoothRemoteGATTServer,\n    device: BluetoothDevice,\n    private statusCharacteristic: BluetoothRemoteGATTCharacteristic,\n    private moveCharacteristic: BluetoothRemoteGATTCharacteristic,\n  ) {\n    super();\n    device.addEventListener(\n      \"gattserverdisconnected\",\n      this.onDisconnect.bind(this),\n    );\n  }\n\n  // We have to perform async operations before we call the constructor.\n  static async connect(\n    server: BluetoothRemoteGATTServer,\n    device: BluetoothDevice,\n  ) {\n    const ganTimerService = await server.getPrimaryService(\n      UUIDs.ganRobotService,\n    );\n    const statusCharacteristic = await ganTimerService.getCharacteristic(\n      UUIDs.statusCharacteristic,\n    );\n    const moveCharacteristic = await ganTimerService.getCharacteristic(\n      UUIDs.moveCharacteristic,\n    );\n    const timer = new GanRobot(\n      ganTimerService,\n      server,\n      device,\n      statusCharacteristic,\n      moveCharacteristic,\n    );\n    return timer;\n  }\n\n  public name(): string | undefined {\n    return this.server.device.name;\n  }\n\n  disconnect(): void {\n    this.server.disconnect();\n  }\n\n  onDisconnect(): void {\n    this.dispatchEvent(new CustomEvent(\"disconnect\"));\n  }\n\n  private moveToNibble(move: Move): number {\n    const nibble =\n      (this.experimentalOptions.xAngle ? moveMapX : moveMap)[move.toString()] ??\n      null;\n    if (nibble === null) {\n      throwInvalidMove(move);\n    }\n    return nibble;\n  }\n\n  private async writeNibbles(nibbles: number[]): Promise<void> {\n    if (nibbles.length > MAX_NIBBLES_PER_WRITE) {\n      throw new Error(\n        `Can only write ${MAX_NIBBLES_PER_WRITE} nibbles at a time!`,\n      );\n    }\n    // const byteLength = Math.ceil(nibbles.length / 2);\n    const bytes = new Uint8Array(18);\n    let i: number;\n    for (i = 0; i < nibbles.length; i++) {\n      const byteIdx = Math.floor(i / 2);\n      bytes[byteIdx] += nibbles[i];\n      if (i % 2 === 0) {\n        bytes[byteIdx] *= 0x10;\n      }\n    }\n    if (nibbles.length % 2 === 1) {\n      bytes[Math.ceil(nibbles.length / 2) - 1] += 0xf;\n    }\n    for (let i = Math.ceil(nibbles.length / 2); i < 18; i++) {\n      bytes[i] = 0xff;\n    }\n    let sleepDuration = 0;\n    for (const nibble of nibbles) {\n      sleepDuration += nibbleDuration(nibble);\n    }\n    this.experimentalDebugLog(\"WRITING:\", buf2hex(bytes));\n    await this.moveCharacteristic.writeValue(bytes);\n    await sleep(sleepDuration * 0.75);\n    while ((await this.getStatus()).movesRemaining > 0) {\n      // repeat\n    }\n    await sleep(this.experimentalOptions.postSleep);\n  }\n\n  private async getStatus(): Promise<GanRobotStatus> {\n    const statusBytes = new Uint8Array(\n      (await this.statusCharacteristic.readValue()).buffer,\n    );\n    this.experimentalDebugLog(\"moves remaining:\", statusBytes[0]);\n    return {\n      movesRemaining: statusBytes[0],\n    };\n  }\n\n  locked: boolean = false;\n  processQueue(): void {}\n\n  private moveQueue: Alg = new Alg();\n  // TODO: Don't let this resolve until the move is done?\n  private async queueMoves(moves: Alg): Promise<void> {\n    this.moveQueue = this.moveQueue.concat(moves).experimentalSimplify({\n      puzzleSpecificSimplifyOptions: cube3x3x3.puzzleSpecificSimplifyOptions,\n    });\n    if (!this.locked) {\n      // TODO: We're currently iterating over alg nodes instead of leaves to avoid \"zip bomps\".\n      try {\n        this.locked = true;\n        if (this.moveQueue.experimentalNumChildAlgNodes() === 1) {\n          await sleep(this.experimentalOptions.bufferQueue);\n        }\n        // await this.writeNibbles([0xf, 0xf]);\n        while (this.moveQueue.experimentalNumChildAlgNodes() > 0) {\n          let algNodes = Array.from(this.moveQueue.childAlgNodes());\n          if (\n            this.experimentalOptions.singleMoveFixHack &&\n            algNodes.length === 1\n          ) {\n            const move = algNodes[0] as Move;\n            if (move.amount === 2) {\n              algNodes = [\n                move.modified({ amount: 1 }),\n                move.modified({ amount: 1 }),\n              ];\n            } else {\n              algNodes = [\n                move.modified({ amount: -move.amount }),\n                move.modified({ amount: 2 }),\n              ];\n            }\n          }\n          const moves = algNodes.splice(0, MAX_NIBBLES_PER_WRITE);\n          const nibbles: number[] = moves.map(this.moveToNibble.bind(this));\n          const sending = new Alg(moves);\n          this.experimentalDebugLog(\"SENDING\", sending.toString());\n          if (this.experimentalDebugOnSend) {\n            this.experimentalDebugOnSend(sending);\n          }\n          const write = this.writeNibbles(nibbles);\n          this.moveQueue = new Alg(algNodes);\n          await write;\n        }\n      } finally {\n        this.locked = false;\n      }\n    }\n  }\n\n  async applyMoves(moves: Iterable<Move>): Promise<void> {\n    // const nibbles: number[] = [];\n    for (const move of moves) {\n      const str = move.toString();\n      if (str in (this.experimentalOptions.xAngle ? moveMapX : moveMap)) {\n        await this.queueMoves(new Alg([move]));\n      } else if (\n        move.family === (this.experimentalOptions.xAngle ? \"B\" : \"U\")\n      ) {\n        // We purposely send just the swap, so that U2 will get cancelled\n        await Promise.all([\n          this.queueMoves(\n            this.experimentalOptions.xAngle ? F_B_SWAP : U_D_SWAP,\n          ),\n          this.queueMoves(\n            new Alg([\n              move.modified({\n                family: this.experimentalOptions.xAngle ? \"F\" : \"D\",\n              }),\n            ]).concat(\n              this.experimentalOptions.xAngle ? F_B_UNSWAP : U_D_UNSWAP,\n            ),\n          ),\n        ]);\n      }\n    }\n  }\n}\n\n// // TODO: Move this into a factory?\nexport const ganTimerConfig: BluetoothConfig<GanRobot> = {\n  connect: GanRobot.connect.bind(GanRobot),\n  prefixes: [\"GAN\"],\n  filters: [{ namePrefix: \"GAN\" }],\n  optionalServices: [UUIDs.ganRobotService],\n};\n", "import { bluetoothConnect, BluetoothConnectOptions } from \"../connect\";\nimport type { BluetoothConfig } from \"../smart-puzzle/bluetooth-puzzle\";\nimport { GanRobot, ganTimerConfig } from \"./GanRobot\";\n\n/** @category Robots */\nexport type BluetoothRobot = GanRobot; // TODO\n\nconst smartRobotConfigs: BluetoothConfig<BluetoothRobot>[] = [ganTimerConfig];\n\n/** @category Robots */\nexport async function connectSmartRobot(\n  options?: BluetoothConnectOptions,\n): Promise<BluetoothRobot> {\n  return bluetoothConnect<BluetoothRobot>(smartRobotConfigs, options);\n}\n", "import type { MillisecondTimestamp } from \"../../twisty/controllers/AnimationTypes\";\nimport type { BluetoothConfig } from \"../smart-puzzle/bluetooth-puzzle\";\n\n// TODO: Short IDs\nconst UUIDs = {\n  ganTimerService: \"0000fff0-0000-1000-8000-00805f9b34fb\",\n  timeCharacteristic: \"0000fff2-0000-1000-8000-00805f9b34fb\",\n};\n\ninterface GanTimerDetail {\n  currentTime: MillisecondTimestamp;\n  latestTimes: [\n    MillisecondTimestamp,\n    MillisecondTimestamp,\n    MillisecondTimestamp,\n  ];\n}\n\n/** @category Timers */\nexport class GanTimer extends EventTarget {\n  private polling = false;\n  private previousDetail: GanTimerDetail | null = null;\n\n  constructor(\n    _service: BluetoothRemoteGATTService,\n    private server: BluetoothRemoteGATTServer,\n    device: BluetoothDevice,\n    private timeCharacteristic: BluetoothRemoteGATTCharacteristic,\n  ) {\n    super();\n    this.startPolling();\n    console.log(server);\n    device.addEventListener(\n      \"gattserverdisconnected\",\n      this.onDisconnect.bind(this),\n    );\n  }\n\n  // We have to perform async operations before we call the constructor.\n  static async connect(\n    server: BluetoothRemoteGATTServer,\n    device: BluetoothDevice,\n  ) {\n    const ganTimerService = await server.getPrimaryService(\n      UUIDs.ganTimerService,\n    );\n    console.log(\"Service:\", ganTimerService);\n    const timeCharacteristic = await ganTimerService.getCharacteristic(\n      UUIDs.timeCharacteristic,\n    );\n    console.log(\"Characteristic:\", timeCharacteristic);\n    const timer = new GanTimer(\n      ganTimerService,\n      server,\n      device,\n      timeCharacteristic,\n    );\n    return timer;\n  }\n\n  disconnect(): void {\n    this.server.disconnect();\n  }\n\n  async poll() {\n    if (!this.polling) {\n      return;\n    }\n    const value = await this.getTimeCharacteristic();\n\n    const detail: GanTimerDetail = {\n      currentTime: this.decodeTimeMs(value.slice(0, 4)),\n      latestTimes: [\n        this.decodeTimeMs(value.slice(4, 8)),\n        this.decodeTimeMs(value.slice(8, 12)),\n        this.decodeTimeMs(value.slice(12, 16)),\n      ],\n    };\n\n    if (detail.currentTime === 0) {\n      if (this.previousDetail && this.previousDetail.currentTime !== 0) {\n        this.dispatchEvent(new CustomEvent(\"reset\"));\n      }\n    }\n\n    if (detail.currentTime !== 0 && this.previousDetail) {\n      if (this.previousDetail.currentTime === 0) {\n        this.dispatchEvent(new CustomEvent(\"start\"));\n      }\n\n      if (detail.currentTime !== this.previousDetail.currentTime) {\n        this.dispatchEvent(new CustomEvent(\"update\", { detail }));\n\n        if (\n          detail.currentTime === detail.latestTimes[0] &&\n          detail.latestTimes[1] === this.previousDetail.latestTimes[0] &&\n          detail.latestTimes[2] === this.previousDetail.latestTimes[1]\n        ) {\n          this.dispatchEvent(new CustomEvent(\"stop\", { detail }));\n        }\n      }\n    }\n\n    this.previousDetail = detail;\n\n    this.poll();\n  }\n\n  onDisconnect(): void {\n    this.dispatchEvent(new CustomEvent(\"disconnect\"));\n  }\n\n  async getTimeCharacteristic() {\n    return new Uint8Array((await this.timeCharacteristic.readValue()).buffer);\n  }\n\n  async getTime() {\n    const value = await this.getTimeCharacteristic();\n    return this.decodeTimeMs(value.slice(0, 4));\n  }\n\n  decodeTimeMs(bytes: Uint8Array) {\n    return (bytes[0] * 60 + bytes[1]) * 1000 + bytes[2] + bytes[3] * 256;\n  }\n\n  startPolling() {\n    this.polling = true;\n    this.poll();\n  }\n\n  stopPolling() {\n    this.polling = false;\n  }\n}\n\n// // TODO: Move this into a factory?\nexport const ganTimerConfig: BluetoothConfig<GanTimer> = {\n  connect: GanTimer.connect.bind(GanTimer),\n  prefixes: [\"GAN\"],\n  filters: [{ namePrefix: \"GAN\" }],\n  optionalServices: [UUIDs.ganTimerService],\n};\n", "import { bluetoothConnect, BluetoothConnectOptions } from \"../connect\";\nimport type { BluetoothConfig } from \"../smart-puzzle/bluetooth-puzzle\";\nimport { GanTimer, ganTimerConfig } from \"./GanTimer\";\n\n/** @category Timers */\nexport type BluetoothTimer = GanTimer; // TODO\n\nconst smartTimerConfigs: BluetoothConfig<BluetoothTimer>[] = [ganTimerConfig];\n\n/** @category Timers */\nexport async function connectSmartTimer(\n  options?: BluetoothConnectOptions,\n): Promise<BluetoothTimer> {\n  return bluetoothConnect<BluetoothTimer>(smartTimerConfigs, options);\n}\n"],
  "mappings": "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",
  "names": ["DEBUG_LOGGING_ENABLED", "enableDebugLogging", "enable", "debugLog", "args", "maxAxis", "v", "s2", "m", "Quaternion", "BasicRotationTransformer", "_algLeafEvent", "orientationEvent", "x", "y", "z", "w", "quat", "U", "Vector3", "F", "maxU", "maxF", "oriQuat", "q2", "BluetoothPuzzle", "listener", "BasicRotationTransformer", "algLeaf", "transformer", "l", "orientationEvent", "x", "y", "z", "w", "KeyboardPuzzle", "BluetoothPuzzle", "target", "puzzles", "algLeaf", "keyToMove", "newState", "Alg", "debugKeyboardConnect", "requestOptions", "configs", "acceptAllDevices", "options", "config", "debugLog", "consecutiveFailures", "MAX_FAILURES_BEFORE_ACCEPT_ALL_FALLBACK", "bluetoothConnect", "device", "e", "server", "name", "prefix", "zeros", "paddingBlockPlaintext", "AES_CBC", "importKey", "keyBytes", "unsafeEncryptBlockWithIV", "key", "plaintextBlock", "iv", "unsafeDecryptBlock", "key", "ciphertextBlock", "paddingBlock", "unsafeEncryptBlockWithIV", "paddingBlockPlaintext", "cbcCiphertext", "AES_CBC", "zeros", "DEFAULT_INTERVAL_MS", "MAX_LATEST_MOVES", "ganMoveToBlockMove", "Move", "homeQuatInverse", "probablyDecodedCorrectly", "data", "key10", "key11", "decryptState", "aesKey", "copy", "unsafeDecryptBlock", "PhysicalState", "dataView", "timeStamp", "characteristic", "value", "x", "y", "z", "wSquared", "w", "quat", "Quaternion", "previousMoveCounter", "n", "i", "UUIDs", "commands", "buf2hex", "buffer", "reidEdgeOrder", "reidCornerOrder", "rotateLeft", "s", "pieceMap", "edge", "idx", "corner", "gan356iCornerMappings", "gan356iEdgeMappings", "faceOrder", "getKey", "server", "infoService", "versionCharacteristic", "versionBuffer", "versionValue", "keyXor", "systemIDCharacteristic", "systemID", "key", "importKey", "GanCube", "BluetoothPuzzle", "kpuzzle", "service", "physicalStateCharacteristic", "lastMoveCounter", "ganCubeService", "debugLog", "initialMoveCounter", "puzzles", "physicalState", "numInterveningMoves", "move", "arr", "stickers", "v", "j", "stateData", "cornerMapping", "pieceInfo", "edgeMapping", "KState", "faceletStatus2Characteristic", "ganConfig", "MESSAGE_LENGTH", "UUIDs", "giikerMoveToAlgMove", "face", "amount", "debugLog", "family", "Move", "giikerStateStr", "giikerState", "str", "Reid333SolvedCenters", "epGiiKERtoReid333", "epReid333toGiiKER", "preEO", "postEO", "cpGiiKERtoReid333", "cpReid333toGiiKER", "preCO", "postCO", "coFlip", "getNibble", "val", "i", "probablyEncrypted", "data", "lookup", "decryptState", "offset1", "offset2", "output", "MESSAGE_LENGTH", "decodeState", "GiiKERCube", "BluetoothPuzzle", "server", "cubeCharacteristic", "originalValue", "cubeService", "UUIDs", "debugLog", "cube", "n", "shift", "state", "gi", "KState", "experimental3x3x3KPuzzle", "event", "giikerMoveToAlgMove", "giiKERConfig", "UUIDs", "buf2hex", "buffer", "x", "bufferToString", "byteView", "str", "charCode", "moveMap", "Move", "GoCube", "BluetoothPuzzle", "server", "goCubeStateCharacteristic", "Quaternion", "Alg", "service", "debugLog", "cube", "alg", "event", "i", "move", "experimentalAppendMove", "coords", "s", "quat", "targetQuat", "rotateTowardsRate", "goCubeConfig", "identityPermutation", "numElems", "arr", "i", "maskToOrientations", "radix", "numElems", "mask", "arr", "lexToPermutation", "numPieces", "lexicographicIdx", "permutation", "i", "j", "reorientPuzzle", "state", "idxU", "idxL", "puzzleOrientation3x3x3Cache", "BIT_LENGTHS", "splitBinary", "bitLengths", "buffy", "u8buffy", "at", "bits", "accum", "values", "bitLength", "supportsPuzzleOrientation", "components", "twizzleBinaryToBinaryComponents", "buffer", "epLex", "eoMask", "cpLex", "coMask", "poIdxU", "poIdxL", "moSupport", "moMask", "splitBinary", "BIT_LENGTHS", "binaryComponentsToReid3x3x3", "components", "normedState", "KState", "experimental3x3x3KPuzzle", "lexToPermutation", "maskToOrientations", "identityPermutation", "supportsPuzzleOrientation", "reorientPuzzle", "flipBitOrder", "v", "numBits", "result", "i", "shiftLeft", "unShiftedBit", "UUIDs", "HeykubeCube", "BluetoothPuzzle", "_kpuzzle", "_service", "device", "server", "stateCharacteristic", "service", "debugLog", "puzzles", "event", "state", "dv", "moves", "Move", "b2", "i", "flipBitOrder", "components1", "twizzleBinaryToBinaryComponents", "components2", "binaryComponentsToReid3x3x3", "b1", "heykubeConfig", "smartPuzzleConfigs", "ganConfig", "goCubeConfig", "heykubeConfig", "giiKERConfig", "connectSmartPuzzle", "options", "bluetoothConnect", "buf2hex", "buffer", "x", "MAX_NIBBLES_PER_WRITE", "QUANTUM_TURN_DURATION_MS", "DOUBLE_TURN_DURATION_MS", "U_D_SWAP", "Alg", "U_D_UNSWAP", "F_B_SWAP", "F_B_UNSWAP", "UUIDs", "moveMap", "moveMapX", "isDoubleTurnNibble", "nibble", "nibbleDuration", "throwInvalidMove", "move", "sleep", "ms", "resolve", "GanRobot", "_service", "server", "device", "statusCharacteristic", "moveCharacteristic", "ganTimerService", "nibbles", "bytes", "i", "byteIdx", "sleepDuration", "statusBytes", "moves", "cube3x3x3", "algNodes", "sending", "write", "ganTimerConfig", "smartRobotConfigs", "ganTimerConfig", "connectSmartRobot", "options", "bluetoothConnect", "UUIDs", "GanTimer", "_service", "server", "device", "timeCharacteristic", "ganTimerService", "value", "detail", "bytes", "ganTimerConfig", "smartTimerConfigs", "ganTimerConfig", "connectSmartTimer", "options", "bluetoothConnect"]
}
