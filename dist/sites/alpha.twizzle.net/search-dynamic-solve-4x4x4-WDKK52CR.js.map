{
  "version": 3,
  "sources": ["../../../src/cubing/vendor/gpl/cs0x7f/cstimer/src/js/lib/mathlib.ts", "../../../src/cubing/vendor/gpl/cs0x7f/cstimer/src/js/scramble/444-solver.ts"],
  "sourcesContent": ["const Cnk: number[][] = [];\nconst fact = [1];\nfor (let i = 0; i < 32; ++i) {\n  Cnk[i] = [];\n  for (let j = 0; j < 32; ++j) {\n    Cnk[i][j] = 0;\n  }\n}\nfor (let i = 0; i < 32; ++i) {\n  Cnk[i][0] = Cnk[i][i] = 1;\n  fact[i + 1] = fact[i] * (i + 1);\n  for (let j = 1; j < i; ++j) {\n    Cnk[i][j] = Cnk[i - 1][j - 1] + Cnk[i - 1][j];\n  }\n}\n\nfunction circle(arr: number[], ...moreArgs: number[]) {\n  const length = moreArgs.length;\n  const temp = arr[moreArgs[length - 1]];\n  for (let i = length; i > 0; i--) {\n    arr[moreArgs[i]] = arr[moreArgs[i - 1]];\n  }\n  arr[moreArgs[0]] = temp;\n  return circle;\n}\n\nfunction set8Perm(arr: number[], idx: number, n?: number, even?: number) {\n  n = (n || 8) - 1;\n  let val = 0x76543210;\n  let prt = 0;\n  even ??= 0;\n  if (even < 0) {\n    idx <<= 1;\n  }\n  for (let i = 0; i < n; ++i) {\n    const p = fact[n - i];\n    let v = ~~(idx / p);\n    prt ^= v;\n    idx %= p;\n    v <<= 2;\n    arr[i] = (val >> v) & 7;\n    const m = (1 << v) - 1;\n    val = (val & m) + ((val >> 4) & ~m);\n  }\n  if (even < 0 && (prt & 1) !== 0) {\n    arr[n] = arr[n - 1];\n    arr[n - 1] = val & 7;\n  } else {\n    arr[n] = val & 7;\n  }\n  return arr;\n}\n\nexport { Cnk, set8Perm, circle };\n", "// @ts-nocheck\n\nimport { Alg } from \"../../../../../../../alg\";\nimport { random333Scramble as getRandomScramble333 } from \"../../../../../../../search/inside/solve/puzzles/3x3x3\";\nimport { circle, Cnk, set8Perm } from \"../lib/mathlib\";\nimport { randomUIntBelow } from \"random-uint-below\";\nimport { mustBeInsideWorker } from \"../../../../../../../search/inside/inside-worker\";\n\nfunction createArray(length1: number, length2?: number) {\n  const result = new Array<number[]>(length1);\n  if (length2 !== undefined) {\n    for (let i = 0; i < length1; i++) {\n      result[i] = new Array(length2);\n    }\n  }\n  return result;\n}\n\nlet _: any;\nconst seedTable: Record<number, any> = {};\nconst CM$ = {};\nconst Q$Object = 0;\nconst Q$Serializable = 30;\nconst Q$Center1 = 21;\nconst Q$CornerCube = 22;\nconst Q$Edge3 = 23;\nconst Q$FullCube_0 = 24;\nconst Q$FullCube_$1 = 25;\nconst Q$Comparable = 34;\nconst Q$Search_0 = 26;\nconst Q$Object_$1 = 40;\n\nfunction newSeed(id: number) {\n  return new seedTable[id]();\n}\n\nfunction defineSeed(\n  id: number,\n  superSeed: number,\n  castableTypeMap: any, // TODO\n  ...moreArgs: any[]\n) {\n  let seed = seedTable[id];\n  if (seed && !seed.___clazz$) {\n    _ = seed.prototype;\n  } else {\n    !seed && (seed = seedTable[id] = function () {});\n    _ = seed.prototype = superSeed < 0 ? {} : newSeed(superSeed);\n    _.castableTypeMap$ = castableTypeMap;\n  }\n  for (const arg of moreArgs) {\n    arg.prototype = _;\n  }\n  if (seed.___clazz$) {\n    _.___clazz$ = seed.___clazz$;\n    seed.___clazz$ = null;\n  }\n}\n\nfunction makeCastMap(a: number[]) {\n  const result: Record<number, number> = {};\n  for (let i_0 = 0, c = a.length; i_0 < c; ++i_0) {\n    result[a[i_0]] = 1;\n  }\n  return result;\n}\n\ndefineSeed(1, -1, CM$);\n\n_.value = null;\n\nfunction Array_0() {}\n\nfunction createFrom(a: any, length_0: number) {\n  const result = createFromSeed(0, length_0);\n  initValues(a.___clazz$, a.castableTypeMap$, a.queryId$, result);\n  return result;\n}\n\nfunction createFromSeed(seedType: number, length_0: number) {\n  const array = new Array(length_0);\n  if (seedType === 3) {\n    for (let i_0 = 0; i_0 < length_0; ++i_0) {\n      const value = {\n        m: 0,\n        l: 0,\n        h: 0,\n      };\n      value.l = value.m = value.h = 0;\n      array[i_0] = value;\n    }\n  } else if (seedType > 0) {\n    const value = [null, 0, false][seedType];\n    for (let i_0 = 0; i_0 < length_0; ++i_0) {\n      array[i_0] = value;\n    }\n  }\n  return array;\n}\n\nfunction initDim(arrayClass, castableTypeMap, queryId, length_0, seedType) {\n  const result = createFromSeed(seedType, length_0);\n  initValues(arrayClass, castableTypeMap, queryId, result);\n  return result;\n}\n\nfunction initValues(arrayClass, castableTypeMap, queryId, array) {\n  $clinit_Array$ExpandoWrapper();\n  wrapArray(array, expandoNames_0, expandoValues_0);\n  array.___clazz$ = arrayClass;\n  array.castableTypeMap$ = castableTypeMap;\n  array.queryId$ = queryId;\n  return array;\n}\n\nfunction setCheck(array, index, value) {\n  return (array[index] = value);\n}\n\ndefineSeed(73, 1, {}, Array_0);\n_.queryId$ = 0;\n\nlet ran$clinit_Array$ExpandoWrapper = false;\nfunction $clinit_Array$ExpandoWrapper() {\n  if (ran$clinit_Array$ExpandoWrapper) {\n    return;\n  }\n  ran$clinit_Array$ExpandoWrapper = true;\n  expandoNames_0 = [];\n  expandoValues_0 = [];\n  initExpandos(new Array_0(), expandoNames_0, expandoValues_0);\n}\n\nfunction initExpandos(protoType, expandoNames, expandoValues) {\n  let i_0 = 0;\n  let value;\n  for (const name_0 in protoType) {\n    // rome-ignore lint/nursery/noConditionalAssignment: <explanation>\n    if ((value = protoType[name_0])) {\n      expandoNames[i_0] = name_0;\n      expandoValues[i_0] = value;\n      ++i_0;\n    }\n  }\n}\n\nfunction wrapArray(array, expandoNames, expandoValues) {\n  $clinit_Array$ExpandoWrapper();\n  for (let i_0 = 0, c = expandoNames.length; i_0 < c; ++i_0) {\n    array[expandoNames[i_0]] = expandoValues[i_0];\n  }\n}\n\nlet expandoNames_0;\nlet expandoValues_0;\n\nfunction canCast(src, dstId) {\n  return src.castableTypeMap$ && !!src.castableTypeMap$[dstId];\n}\n\nfunction instanceOf(src, dstId) {\n  return src !== null && canCast(src, dstId);\n}\n\nlet ran$clinit_Center1 = false;\nfunction $clinit_Center1() {\n  if (ran$clinit_Center1) {\n    return false;\n  }\n  ran$clinit_Center1 = true;\n  ctsmv = createArray(15582, 36);\n  sym2raw = createArray(15582);\n  csprun = createArray(15582);\n  symmult = createArray(48, 48);\n  symmove = createArray(48, 36);\n  syminv = createArray(48);\n  finish_0 = createArray(48);\n}\n\nfunction $$init_1(this$static) {\n  this$static.ct = createArray(24);\n}\n\nfunction $equals(this$static, obj) {\n  let c;\n  let i_0;\n  if (instanceOf(obj, Q$Center1)) {\n    c = obj;\n    for (i_0 = 0; i_0 < 24; ++i_0) {\n      if (this$static.ct[i_0] !== c.ct[i_0]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n\nfunction $get_1(this$static) {\n  let i_0;\n  let idx;\n  let r;\n  idx = 0;\n  r = 8;\n  for (i_0 = 23; i_0 >= 0; --i_0) {\n    this$static.ct[i_0] === 1 && (idx += Cnk[i_0][r--]);\n  }\n  return idx;\n}\n\nfunction $getsym(this$static) {\n  let cord;\n  let j;\n  if (raw2sym !== null) {\n    return raw2sym[$get_1(this$static)];\n  }\n  for (j = 0; j < 48; ++j) {\n    cord = raw2sym_0($get_1(this$static));\n    if (cord !== -1) {\n      return cord * 64 + j;\n    }\n    $rot(this$static, 0);\n    j % 2 === 1 && $rot(this$static, 1);\n    j % 8 === 7 && $rot(this$static, 2);\n    j % 16 === 15 && $rot(this$static, 3);\n  }\n}\n\nfunction $move(this$static, m_0) {\n  const key = m_0 % 3;\n  m_0 = ~~(m_0 / 3);\n  switch (m_0) {\n    case 0: {\n      swap(this$static.ct, 0, 1, 2, 3, key);\n      break;\n    }\n    case 1: {\n      swap(this$static.ct, 16, 17, 18, 19, key);\n      break;\n    }\n    case 2: {\n      swap(this$static.ct, 8, 9, 10, 11, key);\n      break;\n    }\n    case 3: {\n      swap(this$static.ct, 4, 5, 6, 7, key);\n      break;\n    }\n    case 4: {\n      swap(this$static.ct, 20, 21, 22, 23, key);\n      break;\n    }\n    case 5: {\n      swap(this$static.ct, 12, 13, 14, 15, key);\n      break;\n    }\n    case 6: {\n      swap(this$static.ct, 0, 1, 2, 3, key);\n      swap(this$static.ct, 8, 20, 12, 16, key);\n      swap(this$static.ct, 9, 21, 13, 17, key);\n      break;\n    }\n    case 7: {\n      swap(this$static.ct, 16, 17, 18, 19, key);\n      swap(this$static.ct, 1, 15, 5, 9, key);\n      swap(this$static.ct, 2, 12, 6, 10, key);\n      break;\n    }\n    case 8: {\n      swap(this$static.ct, 8, 9, 10, 11, key);\n      swap(this$static.ct, 2, 19, 4, 21, key);\n      swap(this$static.ct, 3, 16, 5, 22, key);\n      break;\n    }\n    case 9: {\n      swap(this$static.ct, 4, 5, 6, 7, key);\n      swap(this$static.ct, 10, 18, 14, 22, key);\n      swap(this$static.ct, 11, 19, 15, 23, key);\n      break;\n    }\n    case 10: {\n      swap(this$static.ct, 20, 21, 22, 23, key);\n      swap(this$static.ct, 0, 8, 4, 14, key);\n      swap(this$static.ct, 3, 11, 7, 13, key);\n      break;\n    }\n    case 11: {\n      swap(this$static.ct, 12, 13, 14, 15, key);\n      swap(this$static.ct, 1, 20, 7, 18, key);\n      swap(this$static.ct, 0, 23, 6, 17, key);\n    }\n  }\n}\n\nfunction $rot(this$static, r) {\n  switch (r) {\n    case 0: {\n      $move(this$static, 19);\n      $move(this$static, 28);\n      break;\n    }\n    case 1: {\n      $move(this$static, 21);\n      $move(this$static, 32);\n      break;\n    }\n    case 2: {\n      swap(this$static.ct, 0, 3, 1, 2, 1);\n      swap(this$static.ct, 8, 11, 9, 10, 1);\n      swap(this$static.ct, 4, 7, 5, 6, 1);\n      swap(this$static.ct, 12, 15, 13, 14, 1);\n      swap(this$static.ct, 16, 19, 21, 22, 1);\n      swap(this$static.ct, 17, 18, 20, 23, 1);\n      break;\n    }\n    case 3: {\n      $move(this$static, 18);\n      $move(this$static, 29);\n      $move(this$static, 24);\n      $move(this$static, 35);\n    }\n  }\n}\n\nfunction $rotate(this$static, r) {\n  let j;\n  for (j = 0; j < r; ++j) {\n    $rot(this$static, 0);\n    j % 2 === 1 && $rot(this$static, 1);\n    j % 8 === 7 && $rot(this$static, 2);\n    j % 16 === 15 && $rot(this$static, 3);\n  }\n}\n\nfunction $set_0(this$static, idx) {\n  let i_0;\n  let r;\n  r = 8;\n  for (i_0 = 23; i_0 >= 0; --i_0) {\n    this$static.ct[i_0] = 0;\n    if (idx >= Cnk[i_0][r]) {\n      idx -= Cnk[i_0][r--];\n      this$static.ct[i_0] = 1;\n    }\n  }\n}\n\nfunction $set_1(this$static, c) {\n  let i_0;\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    this$static.ct[i_0] = c.ct[i_0];\n  }\n}\n\nfunction Center1_0() {\n  let i_0;\n  $$init_1(this);\n  for (i_0 = 0; i_0 < 8; ++i_0) {\n    this.ct[i_0] = 1;\n  }\n  for (i_0 = 8; i_0 < 24; ++i_0) {\n    this.ct[i_0] = 0;\n  }\n}\n\nfunction Center1_1(c, urf) {\n  let i_0;\n  $$init_1(this);\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    this.ct[i_0] = ~~(c.ct[i_0] / 2) === urf ? 1 : 0;\n  }\n}\n\nfunction Center1_2(ct) {\n  let i_0;\n  $$init_1(this);\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    this.ct[i_0] = ct[i_0];\n  }\n}\n\nfunction createMoveTable() {\n  let i_0;\n  let m_0;\n  const c = new Center1_0();\n  const d = new Center1_0();\n  for (i_0 = 0; i_0 < 15582; ++i_0) {\n    $set_0(d, sym2raw[i_0]);\n    for (m_0 = 0; m_0 < 36; ++m_0) {\n      $set_1(c, d);\n      $move(c, m_0);\n      ctsmv[i_0][m_0] = $getsym(c);\n    }\n  }\n}\n\nfunction createPrun() {\n  let check;\n  let depth;\n  let done;\n  let i_0;\n  let idx;\n  let inv;\n  let m_0;\n  let select;\n  fill_0(csprun);\n  csprun[0] = 0;\n  depth = 0;\n  done = 1;\n  while (done !== 15582) {\n    inv = depth > 4;\n    select = inv ? -1 : depth;\n    check = inv ? depth : -1;\n    ++depth;\n    for (i_0 = 0; i_0 < 15582; ++i_0) {\n      if (csprun[i_0] !== select) {\n        continue;\n      }\n      for (m_0 = 0; m_0 < 27; ++m_0) {\n        idx = ~~ctsmv[i_0][m_0] >>> 6;\n        if (csprun[idx] !== check) {\n          continue;\n        }\n        ++done;\n        if (inv) {\n          csprun[i_0] = depth;\n          break;\n        } else {\n          csprun[idx] = depth;\n        }\n      }\n    }\n  }\n}\n\nfunction getSolvedSym(cube) {\n  let check;\n  let i_0;\n  let j;\n  const c = new Center1_2(cube.ct);\n  for (j = 0; j < 48; ++j) {\n    check = true;\n    for (i_0 = 0; i_0 < 24; ++i_0) {\n      if (c.ct[i_0] !== ~~(i_0 / 4)) {\n        check = false;\n        break;\n      }\n    }\n    if (check) {\n      return j;\n    }\n    $rot(c, 0);\n    j % 2 === 1 && $rot(c, 1);\n    j % 8 === 7 && $rot(c, 2);\n    j % 16 === 15 && $rot(c, 3);\n  }\n  return -1;\n}\n\nfunction initSym_0() {\n  let i_0;\n  let j;\n  let k_0;\n  const c = new Center1_0();\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    c.ct[i_0] = i_0;\n  }\n  const d = new Center1_2(c.ct);\n  const e = new Center1_2(c.ct);\n  const f = new Center1_2(c.ct);\n  for (i_0 = 0; i_0 < 48; ++i_0) {\n    for (j = 0; j < 48; ++j) {\n      for (k_0 = 0; k_0 < 48; ++k_0) {\n        if ($equals(c, d)) {\n          symmult[i_0][j] = k_0;\n          k_0 === 0 && (syminv[i_0] = j);\n        }\n        $rot(d, 0);\n        k_0 % 2 === 1 && $rot(d, 1);\n        k_0 % 8 === 7 && $rot(d, 2);\n        k_0 % 16 === 15 && $rot(d, 3);\n      }\n      $rot(c, 0);\n      j % 2 === 1 && $rot(c, 1);\n      j % 8 === 7 && $rot(c, 2);\n      j % 16 === 15 && $rot(c, 3);\n    }\n    $rot(c, 0);\n    i_0 % 2 === 1 && $rot(c, 1);\n    i_0 % 8 === 7 && $rot(c, 2);\n    i_0 % 16 === 15 && $rot(c, 3);\n  }\n  for (i_0 = 0; i_0 < 48; ++i_0) {\n    $set_1(c, e);\n    $rotate(c, syminv[i_0]);\n    for (j = 0; j < 36; ++j) {\n      $set_1(d, c);\n      $move(d, j);\n      $rotate(d, i_0);\n      for (k_0 = 0; k_0 < 36; ++k_0) {\n        $set_1(f, e);\n        $move(f, k_0);\n        if ($equals(f, d)) {\n          symmove[i_0][j] = k_0;\n          break;\n        }\n      }\n    }\n  }\n  $set_0(c, 0);\n  for (i_0 = 0; i_0 < 48; ++i_0) {\n    finish_0[syminv[i_0]] = $get_1(c);\n    $rot(c, 0);\n    i_0 % 2 === 1 && $rot(c, 1);\n    i_0 % 8 === 7 && $rot(c, 2);\n    i_0 % 16 === 15 && $rot(c, 3);\n  }\n}\n\nfunction initSym2Raw() {\n  let count;\n  let i_0;\n  let idx;\n  let j;\n  const c = new Center1_0();\n  const occ = createArray(22984);\n  for (i_0 = 0; i_0 < 22984; i_0++) {\n    occ[i_0] = 0;\n  }\n  count = 0;\n  for (i_0 = 0; i_0 < 735471; ++i_0) {\n    if ((occ[~~i_0 >>> 5] & (1 << (i_0 & 31))) === 0) {\n      $set_0(c, i_0);\n      for (j = 0; j < 48; ++j) {\n        idx = $get_1(c);\n        occ[~~idx >>> 5] |= 1 << (idx & 31);\n        raw2sym !== null && (raw2sym[idx] = (count << 6) | syminv[j]);\n        $rot(c, 0);\n        j % 2 === 1 && $rot(c, 1);\n        j % 8 === 7 && $rot(c, 2);\n        j % 16 === 15 && $rot(c, 3);\n      }\n      sym2raw[count++] = i_0;\n    }\n  }\n}\n\nfunction raw2sym_0(n) {\n  const m_0 = binarySearch_0(sym2raw, n);\n  return m_0 >= 0 ? m_0 : -1;\n}\n\ndefineSeed(153, 1, makeCastMap([Q$Center1]), Center1_0, Center1_1, Center1_2);\n\nlet csprun;\nlet ctsmv;\nlet finish_0;\nlet raw2sym = null;\nlet sym2raw;\nlet syminv;\nlet symmove;\nlet symmult;\n\nlet ran$clinit_Center2 = false;\nfunction $clinit_Center2() {\n  if (ran$clinit_Center2) {\n    return;\n  }\n  ran$clinit_Center2 = true;\n  rlmv = createArray(70, 28);\n  ctmv = createArray(6435, 28);\n  rlrot = createArray(70, 16);\n  ctrot = createArray(6435, 16);\n  ctprun = createArray(450450);\n  pmv = [\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,\n    0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0,\n  ];\n}\n\nfunction $getct(this$static) {\n  let i_0;\n  let idx;\n  let r;\n  idx = 0;\n  r = 8;\n  for (i_0 = 14; i_0 >= 0; --i_0) {\n    this$static.ct[i_0] !== this$static.ct[15] && (idx += Cnk[i_0][r--]);\n  }\n  return idx;\n}\n\nfunction $getrl(this$static) {\n  let i_0;\n  let idx;\n  let r;\n  idx = 0;\n  r = 4;\n  for (i_0 = 6; i_0 >= 0; --i_0) {\n    this$static.rl[i_0] !== this$static.rl[7] && (idx += Cnk[i_0][r--]);\n  }\n  return idx * 2 + this$static.parity;\n}\n\nfunction $move_0(this$static, m_0) {\n  this$static.parity ^= pmv[m_0];\n  const key = m_0 % 3;\n  m_0 = ~~(m_0 / 3);\n  switch (m_0) {\n    case 0: {\n      swap(this$static.ct, 0, 1, 2, 3, key);\n      break;\n    }\n    case 1: {\n      swap(this$static.rl, 0, 1, 2, 3, key);\n      break;\n    }\n    case 2: {\n      swap(this$static.ct, 8, 9, 10, 11, key);\n      break;\n    }\n    case 3: {\n      swap(this$static.ct, 4, 5, 6, 7, key);\n      break;\n    }\n    case 4: {\n      swap(this$static.rl, 4, 5, 6, 7, key);\n      break;\n    }\n    case 5: {\n      swap(this$static.ct, 12, 13, 14, 15, key);\n      break;\n    }\n    case 6: {\n      swap(this$static.ct, 0, 1, 2, 3, key);\n      swap(this$static.rl, 0, 5, 4, 1, key);\n      swap(this$static.ct, 8, 9, 12, 13, key);\n      break;\n    }\n    case 7: {\n      swap(this$static.rl, 0, 1, 2, 3, key);\n      swap(this$static.ct, 1, 15, 5, 9, key);\n      swap(this$static.ct, 2, 12, 6, 10, key);\n      break;\n    }\n    case 8: {\n      swap(this$static.ct, 8, 9, 10, 11, key);\n      swap(this$static.rl, 0, 3, 6, 5, key);\n      swap(this$static.ct, 3, 2, 5, 4, key);\n      break;\n    }\n    case 9: {\n      swap(this$static.ct, 4, 5, 6, 7, key);\n      swap(this$static.rl, 3, 2, 7, 6, key);\n      swap(this$static.ct, 11, 10, 15, 14, key);\n      break;\n    }\n    case 10: {\n      swap(this$static.rl, 4, 5, 6, 7, key);\n      swap(this$static.ct, 0, 8, 4, 14, key);\n      swap(this$static.ct, 3, 11, 7, 13, key);\n      break;\n    }\n    case 11: {\n      swap(this$static.ct, 12, 13, 14, 15, key);\n      swap(this$static.rl, 1, 4, 7, 2, key);\n      swap(this$static.ct, 1, 0, 7, 6, key);\n    }\n  }\n}\n\nfunction $rot_0(this$static, r) {\n  switch (r) {\n    case 0: {\n      $move_0(this$static, 19);\n      $move_0(this$static, 28);\n      break;\n    }\n    case 1: {\n      $move_0(this$static, 21);\n      $move_0(this$static, 32);\n      break;\n    }\n    case 2: {\n      swap(this$static.ct, 0, 3, 1, 2, 1);\n      swap(this$static.ct, 8, 11, 9, 10, 1);\n      swap(this$static.ct, 4, 7, 5, 6, 1);\n      swap(this$static.ct, 12, 15, 13, 14, 1);\n      swap(this$static.rl, 0, 3, 5, 6, 1);\n      swap(this$static.rl, 1, 2, 4, 7, 1);\n    }\n  }\n}\n\nfunction $set_2(this$static, c, edgeParity) {\n  let i_0;\n  for (i_0 = 0; i_0 < 16; ++i_0) {\n    this$static.ct[i_0] = ~~(c.ct[i_0] / 2);\n  }\n  for (i_0 = 0; i_0 < 8; ++i_0) {\n    this$static.rl[i_0] = c.ct[i_0 + 16];\n  }\n  this$static.parity = edgeParity;\n}\n\nfunction $setct(this$static, idx) {\n  let i_0;\n  let r;\n  r = 8;\n  this$static.ct[15] = 0;\n  for (i_0 = 14; i_0 >= 0; --i_0) {\n    if (idx >= Cnk[i_0][r]) {\n      idx -= Cnk[i_0][r--];\n      this$static.ct[i_0] = 1;\n    } else {\n      this$static.ct[i_0] = 0;\n    }\n  }\n}\n\nfunction $setrl(this$static, idx) {\n  let i_0;\n  let r;\n  this$static.parity = idx & 1;\n  idx >>>= 1;\n  r = 4;\n  this$static.rl[7] = 0;\n  for (i_0 = 6; i_0 >= 0; --i_0) {\n    if (idx >= Cnk[i_0][r]) {\n      idx -= Cnk[i_0][r--];\n      this$static.rl[i_0] = 1;\n    } else {\n      this$static.rl[i_0] = 0;\n    }\n  }\n}\n\nfunction Center2_0() {\n  this.rl = createArray(8);\n  this.ct = createArray(16);\n}\n\nfunction init_3() {\n  let ct;\n  let ctx;\n  let depth;\n  let done;\n  let i_0;\n  let idx;\n  let j;\n  let m_0;\n  let rl;\n  let rlx;\n  const c = new Center2_0();\n  for (i_0 = 0; i_0 < 70; ++i_0) {\n    for (m_0 = 0; m_0 < 28; ++m_0) {\n      $setrl(c, i_0);\n      $move_0(c, move2std[m_0]);\n      rlmv[i_0][m_0] = $getrl(c);\n    }\n  }\n  for (i_0 = 0; i_0 < 70; ++i_0) {\n    $setrl(c, i_0);\n    for (j = 0; j < 16; ++j) {\n      rlrot[i_0][j] = $getrl(c);\n      $rot_0(c, 0);\n      j % 2 === 1 && $rot_0(c, 1);\n      j % 8 === 7 && $rot_0(c, 2);\n    }\n  }\n  for (i_0 = 0; i_0 < 6435; ++i_0) {\n    $setct(c, i_0);\n    for (j = 0; j < 16; ++j) {\n      ctrot[i_0][j] = $getct(c) & 65535;\n      $rot_0(c, 0);\n      j % 2 === 1 && $rot_0(c, 1);\n      j % 8 === 7 && $rot_0(c, 2);\n    }\n  }\n  for (i_0 = 0; i_0 < 6435; ++i_0) {\n    for (m_0 = 0; m_0 < 28; ++m_0) {\n      $setct(c, i_0);\n      $move_0(c, move2std[m_0]);\n      ctmv[i_0][m_0] = $getct(c) & 65535;\n    }\n  }\n  fill_0(ctprun);\n  ctprun[0] =\n    ctprun[18] =\n    ctprun[28] =\n    ctprun[46] =\n    ctprun[54] =\n    ctprun[56] =\n      0;\n  depth = 0;\n  done = 6;\n\n  while (done !== 450450) {\n    const inv = depth > 6;\n    const select = inv ? -1 : depth;\n    const check = inv ? depth : -1;\n    ++depth;\n    for (i_0 = 0; i_0 < 450450; ++i_0) {\n      if (ctprun[i_0] !== select) {\n        continue;\n      }\n      ct = ~~(i_0 / 70);\n      rl = i_0 % 70;\n      for (m_0 = 0; m_0 < 23; ++m_0) {\n        ctx = ctmv[ct][m_0];\n        rlx = rlmv[rl][m_0];\n        idx = ctx * 70 + rlx;\n        if (ctprun[idx] !== check) {\n          continue;\n        }\n        ++done;\n        if (inv) {\n          ctprun[i_0] = depth;\n          break;\n        } else {\n          ctprun[idx] = depth;\n        }\n      }\n    }\n  }\n}\n\ndefineSeed(154, 1, {}, Center2_0);\n_.parity = 0;\nlet ctmv;\nlet ctprun;\nlet ctrot;\nlet pmv;\nlet rlmv;\nlet rlrot;\n\nlet ran$clinit_Center3 = false;\nfunction $clinit_Center3() {\n  if (ran$clinit_Center3) {\n    return;\n  }\n  ran$clinit_Center3 = true;\n  ctmove = createArray(29400, 20);\n  pmove = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1];\n  prun_0 = createArray(29400);\n  rl2std = [0, 9, 14, 23, 27, 28, 41, 42, 46, 55, 60, 69];\n  std2rl = createArray(70);\n}\n\nfunction $getct_0(this$static) {\n  let i_0;\n  let idx;\n  let idxrl;\n  let r;\n  idx = 0;\n  r = 4;\n  for (i_0 = 6; i_0 >= 0; --i_0) {\n    this$static.ud[i_0] !== this$static.ud[7] && (idx += Cnk[i_0][r--]);\n  }\n  idx *= 35;\n  r = 4;\n  for (i_0 = 6; i_0 >= 0; --i_0) {\n    this$static.fb[i_0] !== this$static.fb[7] && (idx += Cnk[i_0][r--]);\n  }\n  idx *= 12;\n  const check = this$static.fb[7] ^ this$static.ud[7];\n  idxrl = 0;\n  r = 4;\n  for (i_0 = 7; i_0 >= 0; --i_0) {\n    this$static.rl[i_0] !== check && (idxrl += Cnk[i_0][r--]);\n  }\n  return this$static.parity + 2 * (idx + std2rl[idxrl]);\n}\n\nfunction $move_1(this$static, i_0) {\n  this$static.parity ^= pmove[i_0];\n  switch (i_0) {\n    case 0:\n    case 1:\n    case 2: {\n      swap(this$static.ud, 0, 1, 2, 3, i_0 % 3);\n      break;\n    }\n    case 3: {\n      swap(this$static.rl, 0, 1, 2, 3, 1);\n      break;\n    }\n    case 4:\n    case 5:\n    case 6: {\n      swap(this$static.fb, 0, 1, 2, 3, (i_0 - 1) % 3);\n      break;\n    }\n    case 7:\n    case 8:\n    case 9: {\n      swap(this$static.ud, 4, 5, 6, 7, (i_0 - 1) % 3);\n      break;\n    }\n    case 10: {\n      swap(this$static.rl, 4, 5, 6, 7, 1);\n      break;\n    }\n    case 11:\n    case 12:\n    case 13: {\n      swap(this$static.fb, 4, 5, 6, 7, (i_0 + 1) % 3);\n      break;\n    }\n    case 14: {\n      swap(this$static.ud, 0, 1, 2, 3, 1);\n      swap(this$static.rl, 0, 5, 4, 1, 1);\n      swap(this$static.fb, 0, 5, 4, 1, 1);\n      break;\n    }\n    case 15: {\n      swap(this$static.rl, 0, 1, 2, 3, 1);\n      swap(this$static.fb, 1, 4, 7, 2, 1);\n      swap(this$static.ud, 1, 6, 5, 2, 1);\n      break;\n    }\n    case 16: {\n      swap(this$static.fb, 0, 1, 2, 3, 1);\n      swap(this$static.ud, 3, 2, 5, 4, 1);\n      swap(this$static.rl, 0, 3, 6, 5, 1);\n      break;\n    }\n    case 17: {\n      swap(this$static.ud, 4, 5, 6, 7, 1);\n      swap(this$static.rl, 3, 2, 7, 6, 1);\n      swap(this$static.fb, 3, 2, 7, 6, 1);\n      break;\n    }\n    case 18: {\n      swap(this$static.rl, 4, 5, 6, 7, 1);\n      swap(this$static.fb, 0, 3, 6, 5, 1);\n      swap(this$static.ud, 0, 3, 4, 7, 1);\n      break;\n    }\n    case 19: {\n      swap(this$static.fb, 4, 5, 6, 7, 1);\n      swap(this$static.ud, 0, 7, 6, 1, 1);\n      swap(this$static.rl, 1, 4, 7, 2, 1);\n    }\n  }\n}\n\nfunction $set_3(this$static, c, eXc_parity) {\n  let i_0;\n  const parity =\n    (c.ct[0] > c.ct[8] ? 1 : 0) ^\n    (c.ct[8] > c.ct[16] ? 1 : 0) ^\n    (c.ct[0] > c.ct[16] ? 1 : 0)\n      ? 1\n      : 0;\n  for (i_0 = 0; i_0 < 8; ++i_0) {\n    this$static.ud[i_0] = (c.ct[i_0] & 1) ^ 1;\n    this$static.fb[i_0] = (c.ct[i_0 + 8] & 1) ^ 1;\n    this$static.rl[i_0] = (c.ct[i_0 + 16] & 1) ^ 1 ^ parity;\n  }\n  this$static.parity = parity ^ eXc_parity;\n}\n\nfunction $setct_0(this$static, idx) {\n  let i_0;\n  let idxfb;\n  let idxrl;\n  let r;\n  this$static.parity = idx & 1;\n  idx >>>= 1;\n  idxrl = rl2std[idx % 12];\n  idx = ~~(idx / 12);\n  r = 4;\n  for (i_0 = 7; i_0 >= 0; --i_0) {\n    this$static.rl[i_0] = 0;\n    if (idxrl >= Cnk[i_0][r]) {\n      idxrl -= Cnk[i_0][r--];\n      this$static.rl[i_0] = 1;\n    }\n  }\n  idxfb = idx % 35;\n  idx = ~~(idx / 35);\n  r = 4;\n  this$static.fb[7] = 0;\n  for (i_0 = 6; i_0 >= 0; --i_0) {\n    if (idxfb >= Cnk[i_0][r]) {\n      idxfb -= Cnk[i_0][r--];\n      this$static.fb[i_0] = 1;\n    } else {\n      this$static.fb[i_0] = 0;\n    }\n  }\n  r = 4;\n  this$static.ud[7] = 0;\n  for (i_0 = 6; i_0 >= 0; --i_0) {\n    if (idx >= Cnk[i_0][r]) {\n      idx -= Cnk[i_0][r--];\n      this$static.ud[i_0] = 1;\n    } else {\n      this$static.ud[i_0] = 0;\n    }\n  }\n}\n\nfunction Center3_0() {\n  this.ud = createArray(8);\n  this.rl = createArray(8);\n  this.fb = createArray(8);\n}\n\nfunction init_4() {\n  let depth;\n  let done;\n  let i_0;\n  let m_0;\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    std2rl[rl2std[i_0]] = i_0;\n  }\n  const c = new Center3_0();\n  for (i_0 = 0; i_0 < 29400; ++i_0) {\n    for (m_0 = 0; m_0 < 20; ++m_0) {\n      $setct_0(c, i_0);\n      $move_1(c, m_0);\n      ctmove[i_0][m_0] = $getct_0(c) & 65535;\n    }\n  }\n  fill_0(prun_0);\n  prun_0[0] = 0;\n  depth = 0;\n  done = 1;\n  while (done !== 29400) {\n    for (i_0 = 0; i_0 < 29400; ++i_0) {\n      if (prun_0[i_0] !== depth) {\n        continue;\n      }\n      for (m_0 = 0; m_0 < 17; ++m_0) {\n        if (prun_0[ctmove[i_0][m_0]] === -1) {\n          prun_0[ctmove[i_0][m_0]] = depth + 1;\n          ++done;\n        }\n      }\n    }\n    ++depth;\n  }\n}\n\ndefineSeed(155, 1, {}, Center3_0);\n_.parity = 0;\nlet ctmove;\nlet pmove;\nlet prun_0;\nlet rl2std;\nlet std2rl;\n\nfunction $copy_1(this$static, c) {\n  let i_0;\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    this$static.ct[i_0] = c.ct[i_0];\n  }\n}\n\nfunction $move_2(this$static, m_0) {\n  const key = m_0 % 3;\n  m_0 = ~~(m_0 / 3);\n  switch (m_0) {\n    case 0: {\n      swap(this$static.ct, 0, 1, 2, 3, key);\n      break;\n    }\n    case 1: {\n      swap(this$static.ct, 16, 17, 18, 19, key);\n      break;\n    }\n    case 2: {\n      swap(this$static.ct, 8, 9, 10, 11, key);\n      break;\n    }\n    case 3: {\n      swap(this$static.ct, 4, 5, 6, 7, key);\n      break;\n    }\n    case 4: {\n      swap(this$static.ct, 20, 21, 22, 23, key);\n      break;\n    }\n    case 5: {\n      swap(this$static.ct, 12, 13, 14, 15, key);\n      break;\n    }\n    case 6: {\n      swap(this$static.ct, 0, 1, 2, 3, key);\n      swap(this$static.ct, 8, 20, 12, 16, key);\n      swap(this$static.ct, 9, 21, 13, 17, key);\n      break;\n    }\n    case 7: {\n      swap(this$static.ct, 16, 17, 18, 19, key);\n      swap(this$static.ct, 1, 15, 5, 9, key);\n      swap(this$static.ct, 2, 12, 6, 10, key);\n      break;\n    }\n    case 8: {\n      swap(this$static.ct, 8, 9, 10, 11, key);\n      swap(this$static.ct, 2, 19, 4, 21, key);\n      swap(this$static.ct, 3, 16, 5, 22, key);\n      break;\n    }\n    case 9: {\n      swap(this$static.ct, 4, 5, 6, 7, key);\n      swap(this$static.ct, 10, 18, 14, 22, key);\n      swap(this$static.ct, 11, 19, 15, 23, key);\n      break;\n    }\n    case 10: {\n      swap(this$static.ct, 20, 21, 22, 23, key);\n      swap(this$static.ct, 0, 8, 4, 14, key);\n      swap(this$static.ct, 3, 11, 7, 13, key);\n      break;\n    }\n    case 11: {\n      swap(this$static.ct, 12, 13, 14, 15, key);\n      swap(this$static.ct, 1, 20, 7, 18, key);\n      swap(this$static.ct, 0, 23, 6, 17, key);\n    }\n  }\n}\n\nfunction CenterCube_0() {\n  let i_0;\n  this.ct = createArray(24);\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    this.ct[i_0] = ~~(i_0 / 4);\n  }\n}\n\nfunction CenterCube_1() {\n  let i_0;\n  let m_0;\n  let t;\n  CenterCube_0.call(this);\n  for (i_0 = 0; i_0 < 23; ++i_0) {\n    t = i_0 + randomUIntBelow(24 - i_0);\n    if (this.ct[t] !== this.ct[i_0]) {\n      m_0 = this.ct[i_0];\n      this.ct[i_0] = this.ct[t];\n      this.ct[t] = m_0;\n    }\n  }\n}\n\ndefineSeed(156, 1, {}, CenterCube_0, CenterCube_1);\n\nlet ran$clinit_CornerCube = false;\nfunction $clinit_CornerCube() {\n  if (ran$clinit_CornerCube) {\n    return;\n  }\n  ran$clinit_CornerCube = true;\n  moveCube_0 = createArray(18);\n  initMove_0();\n}\n\nfunction $$init_2(this$static) {\n  this$static.cp = [0, 1, 2, 3, 4, 5, 6, 7];\n  this$static.co = [0, 0, 0, 0, 0, 0, 0, 0];\n}\n\nfunction $copy_2(this$static, c) {\n  let i_0;\n  for (i_0 = 0; i_0 < 8; ++i_0) {\n    this$static.cp[i_0] = c.cp[i_0];\n    this$static.co[i_0] = c.co[i_0];\n  }\n}\n\nfunction $move_3(this$static, idx) {\n  !this$static.temps && (this$static.temps = new CornerCube_0());\n  CornMult_0(this$static, moveCube_0[idx], this$static.temps);\n  $copy_2(this$static, this$static.temps);\n}\n\nfunction $setTwist_0(this$static, idx) {\n  let i_0;\n  let twst;\n  twst = 0;\n  for (i_0 = 6; i_0 >= 0; --i_0) {\n    twst += this$static.co[i_0] = idx % 3;\n    idx = ~~(idx / 3);\n  }\n  this$static.co[7] = (15 - twst) % 3;\n}\n\nfunction CornMult_0(a, b, prod) {\n  let corn;\n  let ori;\n  let oriA;\n  let oriB;\n  for (corn = 0; corn < 8; ++corn) {\n    prod.cp[corn] = a.cp[b.cp[corn]];\n    oriA = a.co[b.cp[corn]];\n    oriB = b.co[corn];\n    ori = oriA;\n    ori = ori + (oriA < 3 ? oriB : 6 - oriB);\n    ori = ori % 3;\n    (oriA >= 3 ? 1 : 0) ^ (oriB >= 3 ? 1 : 0) && (ori = ori + 3);\n    prod.co[corn] = ori;\n  }\n}\n\nfunction CornerCube_0() {\n  $$init_2(this);\n}\n\nfunction CornerCube_1(cperm, twist) {\n  $$init_2(this);\n  set8Perm(this.cp, cperm);\n  $setTwist_0(this, twist);\n}\n\nfunction CornerCube_2() {\n  CornerCube_1.call(this, randomUIntBelow(40320), randomUIntBelow(2187));\n}\n\nfunction initMove_0() {\n  let a;\n  let p_0;\n  moveCube_0[0] = new CornerCube_1(15120, 0);\n  moveCube_0[3] = new CornerCube_1(21021, 1494);\n  moveCube_0[6] = new CornerCube_1(8064, 1236);\n  moveCube_0[9] = new CornerCube_1(9, 0);\n  moveCube_0[12] = new CornerCube_1(1230, 412);\n  moveCube_0[15] = new CornerCube_1(224, 137);\n  for (a = 0; a < 18; a += 3) {\n    for (p_0 = 0; p_0 < 2; ++p_0) {\n      moveCube_0[a + p_0 + 1] = new CornerCube_0();\n      CornMult_0(moveCube_0[a + p_0], moveCube_0[a], moveCube_0[a + p_0 + 1]);\n    }\n  }\n}\n\ndefineSeed(\n  157,\n  1,\n  makeCastMap([Q$CornerCube]),\n  CornerCube_0,\n  CornerCube_1,\n  CornerCube_2,\n);\n_.temps = null;\nlet moveCube_0;\n\nlet ran$clinit_Edge3 = false;\nfunction $clinit_Edge3() {\n  if (ran$clinit_Edge3) {\n    return;\n  }\n  ran$clinit_Edge3 = true;\n  eprun = createArray(1937880);\n  sym2raw_0 = createArray(1538);\n  symstate = createArray(1538);\n  raw2sym_1 = createArray(11880);\n  syminv_0 = [0, 1, 6, 3, 4, 5, 2, 7];\n  mvrot = createArray(160, 12);\n  mvroto = createArray(160, 12);\n  factX = [\n    1, 1, 1, 3, 12, 60, 360, 2520, 20160, 181440, 1814400, 19958400, 239500800,\n  ];\n  FullEdgeMap = [0, 2, 4, 6, 1, 3, 7, 5, 8, 9, 10, 11];\n}\n\nfunction $circlex(this$static, a, b, c, d) {\n  const temp = this$static.edgeo[d];\n  this$static.edgeo[d] = this$static.edge[c];\n  this$static.edge[c] = this$static.edgeo[b];\n  this$static.edgeo[b] = this$static.edge[a];\n  this$static.edge[a] = temp;\n}\n\nfunction $get_2(this$static, end) {\n  let i_0;\n  let idx;\n  let v;\n  let valh;\n  let vall;\n  this$static.isStd || $std(this$static);\n  idx = 0;\n  vall = 1985229328;\n  valh = 47768;\n  for (i_0 = 0; i_0 < end; ++i_0) {\n    v = this$static.edge[i_0] << 2;\n    idx *= 12 - i_0;\n    if (v >= 32) {\n      idx += (valh >> (v - 32)) & 15;\n      valh -= 4368 << (v - 32);\n    } else {\n      idx += (vall >> v) & 15;\n      valh -= 4369;\n      vall -= 286331152 << v;\n    }\n  }\n  return idx;\n}\n\nfunction $getsym_0(this$static) {\n  let symcord1x;\n  const cord1x = $get_2(this$static, 4);\n  symcord1x = raw2sym_1[cord1x];\n  const symx = symcord1x & 7;\n  symcord1x >>= 3;\n  $rotate_0(this$static, symx);\n  const cord2x = $get_2(this$static, 10) % 20160;\n  return symcord1x * 20160 + cord2x;\n}\n\nfunction $move_4(this$static, i_0) {\n  this$static.isStd = false;\n  switch (i_0) {\n    case 0: {\n      circle(this$static.edge, 0, 4, 1, 5);\n      circle(this$static.edgeo, 0, 4, 1, 5);\n      break;\n    }\n    case 1: {\n      $swap_0(this$static.edge, 0, 4, 1, 5);\n      $swap_0(this$static.edgeo, 0, 4, 1, 5);\n      break;\n    }\n    case 2: {\n      circle(this$static.edge, 0, 5, 1, 4);\n      circle(this$static.edgeo, 0, 5, 1, 4);\n      break;\n    }\n    case 3: {\n      $swap_0(this$static.edge, 5, 10, 6, 11);\n      $swap_0(this$static.edgeo, 5, 10, 6, 11);\n      break;\n    }\n    case 4: {\n      circle(this$static.edge, 0, 11, 3, 8);\n      circle(this$static.edgeo, 0, 11, 3, 8);\n      break;\n    }\n    case 5: {\n      $swap_0(this$static.edge, 0, 11, 3, 8);\n      $swap_0(this$static.edgeo, 0, 11, 3, 8);\n      break;\n    }\n    case 6: {\n      circle(this$static.edge, 0, 8, 3, 11);\n      circle(this$static.edgeo, 0, 8, 3, 11);\n      break;\n    }\n    case 7: {\n      circle(this$static.edge, 2, 7, 3, 6);\n      circle(this$static.edgeo, 2, 7, 3, 6);\n      break;\n    }\n    case 8: {\n      $swap_0(this$static.edge, 2, 7, 3, 6);\n      $swap_0(this$static.edgeo, 2, 7, 3, 6);\n      break;\n    }\n    case 9: {\n      circle(this$static.edge, 2, 6, 3, 7);\n      circle(this$static.edgeo, 2, 6, 3, 7);\n      break;\n    }\n    case 10: {\n      $swap_0(this$static.edge, 4, 8, 7, 9);\n      $swap_0(this$static.edgeo, 4, 8, 7, 9);\n      break;\n    }\n    case 11: {\n      circle(this$static.edge, 1, 9, 2, 10);\n      circle(this$static.edgeo, 1, 9, 2, 10);\n      break;\n    }\n    case 12: {\n      $swap_0(this$static.edge, 1, 9, 2, 10);\n      $swap_0(this$static.edgeo, 1, 9, 2, 10);\n      break;\n    }\n    case 13: {\n      circle(this$static.edge, 1, 10, 2, 9);\n      circle(this$static.edgeo, 1, 10, 2, 9);\n      break;\n    }\n    case 14: {\n      $swap_0(this$static.edge, 0, 4, 1, 5);\n      $swap_0(this$static.edgeo, 0, 4, 1, 5);\n      circle(this$static.edge, 9, 11);\n      circle(this$static.edgeo, 8, 10);\n      break;\n    }\n    case 15: {\n      $swap_0(this$static.edge, 5, 10, 6, 11);\n      $swap_0(this$static.edgeo, 5, 10, 6, 11);\n      circle(this$static.edge, 1, 3);\n      circle(this$static.edgeo, 0, 2);\n      break;\n    }\n    case 16: {\n      $swap_0(this$static.edge, 0, 11, 3, 8);\n      $swap_0(this$static.edgeo, 0, 11, 3, 8);\n      circle(this$static.edge, 5, 7);\n      circle(this$static.edgeo, 4, 6);\n      break;\n    }\n    case 17: {\n      $swap_0(this$static.edge, 2, 7, 3, 6);\n      $swap_0(this$static.edgeo, 2, 7, 3, 6);\n      circle(this$static.edge, 8, 10);\n      circle(this$static.edgeo, 9, 11);\n      break;\n    }\n    case 18: {\n      $swap_0(this$static.edge, 4, 8, 7, 9);\n      $swap_0(this$static.edgeo, 4, 8, 7, 9);\n      circle(this$static.edge, 0, 2);\n      circle(this$static.edgeo, 1, 3);\n      break;\n    }\n    case 19: {\n      $swap_0(this$static.edge, 1, 9, 2, 10);\n      $swap_0(this$static.edgeo, 1, 9, 2, 10);\n      circle(this$static.edge, 4, 6);\n      circle(this$static.edgeo, 5, 7);\n    }\n  }\n}\n\nfunction $rot_1(this$static, r) {\n  this$static.isStd = false;\n  switch (r) {\n    case 0: {\n      $move_4(this$static, 14);\n      $move_4(this$static, 17);\n      break;\n    }\n    case 1: {\n      $circlex(this$static, 11, 5, 10, 6);\n      $circlex(this$static, 5, 10, 6, 11);\n      $circlex(this$static, 1, 2, 3, 0);\n      $circlex(this$static, 4, 9, 7, 8);\n      $circlex(this$static, 8, 4, 9, 7);\n      $circlex(this$static, 0, 1, 2, 3);\n      break;\n    }\n    case 2: {\n      $swapx(this$static, 4, 5);\n      $swapx(this$static, 5, 4);\n      $swapx(this$static, 11, 8);\n      $swapx(this$static, 8, 11);\n      $swapx(this$static, 7, 6);\n      $swapx(this$static, 6, 7);\n      $swapx(this$static, 9, 10);\n      $swapx(this$static, 10, 9);\n      $swapx(this$static, 1, 1);\n      $swapx(this$static, 0, 0);\n      $swapx(this$static, 3, 3);\n      $swapx(this$static, 2, 2);\n    }\n  }\n}\n\nfunction $rotate_0(this$static, r) {\n  while (r >= 2) {\n    r -= 2;\n    $rot_1(this$static, 1);\n    $rot_1(this$static, 2);\n  }\n  r !== 0 && $rot_1(this$static, 0);\n}\n\nfunction $set_4(this$static, idx) {\n  let i_0;\n  let p_0;\n  let parity;\n  let v;\n  let vall;\n  let valh;\n  vall = 0x76543210;\n  valh = 0xba98;\n  parity = 0;\n  for (i_0 = 0; i_0 < 11; ++i_0) {\n    p_0 = factX[11 - i_0];\n    v = ~~(idx / p_0);\n    idx = idx % p_0;\n    parity ^= v;\n    v <<= 2;\n    if (v >= 32) {\n      v = v - 32;\n      this$static.edge[i_0] = (valh >> v) & 15;\n      const m = (1 << v) - 1;\n      valh = (valh & m) + ((valh >> 4) & ~m);\n    } else {\n      this$static.edge[i_0] = (vall >> v) & 15;\n      const m = (1 << v) - 1;\n      vall = (vall & m) + ((vall >>> 4) & ~m) + (valh << 28);\n      valh = valh >> 4;\n    }\n  }\n  if ((parity & 1) === 0) {\n    this$static.edge[11] = vall;\n  } else {\n    this$static.edge[11] = this$static.edge[10];\n    this$static.edge[10] = vall;\n  }\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    this$static.edgeo[i_0] = i_0;\n  }\n  this$static.isStd = true;\n}\n\nfunction $set_5(this$static, e) {\n  let i_0;\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    this$static.edge[i_0] = e.edge[i_0];\n    this$static.edgeo[i_0] = e.edgeo[i_0];\n  }\n  this$static.isStd = e.isStd;\n}\n\nfunction $set_6(this$static, c) {\n  let i_0;\n  let parity;\n  let s;\n  let t;\n  this$static.temp === null && (this$static.temp = createArray(12));\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    this$static.temp[i_0] = i_0;\n    this$static.edge[i_0] = c.ep[FullEdgeMap[i_0] + 12] % 12;\n  }\n  parity = 1;\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    while (this$static.edge[i_0] !== i_0) {\n      t = this$static.edge[i_0];\n      this$static.edge[i_0] = this$static.edge[t];\n      this$static.edge[t] = t;\n      s = this$static.temp[i_0];\n      this$static.temp[i_0] = this$static.temp[t];\n      this$static.temp[t] = s;\n      parity ^= 1;\n    }\n  }\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    this$static.edge[i_0] = this$static.temp[c.ep[FullEdgeMap[i_0]] % 12];\n  }\n  return parity;\n}\n\nfunction $std(this$static) {\n  let i_0;\n  this$static.temp === null && (this$static.temp = createArray(12));\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    this$static.temp[this$static.edgeo[i_0]] = i_0;\n  }\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    this$static.edge[i_0] = this$static.temp[this$static.edge[i_0]];\n    this$static.edgeo[i_0] = i_0;\n  }\n  this$static.isStd = true;\n}\n\nfunction $swap_0(arr, a, b, c, d) {\n  let temp;\n  temp = arr[a];\n  arr[a] = arr[c];\n  arr[c] = temp;\n  temp = arr[b];\n  arr[b] = arr[d];\n  arr[d] = temp;\n}\n\nfunction $swapx(this$static, x, y) {\n  const temp = this$static.edge[x];\n  this$static.edge[x] = this$static.edgeo[y];\n  this$static.edgeo[y] = temp;\n}\n\nfunction Edge3_0() {\n  this.edge = createArray(12);\n  this.edgeo = createArray(12);\n}\n\nfunction createPrun_0() {\n  let chk;\n  let cord1;\n  let cord1x;\n  let cord2;\n  let cord2x;\n  let dep1m3;\n  let depm3;\n  let depth;\n  let end;\n  let find_0;\n  let i_0;\n  let i_;\n  let idx;\n  let idxx;\n  let inv;\n  let j;\n  let m_0;\n  let symState;\n  let symcord1;\n  let symcord1x;\n  let symx;\n  let val;\n  const e = new Edge3_0();\n  const f = new Edge3_0();\n  const g = new Edge3_0();\n  fill_0(eprun);\n  depth = 0;\n  done_0 = 1;\n  setPruning_0(eprun, 0, 0);\n  // var start = +new Date;\n  while (done_0 !== 31006080) {\n    inv = depth > 9;\n    depm3 = depth % 3;\n    dep1m3 = (depth + 1) % 3;\n    find_0 = inv ? 3 : depm3;\n    chk = inv ? depm3 : 3;\n    if (depth >= 9) {\n      break;\n    }\n    for (i_ = 0; i_ < 31006080; i_ += 16) {\n      val = eprun[~~i_ >> 4];\n      if (!inv && val === -1) {\n        continue;\n      }\n      for (i_0 = i_, end = i_ + 16; i_0 < end; ++i_0, val >>= 2) {\n        if ((val & 3) !== find_0) {\n          continue;\n        }\n        symcord1 = ~~(i_0 / 20160);\n        cord1 = sym2raw_0[symcord1];\n        cord2 = i_0 % 20160;\n        $set_4(e, cord1 * 20160 + cord2);\n        for (m_0 = 0; m_0 < 17; ++m_0) {\n          cord1x = getmvrot(e.edge, m_0 << 3, 4);\n          symcord1x = raw2sym_1[cord1x];\n          symx = symcord1x & 7;\n          symcord1x >>= 3;\n          cord2x = getmvrot(e.edge, (m_0 << 3) | symx, 10) % 20160;\n          idx = symcord1x * 20160 + cord2x;\n          if (getPruning_0(eprun, idx) !== chk) {\n            continue;\n          }\n          setPruning_0(eprun, inv ? i_0 : idx, dep1m3);\n          ++done_0;\n          if (inv) {\n            break;\n          }\n          symState = symstate[symcord1x];\n          if (symState === 1) {\n            continue;\n          }\n          $set_5(f, e);\n          $move_4(f, m_0);\n          $rotate_0(f, symx);\n          for (j = 1; (symState = (~~symState >> 1) & 65535) !== 0; ++j) {\n            if ((symState & 1) !== 1) {\n              continue;\n            }\n            $set_5(g, f);\n            $rotate_0(g, j);\n            idxx = symcord1x * 20160 + ($get_2(g, 10) % 20160);\n            if (getPruning_0(eprun, idxx) === chk) {\n              setPruning_0(eprun, idxx, dep1m3);\n              ++done_0;\n            }\n          }\n        }\n      }\n    }\n    ++depth;\n    // console.log(depth + '\\t' + done_0 + '\\t' + (+new Date - start));\n  }\n}\n\nfunction getPruning_0(table, index) {\n  return (table[index >> 4] >> ((index & 15) << 1)) & 3;\n}\n\nfunction getmvrot(ep, mrIdx, end) {\n  let i_0;\n  let idx;\n  let v;\n  let valh;\n  let vall;\n  const movo = mvroto[mrIdx];\n  const mov = mvrot[mrIdx];\n  idx = 0;\n  vall = 1985229328;\n  valh = 47768;\n  for (i_0 = 0; i_0 < end; ++i_0) {\n    v = movo[ep[mov[i_0]]] << 2;\n    idx *= 12 - i_0;\n    if (v >= 32) {\n      idx += (valh >> (v - 32)) & 15;\n      valh -= 4368 << (v - 32);\n    } else {\n      idx += (vall >> v) & 15;\n      valh -= 4369;\n      vall -= 286331152 << v;\n    }\n  }\n  return idx;\n}\n\nfunction getprun(edge) {\n  let cord1;\n  let cord1x;\n  let cord2;\n  let cord2x;\n  let depm3;\n  let depth;\n  let idx;\n  let m_0;\n  let symcord1;\n  let symcord1x;\n  let symx;\n  const e = new Edge3_0();\n  depth = 0;\n  depm3 = getPruning_0(eprun, edge);\n  if (depm3 === 3) {\n    return 10;\n  }\n  while (edge !== 0) {\n    depm3 === 0 ? (depm3 = 2) : --depm3;\n    symcord1 = ~~(edge / 20160);\n    cord1 = sym2raw_0[symcord1];\n    cord2 = edge % 20160;\n    $set_4(e, cord1 * 20160 + cord2);\n    for (m_0 = 0; m_0 < 17; ++m_0) {\n      cord1x = getmvrot(e.edge, m_0 << 3, 4);\n      symcord1x = raw2sym_1[cord1x];\n      symx = symcord1x & 7;\n      symcord1x >>= 3;\n      cord2x = getmvrot(e.edge, (m_0 << 3) | symx, 10) % 20160;\n      idx = symcord1x * 20160 + cord2x;\n      if (getPruning_0(eprun, idx) === depm3) {\n        ++depth;\n        edge = idx;\n        break;\n      }\n    }\n  }\n  return depth;\n}\n\nfunction getprun_0(edge, prun) {\n  const depm3 = getPruning_0(eprun, edge);\n  if (depm3 === 3) {\n    return 10;\n  }\n  return (((0x49249249 << depm3) >> prun) & 3) + prun - 1;\n  // (depm3 - prun + 16) % 3 + prun - 1;\n}\n\nfunction initMvrot() {\n  let i_0;\n  let m_0;\n  let r;\n  const e = new Edge3_0();\n  for (m_0 = 0; m_0 < 20; ++m_0) {\n    for (r = 0; r < 8; ++r) {\n      $set_4(e, 0);\n      $move_4(e, m_0);\n      $rotate_0(e, r);\n      for (i_0 = 0; i_0 < 12; ++i_0) {\n        mvrot[(m_0 << 3) | r][i_0] = e.edge[i_0];\n      }\n      $std(e);\n      for (i_0 = 0; i_0 < 12; ++i_0) {\n        mvroto[(m_0 << 3) | r][i_0] = e.temp[i_0];\n      }\n    }\n  }\n}\n\nfunction initRaw2Sym() {\n  let count;\n  let i_0;\n  let idx;\n  let j;\n  const e = new Edge3_0();\n  const occ = createArray(1485);\n  for (i_0 = 0; i_0 < 1485; i_0++) {\n    occ[i_0] = 0;\n  }\n  count = 0;\n  for (i_0 = 0; i_0 < 11880; ++i_0) {\n    if ((occ[~~i_0 >>> 3] & (1 << (i_0 & 7))) === 0) {\n      $set_4(e, i_0 * factX[8]);\n      for (j = 0; j < 8; ++j) {\n        idx = $get_2(e, 4);\n        idx === i_0 && (symstate[count] = (symstate[count] | (1 << j)) & 65535);\n        occ[~~idx >> 3] = occ[~~idx >> 3] | (1 << (idx & 7));\n        raw2sym_1[idx] = (count << 3) | syminv_0[j];\n        $rot_1(e, 0);\n        if (j % 2 === 1) {\n          $rot_1(e, 1);\n          $rot_1(e, 2);\n        }\n      }\n      sym2raw_0[count++] = i_0;\n    }\n  }\n}\n\nfunction setPruning_0(table, index, value) {\n  table[index >> 4] ^= (3 ^ value) << ((index & 15) << 1);\n}\n\ndefineSeed(158, 1, makeCastMap([Q$Edge3]), Edge3_0);\n_.isStd = true;\n_.temp = null;\nlet FullEdgeMap;\nlet done_0 = 0;\nlet eprun;\nlet factX;\nlet mvrot;\nlet mvroto;\nlet raw2sym_1;\nlet sym2raw_0;\nlet syminv_0;\nlet symstate;\n\nlet ran$clinit_EdgeCube = false;\nfunction $clinit_EdgeCube() {\n  if (ran$clinit_EdgeCube) {\n    return;\n  }\n  ran$clinit_EdgeCube = true;\n}\n\nfunction $checkEdge(this$static) {\n  let ck;\n  let i_0;\n  let parity;\n  ck = 0;\n  parity = false;\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    ck |= 1 << this$static.ep[i_0];\n    parity = parity !== this$static.ep[i_0] >= 12;\n  }\n  ck &= ~~ck >> 12;\n  return ck === 0 && !parity;\n}\n\nfunction $copy_3(this$static, c) {\n  let i_0;\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    this$static.ep[i_0] = c.ep[i_0];\n  }\n}\n\nfunction $move_5(this$static, m_0) {\n  const key = m_0 % 3;\n  m_0 = ~~(m_0 / 3);\n  switch (m_0) {\n    case 0: {\n      swap(this$static.ep, 0, 1, 2, 3, key);\n      swap(this$static.ep, 12, 13, 14, 15, key);\n      break;\n    }\n    case 1: {\n      swap(this$static.ep, 11, 15, 10, 19, key);\n      swap(this$static.ep, 23, 3, 22, 7, key);\n      break;\n    }\n    case 2: {\n      swap(this$static.ep, 0, 11, 6, 8, key);\n      swap(this$static.ep, 12, 23, 18, 20, key);\n      break;\n    }\n    case 3: {\n      swap(this$static.ep, 4, 5, 6, 7, key);\n      swap(this$static.ep, 16, 17, 18, 19, key);\n      break;\n    }\n    case 4: {\n      swap(this$static.ep, 1, 20, 5, 21, key);\n      swap(this$static.ep, 13, 8, 17, 9, key);\n      break;\n    }\n    case 5: {\n      swap(this$static.ep, 2, 9, 4, 10, key);\n      swap(this$static.ep, 14, 21, 16, 22, key);\n      break;\n    }\n    case 6: {\n      swap(this$static.ep, 0, 1, 2, 3, key);\n      swap(this$static.ep, 12, 13, 14, 15, key);\n      swap(this$static.ep, 9, 22, 11, 20, key);\n      break;\n    }\n    case 7: {\n      swap(this$static.ep, 11, 15, 10, 19, key);\n      swap(this$static.ep, 23, 3, 22, 7, key);\n      swap(this$static.ep, 2, 16, 6, 12, key);\n      break;\n    }\n    case 8: {\n      swap(this$static.ep, 0, 11, 6, 8, key);\n      swap(this$static.ep, 12, 23, 18, 20, key);\n      swap(this$static.ep, 3, 19, 5, 13, key);\n      break;\n    }\n    case 9: {\n      swap(this$static.ep, 4, 5, 6, 7, key);\n      swap(this$static.ep, 16, 17, 18, 19, key);\n      swap(this$static.ep, 8, 23, 10, 21, key);\n      break;\n    }\n    case 10: {\n      swap(this$static.ep, 1, 20, 5, 21, key);\n      swap(this$static.ep, 13, 8, 17, 9, key);\n      swap(this$static.ep, 14, 0, 18, 4, key);\n      break;\n    }\n    case 11: {\n      swap(this$static.ep, 2, 9, 4, 10, key);\n      swap(this$static.ep, 14, 21, 16, 22, key);\n      swap(this$static.ep, 7, 15, 1, 17, key);\n    }\n  }\n}\n\nfunction EdgeCube_0() {\n  let i_0;\n  this.ep = createArray(24);\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    this.ep[i_0] = i_0;\n  }\n}\n\nfunction EdgeCube_1() {\n  let i_0;\n  let m_0;\n  let t;\n  EdgeCube_0.call(this);\n  for (i_0 = 0; i_0 < 23; ++i_0) {\n    t = i_0 + randomUIntBelow(24 - i_0);\n    if (t !== i_0) {\n      m_0 = this.ep[i_0];\n      this.ep[i_0] = this.ep[t];\n      this.ep[t] = m_0;\n    }\n  }\n}\n\ndefineSeed(159, 1, {}, EdgeCube_0, EdgeCube_1);\n\nlet ran$clinit_FullCube_0 = false;\nfunction $clinit_FullCube_0() {\n  if (ran$clinit_FullCube_0) {\n    return;\n  }\n  ran$clinit_FullCube_0 = true;\n  move2rot = [35, 1, 34, 2, 4, 6, 22, 5, 19];\n}\n\nfunction $$init_3(this$static) {\n  this$static.moveBuffer = createArray(60);\n}\n\nfunction $compareTo_1(this$static, c) {\n  return this$static.value - c.value;\n}\n\nfunction $copy_4(this$static, c) {\n  let i_0;\n  $copy_3(this$static.edge, c.edge);\n  $copy_1(this$static.center, c.center);\n  $copy_2(this$static.corner, c.corner);\n  this$static.value = c.value;\n  this$static.add1 = c.add1;\n  this$static.length1 = c.length1;\n  this$static.length2 = c.length2;\n  this$static.length3 = c.length3;\n  this$static.sym = c.sym;\n  for (i_0 = 0; i_0 < 60; ++i_0) {\n    this$static.moveBuffer[i_0] = c.moveBuffer[i_0];\n  }\n  this$static.moveLength = c.moveLength;\n  this$static.edgeAvail = c.edgeAvail;\n  this$static.centerAvail = c.centerAvail;\n  this$static.cornerAvail = c.cornerAvail;\n}\n\nfunction $getCenter(this$static) {\n  while (this$static.centerAvail < this$static.moveLength) {\n    $move_2(\n      this$static.center,\n      this$static.moveBuffer[this$static.centerAvail++],\n    );\n  }\n  return this$static.center;\n}\n\nfunction $getCorner(this$static) {\n  while (this$static.cornerAvail < this$static.moveLength) {\n    $move_3(\n      this$static.corner,\n      this$static.moveBuffer[this$static.cornerAvail++] % 18,\n    );\n  }\n  return this$static.corner;\n}\n\nfunction $getEdge(this$static) {\n  while (this$static.edgeAvail < this$static.moveLength) {\n    $move_5(this$static.edge, this$static.moveBuffer[this$static.edgeAvail++]);\n  }\n  return this$static.edge;\n}\n\nfunction $getMoveString(this$static) {\n  let i_0;\n  let idx;\n  let move;\n  let rot;\n  let sb;\n  let sym;\n  const fixedMoves = new Array(\n    this$static.moveLength - (this$static.add1 ? 2 : 0),\n  );\n  idx = 0;\n  for (i_0 = 0; i_0 < this$static.length1; ++i_0) {\n    fixedMoves[idx++] = this$static.moveBuffer[i_0];\n  }\n  sym = this$static.sym;\n  for (\n    i_0 = this$static.length1 + (this$static.add1 ? 2 : 0);\n    i_0 < this$static.moveLength;\n    ++i_0\n  ) {\n    if (symmove[sym][this$static.moveBuffer[i_0]] >= 27) {\n      fixedMoves[idx++] = symmove[sym][this$static.moveBuffer[i_0]] - 9;\n      rot = move2rot[symmove[sym][this$static.moveBuffer[i_0]] - 27];\n      sym = symmult[sym][rot];\n    } else {\n      fixedMoves[idx++] = symmove[sym][this$static.moveBuffer[i_0]];\n    }\n  }\n  const finishSym = symmult[syminv[sym]][getSolvedSym($getCenter(this$static))];\n  sb = \"\";\n  sym = finishSym;\n  for (i_0 = idx - 1; i_0 >= 0; --i_0) {\n    move = fixedMoves[i_0];\n    move = ~~(move / 3) * 3 + (2 - (move % 3));\n    if (symmove[sym][move] >= 27) {\n      sb = `${sb}${move2str_1[symmove[sym][move] - 9]} `;\n      rot = move2rot[symmove[sym][move] - 27];\n      sym = symmult[sym][rot];\n    } else {\n      sb = `${sb}${move2str_1[symmove[sym][move]]} `;\n    }\n  }\n  return sb;\n}\n\nfunction $move_6(this$static, m_0) {\n  this$static.moveBuffer[this$static.moveLength++] = m_0;\n  return;\n}\n\nfunction FullCube_3() {\n  $$init_3(this);\n  this.edge = new EdgeCube_0();\n  this.center = new CenterCube_0();\n  this.corner = new CornerCube_0();\n}\n\nfunction FullCube_4(c) {\n  FullCube_3.call(this);\n  $copy_4(this, c);\n}\n\nfunction FullCube_5() {\n  $$init_3(this);\n  this.edge = new EdgeCube_1();\n  this.center = new CenterCube_1();\n  this.corner = new CornerCube_2();\n}\n\ndefineSeed(\n  160,\n  1,\n  makeCastMap([Q$FullCube_0, Q$Comparable]),\n  FullCube_3,\n  FullCube_4,\n  FullCube_5,\n);\n_.compareTo$ = function compareTo_1(c) {\n  return $compareTo_1(this, c);\n};\n_.add1 = false;\n_.center = null;\n_.centerAvail = 0;\n_.corner = null;\n_.cornerAvail = 0;\n_.edge = null;\n_.edgeAvail = 0;\n_.length1 = 0;\n_.length2 = 0;\n_.length3 = 0;\n_.moveLength = 0;\n_.sym = 0;\n_.value = 0;\nlet move2rot;\n\nfunction $compare(c1, c2) {\n  return c2.value - c1.value;\n}\n\nfunction $compare_0(c1, c2) {\n  return $compare(c1, c2);\n}\n\nfunction FullCube$ValueComparator_0() {}\n\ndefineSeed(161, 1, {}, FullCube$ValueComparator_0);\n_.compare = function compare(c1, c2) {\n  return $compare_0(c1, c2);\n};\n\nlet ran$clinit_Moves = false;\nfunction $clinit_Moves() {\n  if (ran$clinit_Moves) {\n    return;\n  }\n  ran$clinit_Moves = true;\n  let i_0;\n  let j;\n  move2str_1 = [\n    \"U  \",\n    \"U2 \",\n    \"U' \",\n    \"R  \",\n    \"R2 \",\n    \"R' \",\n    \"F  \",\n    \"F2 \",\n    \"F' \",\n    \"D  \",\n    \"D2 \",\n    \"D' \",\n    \"L  \",\n    \"L2 \",\n    \"L' \",\n    \"B  \",\n    \"B2 \",\n    \"B' \",\n    \"Uw \",\n    \"Uw2\",\n    \"Uw'\",\n    \"Rw \",\n    \"Rw2\",\n    \"Rw'\",\n    \"Fw \",\n    \"Fw2\",\n    \"Fw'\",\n    \"Dw \",\n    \"Dw2\",\n    \"Dw'\",\n    \"Lw \",\n    \"Lw2\",\n    \"Lw'\",\n    \"Bw \",\n    \"Bw2\",\n    \"Bw'\",\n  ];\n  move2std = [\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22,\n    23, 25, 28, 30, 31, 32, 34, 36,\n  ];\n  move3std = [\n    0, 1, 2, 4, 6, 7, 8, 9, 10, 11, 13, 15, 16, 17, 19, 22, 25, 28, 31, 34, 36,\n  ];\n  std2move = createArray(37);\n  std3move = createArray(37);\n  ckmv = createArray(37, 36);\n  ckmv2_0 = createArray(29, 28);\n  ckmv3 = createArray(21, 20);\n  skipAxis = createArray(36);\n  skipAxis2 = createArray(28);\n  skipAxis3 = createArray(20);\n  for (i_0 = 0; i_0 < 29; ++i_0) {\n    std2move[move2std[i_0]] = i_0;\n  }\n  for (i_0 = 0; i_0 < 21; ++i_0) {\n    std3move[move3std[i_0]] = i_0;\n  }\n  for (i_0 = 0; i_0 < 36; ++i_0) {\n    for (j = 0; j < 36; ++j) {\n      ckmv[i_0][j] =\n        ~~(i_0 / 3) === ~~(j / 3) ||\n        (~~(i_0 / 3) % 3 === ~~(j / 3) % 3 && i_0 > j);\n    }\n    ckmv[36][i_0] = false;\n  }\n  for (i_0 = 0; i_0 < 29; ++i_0) {\n    for (j = 0; j < 28; ++j) {\n      ckmv2_0[i_0][j] = ckmv[move2std[i_0]][move2std[j]];\n    }\n  }\n  for (i_0 = 0; i_0 < 21; ++i_0) {\n    for (j = 0; j < 20; ++j) {\n      ckmv3[i_0][j] = ckmv[move3std[i_0]][move3std[j]];\n    }\n  }\n  for (i_0 = 0; i_0 < 36; ++i_0) {\n    skipAxis[i_0] = 36;\n    for (j = i_0; j < 36; ++j) {\n      if (!ckmv[i_0][j]) {\n        skipAxis[i_0] = j - 1;\n        break;\n      }\n    }\n  }\n  for (i_0 = 0; i_0 < 28; ++i_0) {\n    skipAxis2[i_0] = 28;\n    for (j = i_0; j < 28; ++j) {\n      if (!ckmv2_0[i_0][j]) {\n        skipAxis2[i_0] = j - 1;\n        break;\n      }\n    }\n  }\n  for (i_0 = 0; i_0 < 20; ++i_0) {\n    skipAxis3[i_0] = 20;\n    for (j = i_0; j < 20; ++j) {\n      if (!ckmv3[i_0][j]) {\n        skipAxis3[i_0] = j - 1;\n        break;\n      }\n    }\n  }\n}\n\nlet ckmv;\nlet ckmv2_0;\nlet ckmv3;\nlet move2std;\nlet move2str_1;\nlet move3std;\nlet skipAxis;\nlet skipAxis2;\nlet skipAxis3;\nlet std2move;\nlet std3move;\n\nfunction $doSearch(this$static) {\n  let MAX_LENGTH2;\n  let MAX_LENGTH3;\n  let ct;\n  let edge;\n  let eparity;\n  let i_0;\n  let index;\n  let length12;\n  let length123;\n  let prun;\n  let s2ct;\n  let s2rl;\n  this$static.solution = \"\";\n  const ud = $getsym(new Center1_1($getCenter(this$static.c), 0));\n  const fb = $getsym(new Center1_1($getCenter(this$static.c), 1));\n  const rl = $getsym(new Center1_1($getCenter(this$static.c), 2));\n  const udprun = csprun[~~ud >> 6];\n  const fbprun = csprun[~~fb >> 6];\n  const rlprun = csprun[~~rl >> 6];\n  this$static.p1SolsCnt = 0;\n  this$static.arr2idx = 0;\n  $clear(this$static.p1sols.heap);\n  for (\n    this$static.length1 =\n      (udprun < fbprun ? udprun : fbprun) < rlprun\n        ? udprun < fbprun\n          ? udprun\n          : fbprun\n        : rlprun;\n    this$static.length1 < 100;\n    ++this$static.length1\n  ) {\n    if (\n      (rlprun <= this$static.length1 &&\n        $search1(\n          this$static,\n          ~~rl >>> 6,\n          rl & 63,\n          this$static.length1,\n          -1,\n          0,\n        )) ||\n      (udprun <= this$static.length1 &&\n        $search1(\n          this$static,\n          ~~ud >>> 6,\n          ud & 63,\n          this$static.length1,\n          -1,\n          0,\n        )) ||\n      (fbprun <= this$static.length1 &&\n        $search1(this$static, ~~fb >>> 6, fb & 63, this$static.length1, -1, 0))\n    ) {\n      break;\n    }\n  }\n  const p1SolsArr = $toArray_1(\n    this$static.p1sols,\n    initDim(\n      _3Lcs_threephase_FullCube_2_classLit,\n      makeCastMap([Q$FullCube_$1, Q$Serializable, Q$Object_$1]),\n      Q$FullCube_0,\n      0,\n      0,\n    ),\n  );\n\n  p1SolsArr.sort(function (a, b) {\n    return a.value - b.value;\n  });\n  MAX_LENGTH2 = 9;\n  do {\n    OUT: for (length12 = p1SolsArr[0].value; length12 < 100; ++length12) {\n      for (i_0 = 0; i_0 < p1SolsArr.length; ++i_0) {\n        if (p1SolsArr[i_0].value > length12) {\n          break;\n        }\n        if (length12 - p1SolsArr[i_0].length1 > MAX_LENGTH2) {\n          continue;\n        }\n        $copy_4(this$static.c1, p1SolsArr[i_0]);\n        $set_2(\n          this$static.ct2,\n          $getCenter(this$static.c1),\n          parity_0($getEdge(this$static.c1).ep),\n        );\n        s2ct = $getct(this$static.ct2);\n        s2rl = $getrl(this$static.ct2);\n        this$static.length1 = p1SolsArr[i_0].length1;\n        this$static.length2 = length12 - p1SolsArr[i_0].length1;\n        if ($search2(this$static, s2ct, s2rl, this$static.length2, 28, 0)) {\n          break OUT;\n        }\n      }\n    }\n    ++MAX_LENGTH2;\n  } while (length12 === 100);\n  this$static.arr2.sort(function (a, b) {\n    return a.value - b.value;\n  });\n  index = 0;\n  MAX_LENGTH3 = 13;\n  do {\n    OUT2: for (\n      length123 = this$static.arr2[0].value;\n      length123 < 100;\n      ++length123\n    ) {\n      for (i_0 = 0; i_0 < Math.min(this$static.arr2idx, 100); ++i_0) {\n        if (this$static.arr2[i_0].value > length123) {\n          break;\n        }\n        if (\n          length123 -\n            this$static.arr2[i_0].length1 -\n            this$static.arr2[i_0].length2 >\n          MAX_LENGTH3\n        ) {\n          continue;\n        }\n        eparity = $set_6(this$static.e12, $getEdge(this$static.arr2[i_0]));\n        $set_3(\n          this$static.ct3,\n          $getCenter(this$static.arr2[i_0]),\n          eparity ^ parity_0($getCorner(this$static.arr2[i_0]).cp),\n        );\n        ct = $getct_0(this$static.ct3);\n        edge = $get_2(this$static.e12, 10);\n        prun = getprun($getsym_0(this$static.e12));\n        if (\n          prun <=\n            length123 -\n              this$static.arr2[i_0].length1 -\n              this$static.arr2[i_0].length2 &&\n          $search3(\n            this$static,\n            edge,\n            ct,\n            prun,\n            length123 -\n              this$static.arr2[i_0].length1 -\n              this$static.arr2[i_0].length2,\n            20,\n            0,\n          )\n        ) {\n          index = i_0;\n          break OUT2;\n        }\n      }\n    }\n    ++MAX_LENGTH3;\n  } while (length123 === 100);\n  const solcube = new FullCube_4(this$static.arr2[index]);\n  this$static.length1 = solcube.length1;\n  this$static.length2 = solcube.length2;\n  const length_0 = length123 - this$static.length1 - this$static.length2;\n  for (i_0 = 0; i_0 < length_0; ++i_0) {\n    $move_6(solcube, move3std[this$static.move3[i_0]]);\n  }\n  this$static.solution = $getMoveString(solcube);\n}\n\nfunction $init2_0(this$static, sym) {\n  let i_0;\n  let next;\n  $copy_4(this$static.c1, this$static.c);\n  for (i_0 = 0; i_0 < this$static.length1; ++i_0) {\n    $move_6(this$static.c1, this$static.move1[i_0]);\n  }\n  switch (finish_0[sym]) {\n    case 0: {\n      $move_6(this$static.c1, 24);\n      $move_6(this$static.c1, 35);\n      this$static.move1[this$static.length1] = 24;\n      this$static.move1[this$static.length1 + 1] = 35;\n      this$static.add1 = true;\n      sym = 19;\n      break;\n    }\n    case 12869: {\n      $move_6(this$static.c1, 18);\n      $move_6(this$static.c1, 29);\n      this$static.move1[this$static.length1] = 18;\n      this$static.move1[this$static.length1 + 1] = 29;\n      this$static.add1 = true;\n      sym = 34;\n      break;\n    }\n    case 735470: {\n      this$static.add1 = false;\n      sym = 0;\n    }\n  }\n  $set_2(\n    this$static.ct2,\n    $getCenter(this$static.c1),\n    parity_0($getEdge(this$static.c1).ep),\n  );\n  const s2ct = $getct(this$static.ct2);\n  const s2rl = $getrl(this$static.ct2);\n  const ctp = ctprun[s2ct * 70 + s2rl];\n  this$static.c1.value = ctp + this$static.length1;\n  this$static.c1.length1 = this$static.length1;\n  this$static.c1.add1 = this$static.add1;\n  this$static.c1.sym = sym;\n  ++this$static.p1SolsCnt;\n  if (this$static.p1sols.heap.size < 500) {\n    next = new FullCube_4(this$static.c1);\n  } else {\n    next = $poll(this$static.p1sols);\n    next.value > this$static.c1.value && $copy_4(next, this$static.c1);\n  }\n  $add(this$static.p1sols, next);\n  return this$static.p1SolsCnt === 10000;\n}\n\nfunction $init3(this$static) {\n  let i_0;\n  $copy_4(this$static.c2, this$static.c1);\n  for (i_0 = 0; i_0 < this$static.length2; ++i_0) {\n    $move_6(this$static.c2, this$static.move2[i_0]);\n  }\n  if (!$checkEdge($getEdge(this$static.c2))) {\n    return false;\n  }\n  const eparity = $set_6(this$static.e12, $getEdge(this$static.c2));\n  $set_3(\n    this$static.ct3,\n    $getCenter(this$static.c2),\n    eparity ^ parity_0($getCorner(this$static.c2).cp),\n  );\n  const ct = $getct_0(this$static.ct3);\n  $get_2(this$static.e12, 10);\n  const prun = getprun($getsym_0(this$static.e12));\n  !this$static.arr2[this$static.arr2idx]\n    ? (this$static.arr2[this$static.arr2idx] = new FullCube_4(this$static.c2))\n    : $copy_4(this$static.arr2[this$static.arr2idx], this$static.c2);\n  this$static.arr2[this$static.arr2idx].value =\n    this$static.length1 + this$static.length2 + Math.max(prun, prun_0[ct]);\n  this$static.arr2[this$static.arr2idx].length2 = this$static.length2;\n  ++this$static.arr2idx;\n  return this$static.arr2idx === this$static.arr2.length;\n}\n\nfunction $randomState(this$static) {\n  init_5();\n  this$static.c = new FullCube_5();\n  $doSearch(this$static);\n  return this$static.solution;\n}\n\nfunction $search1(this$static, ct, sym, maxl, lm, depth) {\n  let axis;\n  let ctx;\n  let m_0;\n  let power;\n  let prun;\n  let symx;\n  if (ct === 0) {\n    return maxl === 0 && $init2_0(this$static, sym);\n  }\n  for (axis = 0; axis < 27; axis += 3) {\n    if (axis === lm || axis === lm - 9 || axis === lm - 18) {\n      continue;\n    }\n    for (power = 0; power < 3; ++power) {\n      m_0 = axis + power;\n      ctx = ctsmv[ct][symmove[sym][m_0]];\n      prun = csprun[~~ctx >>> 6];\n      if (prun >= maxl) {\n        if (prun > maxl) {\n          break;\n        }\n        continue;\n      }\n      symx = symmult[sym][ctx & 63];\n      ctx >>>= 6;\n      this$static.move1[depth] = m_0;\n      if ($search1(this$static, ctx, symx, maxl - 1, axis, depth + 1)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nfunction $search2(this$static, ct, rl, maxl, lm, depth) {\n  let ctx;\n  let m_0;\n  let prun;\n  let rlx;\n  if (ct === 0 && ctprun[rl] === 0) {\n    return maxl === 0 && $init3(this$static);\n  }\n  for (m_0 = 0; m_0 < 23; ++m_0) {\n    if (ckmv2_0[lm][m_0]) {\n      m_0 = skipAxis2[m_0];\n      continue;\n    }\n    ctx = ctmv[ct][m_0];\n    rlx = rlmv[rl][m_0];\n    prun = ctprun[ctx * 70 + rlx];\n    if (prun >= maxl) {\n      prun > maxl && (m_0 = skipAxis2[m_0]);\n      continue;\n    }\n    this$static.move2[depth] = move2std[m_0];\n    if ($search2(this$static, ctx, rlx, maxl - 1, m_0, depth + 1)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction $search3(this$static, edge, ct, prun, maxl, lm, depth) {\n  let cord1x;\n  let cord2x;\n  let ctx;\n  let edgex;\n  let m_0;\n  let prun1;\n  let prunx;\n  let symcord1x;\n  let symx;\n  if (maxl === 0) {\n    return edge === 0 && ct === 0;\n  }\n  $set_4(this$static.tempe[depth], edge);\n  for (m_0 = 0; m_0 < 17; ++m_0) {\n    if (ckmv3[lm][m_0]) {\n      m_0 = skipAxis3[m_0];\n      continue;\n    }\n    ctx = ctmove[ct][m_0];\n    prun1 = prun_0[ctx];\n    if (prun1 >= maxl) {\n      prun1 > maxl && m_0 < 14 && (m_0 = skipAxis3[m_0]);\n      continue;\n    }\n    edgex = getmvrot(this$static.tempe[depth].edge, m_0 << 3, 10);\n    cord1x = ~~(edgex / 20160);\n    symcord1x = raw2sym_1[cord1x];\n    symx = symcord1x & 7;\n    symcord1x >>= 3;\n    cord2x =\n      getmvrot(this$static.tempe[depth].edge, (m_0 << 3) | symx, 10) % 20160;\n    prunx = getprun_0(symcord1x * 20160 + cord2x, prun);\n    if (prunx >= maxl) {\n      prunx > maxl && m_0 < 14 && (m_0 = skipAxis3[m_0]);\n      continue;\n    }\n    if ($search3(this$static, edgex, ctx, prunx, maxl - 1, m_0, depth + 1)) {\n      this$static.move3[depth] = m_0;\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction Search_4() {\n  let i_0;\n  this.p1sols = new PriorityQueue_0(new FullCube$ValueComparator_0());\n  this.move1 = createArray(15);\n  this.move2 = createArray(20);\n  this.move3 = createArray(20);\n  this.c1 = new FullCube_3();\n  this.c2 = new FullCube_3();\n  this.ct2 = new Center2_0();\n  this.ct3 = new Center3_0();\n  this.e12 = new Edge3_0();\n  this.tempe = createArray(20);\n  this.arr2 = createArray(100);\n  for (i_0 = 0; i_0 < 20; ++i_0) {\n    this.tempe[i_0] = new Edge3_0();\n  }\n}\n\nfunction init_5() {\n  if (inited_2) {\n    return;\n  }\n  initSym_0();\n  raw2sym = createArray(735471);\n  initSym2Raw();\n  createMoveTable();\n  raw2sym = null;\n  createPrun();\n  init_3();\n  init_4();\n  initMvrot();\n  initRaw2Sym();\n  createPrun_0();\n  inited_2 = true;\n}\n\ndefineSeed(163, 1, makeCastMap([Q$Search_0]), Search_4);\n_.add1 = false;\n_.arr2idx = 0;\n_.c = null;\n_.length1 = 0;\n_.length2 = 0;\n_.p1SolsCnt = 0;\n_.solution = \"\";\nlet inited_2 = false;\n\nlet ran$clinit_Util_0 = false;\nfunction $clinit_Util_0() {\n  if (ran$clinit_Util_0) {\n    return;\n  }\n  ran$clinit_Util_0 = true;\n}\n\nfunction parity_0(arr) {\n  let i_0;\n  let j;\n  let len;\n  let parity;\n  parity = 0;\n  for (i_0 = 0, len = arr.length; i_0 < len; ++i_0) {\n    for (j = i_0; j < len; ++j) {\n      arr[i_0] > arr[j] && (parity ^= 1);\n    }\n  }\n  return parity;\n}\n\nfunction swap(arr, a, b, c, d, key) {\n  let temp;\n  switch (key) {\n    case 0: {\n      temp = arr[d];\n      arr[d] = arr[c];\n      arr[c] = arr[b];\n      arr[b] = arr[a];\n      arr[a] = temp;\n      return;\n    }\n    case 1: {\n      temp = arr[a];\n      arr[a] = arr[c];\n      arr[c] = temp;\n      temp = arr[b];\n      arr[b] = arr[d];\n      arr[d] = temp;\n      return;\n    }\n    case 2: {\n      temp = arr[a];\n      arr[a] = arr[b];\n      arr[b] = arr[c];\n      arr[c] = arr[d];\n      arr[d] = temp;\n      return;\n    }\n  }\n}\n\nfunction Class_0() {}\n\nfunction createForArray(packageName, className, seedId, componentType) {\n  const clazz = new Class_0();\n  clazz.typeName = packageName + className;\n  isInstantiable(seedId !== 0 ? -seedId : 0) &&\n    setClassLiteral(seedId !== 0 ? -seedId : 0, clazz);\n  clazz.modifiers = 4;\n  clazz.superclass = Ljava_lang_Object_2_classLit;\n  clazz.componentType = componentType;\n  return clazz;\n}\n\nfunction createForClass(packageName, className, seedId, superclass) {\n  const clazz = new Class_0();\n  clazz.typeName = packageName + className;\n  isInstantiable(seedId) && setClassLiteral(seedId, clazz);\n  clazz.superclass = superclass;\n  return clazz;\n}\n\nfunction getSeedFunction(clazz) {\n  const func = seedTable[clazz.seedId];\n  clazz = null;\n  return func;\n}\n\nfunction isInstantiable(seedId) {\n  return typeof seedId === \"number\" && seedId > 0;\n}\n\nfunction setClassLiteral(seedId, clazz) {\n  let proto;\n  clazz.seedId = seedId;\n  if (seedId === 2) {\n    proto = String.prototype;\n  } else {\n    if (seedId > 0) {\n      let seed = getSeedFunction(clazz);\n      if (seed) {\n        proto = seed.prototype;\n      } else {\n        seed = seedTable[seedId] = function () {};\n        seed.___clazz$ = clazz;\n        return;\n      }\n    } else {\n      return;\n    }\n  }\n  proto.___clazz$ = clazz;\n}\n\n_.val$outerIter = null;\n\nfunction $add(this$static, o) {\n  if ($offer(this$static, o)) {\n    return true;\n  }\n}\n\nfunction $$init_6(this$static) {\n  this$static.array = initDim(\n    _3Ljava_lang_Object_2_classLit,\n    makeCastMap([Q$Serializable, Q$Object_$1]),\n    Q$Object,\n    0,\n    0,\n  );\n}\n\nfunction $add_0(this$static, o) {\n  setCheck(this$static.array, this$static.size++, o);\n  return true;\n}\n\nfunction $clear(this$static) {\n  this$static.array = initDim(\n    _3Ljava_lang_Object_2_classLit,\n    makeCastMap([Q$Serializable, Q$Object_$1]),\n    Q$Object,\n    0,\n    0,\n  );\n  this$static.size = 0;\n}\n\nfunction $get_4(this$static, index) {\n  return this$static.array[index];\n}\n\nfunction $remove_0(this$static, index) {\n  const previous = this$static.array[index];\n  splice_0(this$static.array, index, 1);\n  --this$static.size;\n  return previous;\n}\n\nfunction $set_7(this$static, index, o) {\n  const previous = this$static.array[index];\n  setCheck(this$static.array, index, o);\n  return previous;\n}\n\nfunction $toArray_0(this$static, out) {\n  let i_0;\n  out.length < this$static.size && (out = createFrom(out, this$static.size));\n  for (i_0 = 0; i_0 < this$static.size; ++i_0) {\n    setCheck(out, i_0, this$static.array[i_0]);\n  }\n  out.length > this$static.size && setCheck(out, this$static.size, null);\n  return out;\n}\n\nfunction ArrayList_1() {\n  $$init_6(this);\n  this.array.length = 500;\n}\n\nfunction splice_0(array, index, deleteCount) {\n  array.splice(index, deleteCount);\n}\n_.size = 0;\n\nfunction binarySearch_0(sortedArray, key) {\n  let high;\n  let low;\n  let mid;\n  let midVal;\n  low = 0;\n  high = sortedArray.length - 1;\n  while (low <= high) {\n    mid = low + (~~(high - low) >> 1);\n    midVal = sortedArray[mid];\n    if (midVal < key) {\n      low = mid + 1;\n    } else if (midVal > key) {\n      high = mid - 1;\n    } else {\n      return mid;\n    }\n  }\n  return -low - 1;\n}\n\nfunction fill_0(a) {\n  fill_1(a, a.length);\n}\n\nfunction fill_1(a, toIndex) {\n  let i_0;\n  for (i_0 = 0; i_0 < toIndex; ++i_0) {\n    a[i_0] = -1;\n  }\n}\n\nfunction $mergeHeaps(this$static, node) {\n  let smallestChild;\n  let leftChild;\n  let rightChild;\n  let smallestChild_0;\n  const heapSize = this$static.heap.size;\n  const value = $get_4(this$static.heap, node);\n  while (node * 2 + 1 < heapSize) {\n    smallestChild =\n      ((leftChild = 2 * node + 1),\n      (rightChild = leftChild + 1),\n      (smallestChild_0 = leftChild),\n      rightChild < heapSize &&\n        $compare_0(\n          $get_4(this$static.heap, rightChild),\n          $get_4(this$static.heap, leftChild),\n        ) < 0 &&\n        (smallestChild_0 = rightChild),\n      smallestChild_0);\n    if ($compare_0(value, $get_4(this$static.heap, smallestChild)) < 0) {\n      break;\n    }\n    $set_7(this$static.heap, node, $get_4(this$static.heap, smallestChild));\n    node = smallestChild;\n  }\n  $set_7(this$static.heap, node, value);\n}\n\nfunction $offer(this$static, e) {\n  let childNode;\n  let node;\n  node = this$static.heap.size;\n  $add_0(this$static.heap, e);\n  while (node > 0) {\n    childNode = node;\n    node = ~~((node - 1) / 2);\n    if ($compare_0($get_4(this$static.heap, node), e) <= 0) {\n      $set_7(this$static.heap, childNode, e);\n      return true;\n    }\n    $set_7(this$static.heap, childNode, $get_4(this$static.heap, node));\n  }\n  $set_7(this$static.heap, node, e);\n  return true;\n}\n\nfunction $poll(this$static) {\n  if (this$static.heap.size === 0) {\n    return null;\n  }\n  const value = $get_4(this$static.heap, 0);\n  $removeAtIndex(this$static);\n  return value;\n}\n\nfunction $removeAtIndex(this$static) {\n  const lastValue = $remove_0(this$static.heap, this$static.heap.size - 1);\n  if (0 < this$static.heap.size) {\n    $set_7(this$static.heap, 0, lastValue);\n    $mergeHeaps(this$static, 0);\n  }\n}\n\nfunction $toArray_1(this$static, a) {\n  return $toArray_0(this$static.heap, a);\n}\n\nfunction PriorityQueue_0(cmp) {\n  this.heap = new ArrayList_1();\n  this.cmp = cmp;\n}\n\ndefineSeed(239, 1, {}, PriorityQueue_0);\n_.cmp = null;\n_.heap = null;\n\nconst Ljava_lang_Object_2_classLit = createForClass(\n  \"java.lang.\",\n  \"Object\",\n  1,\n  null,\n);\nconst _3Ljava_lang_Object_2_classLit = createForArray(\n  \"[Ljava.lang.\",\n  \"Object;\",\n  356,\n  Ljava_lang_Object_2_classLit,\n);\nconst Lcs_threephase_FullCube_2_classLit = createForClass(\n  \"cs.threephase.\",\n  \"FullCube\",\n  160,\n  Ljava_lang_Object_2_classLit,\n);\nconst _3Lcs_threephase_FullCube_2_classLit = createForArray(\n  \"[Lcs.threephase.\",\n  \"FullCube;\",\n  381,\n  Lcs_threephase_FullCube_2_classLit,\n);\n\nlet searcher;\n\nlet raninit = false;\nfunction init() {\n  if (raninit) {\n    return;\n  }\n  raninit = true;\n  $clinit_Moves();\n  $clinit_Util_0();\n  $clinit_Center1();\n  $clinit_Center2();\n  $clinit_Center3();\n  $clinit_Edge3();\n  $clinit_CornerCube();\n  $clinit_EdgeCube();\n  $clinit_FullCube_0();\n  searcher = new Search_4();\n}\n\nexport function initialize(): void {\n  init();\n  init_5();\n}\n\nexport async function random444Scramble(): Promise<Alg> {\n  mustBeInsideWorker();\n  init();\n  const suffix = Alg.fromString($randomState(searcher));\n  return (await getRandomScramble333()).concat(suffix);\n}\n"],
  "mappings": "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",
  "names": ["Cnk", "fact", "i", "j", "circle", "arr", "moreArgs", "length", "temp", "set8Perm", "idx", "even", "val", "prt", "p", "v", "m", "createArray", "length1", "length2", "result", "i", "_", "seedTable", "CM$", "Q$Object", "Q$Serializable", "Q$Center1", "Q$CornerCube", "Q$Edge3", "Q$FullCube_0", "Q$FullCube_$1", "Q$Comparable", "Q$Search_0", "Q$Object_$1", "newSeed", "id", "defineSeed", "superSeed", "castableTypeMap", "moreArgs", "seed", "arg", "makeCastMap", "a", "i_0", "c", "Array_0", "createFrom", "length_0", "createFromSeed", "initValues", "seedType", "array", "value", "initDim", "arrayClass", "queryId", "$clinit_Array$ExpandoWrapper", "wrapArray", "expandoNames_0", "expandoValues_0", "setCheck", "index", "ran$clinit_Array$ExpandoWrapper", "initExpandos", "protoType", "expandoNames", "expandoValues", "name_0", "canCast", "src", "dstId", "instanceOf", "ran$clinit_Center1", "$clinit_Center1", "ctsmv", "sym2raw", "csprun", "symmult", "symmove", "syminv", "finish_0", "$$init_1", "this$static", "$equals", "obj", "$get_1", "idx", "r", "Cnk", "$getsym", "cord", "j", "raw2sym", "raw2sym_0", "$rot", "$move", "m_0", "key", "swap", "$rotate", "$set_0", "$set_1", "Center1_0", "Center1_1", "urf", "Center1_2", "ct", "createMoveTable", "d", "createPrun", "check", "depth", "done", "inv", "select", "fill_0", "getSolvedSym", "cube", "initSym_0", "k_0", "e", "f", "initSym2Raw", "count", "occ", "n", "binarySearch_0", "ran$clinit_Center2", "$clinit_Center2", "rlmv", "ctmv", "rlrot", "ctrot", "ctprun", "pmv", "$getct", "$getrl", "$move_0", "$rot_0", "$set_2", "edgeParity", "$setct", "$setrl", "Center2_0", "init_3", "ctx", "rl", "rlx", "move2std", "ran$clinit_Center3", "$clinit_Center3", "ctmove", "pmove", "prun_0", "rl2std", "std2rl", "$getct_0", "idxrl", "$move_1", "$set_3", "eXc_parity", "parity", "$setct_0", "idxfb", "Center3_0", "init_4", "$copy_1", "$move_2", "CenterCube_0", "CenterCube_1", "t", "randomUIntBelow", "ran$clinit_CornerCube", "$clinit_CornerCube", "moveCube_0", "initMove_0", "$$init_2", "$copy_2", "$move_3", "CornerCube_0", "CornMult_0", "$setTwist_0", "twst", "b", "prod", "corn", "ori", "oriA", "oriB", "CornerCube_1", "cperm", "twist", "set8Perm", "CornerCube_2", "p_0", "ran$clinit_Edge3", "$clinit_Edge3", "eprun", "sym2raw_0", "symstate", "raw2sym_1", "syminv_0", "mvrot", "mvroto", "factX", "FullEdgeMap", "$circlex", "temp", "$get_2", "end", "v", "valh", "vall", "$std", "$getsym_0", "symcord1x", "cord1x", "symx", "$rotate_0", "cord2x", "$move_4", "circle", "$swap_0", "$rot_1", "$swapx", "$set_4", "m", "$set_5", "$set_6", "s", "arr", "x", "y", "Edge3_0", "createPrun_0", "chk", "cord1", "cord2", "dep1m3", "depm3", "find_0", "i_", "idxx", "symState", "symcord1", "val", "g", "done_0", "setPruning_0", "getmvrot", "getPruning_0", "table", "ep", "mrIdx", "movo", "mov", "getprun", "edge", "getprun_0", "prun", "initMvrot", "initRaw2Sym", "ran$clinit_EdgeCube", "$clinit_EdgeCube", "$checkEdge", "ck", "$copy_3", "$move_5", "EdgeCube_0", "EdgeCube_1", "ran$clinit_FullCube_0", "$clinit_FullCube_0", "move2rot", "$$init_3", "$compareTo_1", "$copy_4", "$getCenter", "$getCorner", "$getEdge", "$getMoveString", "move", "rot", "sb", "sym", "fixedMoves", "finishSym", "move2str_1", "$move_6", "FullCube_3", "FullCube_4", "FullCube_5", "$compare", "c1", "c2", "$compare_0", "FullCube$ValueComparator_0", "ran$clinit_Moves", "$clinit_Moves", "move3std", "std2move", "std3move", "ckmv", "ckmv2_0", "ckmv3", "skipAxis", "skipAxis2", "skipAxis3", "$doSearch", "MAX_LENGTH2", "MAX_LENGTH3", "eparity", "length12", "length123", "s2ct", "s2rl", "ud", "fb", "udprun", "fbprun", "rlprun", "$clear", "$search1", "p1SolsArr", "$toArray_1", "_3Lcs_threephase_FullCube_2_classLit", "OUT", "parity_0", "$search2", "OUT2", "$search3", "solcube", "$init2_0", "next", "ctp", "$poll", "$add", "$init3", "$randomState", "init_5", "maxl", "lm", "axis", "power", "edgex", "prun1", "prunx", "Search_4", "PriorityQueue_0", "inited_2", "ran$clinit_Util_0", "$clinit_Util_0", "len", "Class_0", "createForArray", "packageName", "className", "seedId", "componentType", "clazz", "isInstantiable", "setClassLiteral", "Ljava_lang_Object_2_classLit", "createForClass", "superclass", "getSeedFunction", "func", "proto", "o", "$offer", "$$init_6", "_3Ljava_lang_Object_2_classLit", "$add_0", "$get_4", "$remove_0", "previous", "splice_0", "$set_7", "$toArray_0", "out", "ArrayList_1", "deleteCount", "sortedArray", "high", "low", "mid", "midVal", "fill_1", "toIndex", "$mergeHeaps", "node", "smallestChild", "leftChild", "rightChild", "smallestChild_0", "heapSize", "childNode", "$removeAtIndex", "lastValue", "cmp", "Lcs_threephase_FullCube_2_classLit", "searcher", "raninit", "init", "initialize", "random444Scramble", "mustBeInsideWorker", "suffix", "Alg", "random333Scramble"]
}
