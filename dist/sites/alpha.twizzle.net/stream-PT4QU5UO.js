import{i as v,j as d}from"./chunk-ULM6IQGD.js";import"./chunk-OUWZ2PU5.js";var r=class{constructor(e){this.websocket=new WebSocket(e),this.websocket.onopen=this.onopen.bind(this),this.websocket.onerror=this.onerror.bind(this),this.websocket.onmessage=this.onmessage.bind(this)}sendMoveEvent(e){this.sendProxyEvent({event:"move",data:e})}sendOrientationEvent(e){this.sendProxyEvent({event:"orientation",data:e})}sendResetEvent(){this.sendProxyEvent({event:"reset"})}sendProxyEvent(e){this.websocket.send(JSON.stringify(e))}onopen(){console.log("Sending socket is open!")}onerror(e){console.error("WebSocket sender error:",e)}onmessage(e){}},i=class{constructor(e,t){if(!t){console.log("No socket origin specified. Will not attempt to connect.");return}this.websocket=new WebSocket(e),console.log(this.websocket),this.websocket.onopen=this.onopen.bind(this),this.websocket.onerror=this.onerror.bind(this),this.websocket.onmessage=this.onmessage.bind(this)}onopen(){console.log("Receiving socket is open!")}onerror(e){console.error("WebSocket receiver error:",e)}onmessage(e){this.onProxyEvent(JSON.parse(e.data))}};var a=class extends EventTarget{constructor(t){super();this.socket=new WebSocket(t),this.socket.onmessage=this.onMessage.bind(this)}onMessage(t){try{let o=JSON.parse(t.data);if(o.event==="move"){let n=o.data.latestMove;if(n.type!=="blockMove")throw new Error("Invalid move!");this.dispatchEvent(new CustomEvent("move",{detail:{move:new d(new v(n.family),n.amount)}}))}}catch(o){console.error("Could not handle message:",o)}}},c=class{async streams(){return(await(await fetch("https://api.twizzle.net/v0/streams")).json()).streams}connect(e){return new a(`wss://api.twizzle.net/v0/streams/${e}/socket`)}};export{c as ExperimentalTwizzleStreamServer,i as ExperimentalWebSocketProxyReceiver,r as ExperimentalWebSocketProxySender};
//# sourceMappingURL=stream-PT4QU5UO.js.map
