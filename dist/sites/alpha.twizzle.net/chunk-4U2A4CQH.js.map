{
  "version": 3,
  "sources": ["../../../src/sites/alpha.twizzle.net/explore/app.ts"],
  "sourcesContent": ["import {\n  connectSmartPuzzle,\n  debugKeyboardConnect,\n  MoveEvent,\n} from \"../../../cubing/bluetooth\";\nimport { KTransformation } from \"../../../cubing/kpuzzle\";\nimport {\n  getPuzzleDescriptionString,\n  getPG3DNamedPuzzles,\n  PuzzleGeometry,\n} from \"../../../cubing/puzzle-geometry\";\nimport type { PuzzleDescriptionString } from \"../../../cubing/puzzle-geometry/PGPuzzles\";\nimport type { TwistyAlgEditor, TwistyPlayer } from \"../../../cubing/twisty\";\nimport { constructTwistyPlayer } from \"./twisty-player\";\nimport { getURLParam, setAlgParamEnabled, setURLParams } from \"./url-params\";\n\nimport \"./TwistyPuzzleDescriptionInput\";\nimport type { PuzzleLoader } from \"../../../cubing/puzzles\";\n\nexport class TwizzleExplorerApp {\n  twistyPlayer: TwistyPlayer;\n  twistyAlgEditor: TwistyAlgEditor;\n  configUI: ConfigUI;\n  dialog: Dialog;\n  constructor() {\n    this.twistyPlayer = constructTwistyPlayer();\n    this.twistyPlayer.experimentalSetFlashLevel(\"none\");\n    document.querySelector(\"#twisty-wrapper\")?.appendChild(this.twistyPlayer);\n\n    this.twistyAlgEditor = document.querySelector(\"twisty-alg-editor\")!;\n    this.twistyAlgEditor.debugNeverRequestTimestamp = true; // TODO\n    this.twistyAlgEditor.twistyPlayer = this.twistyPlayer;\n\n    this.configUI = new ConfigUI(this);\n    new SelectUI(this);\n    const moveCountElem = document.querySelector(\"#move-count\")!;\n    this.twistyPlayer.experimentalModel.moveCount.addFreshListener(\n      (moveCount) => {\n        moveCountElem.textContent = `Moves: ${moveCount}`;\n      },\n    );\n\n    this.dialog = new Dialog();\n\n    const twistyPuzzleDescriptionInput = document.querySelector(\n      \"twisty-puzzle-description-input\",\n    )!;\n    this.twistyPlayer.experimentalModel.puzzleLoader.addFreshListener(\n      async (puzzleLoader: PuzzleLoader) => {\n        // TODO: debounce?\n        twistyPuzzleDescriptionInput.puzzleDescription = (\n          await puzzleLoader.pg!()\n        ).puzzleDescription;\n      },\n    );\n    twistyPuzzleDescriptionInput.addEventListener(\n      \"puzzle-change\",\n      (\n        e: CustomEvent<{\n          descriptionString: string;\n        }>,\n      ) => {\n        // console.log(e.detail!.descriptionString)\n        this.setPuzzleDescription(e.detail.descriptionString);\n      },\n    );\n  }\n\n  // TODO: Find out how to avoid the need for this.\n  async puzzleGeometry(): Promise<PuzzleGeometry> {\n    const puzzleLoader =\n      await this.twistyPlayer.experimentalModel.puzzleLoader.get();\n\n    if (!puzzleLoader.pg) {\n      throw new Error(\"could not get PG from puzzle loader\");\n    }\n    return puzzleLoader.pg();\n  }\n\n  setPuzzleName(puzzleName: string): void {\n    const descString = getPuzzleDescriptionString(puzzleName);\n    this.configUI.descInput.value = descString;\n    this.twistyPlayer.experimentalModel.setupTransformation.set(null);\n    setAlgParamEnabled(true);\n    this.twistyPlayer.experimentalPuzzleDescription = descString;\n    setURLParams({ puzzle: puzzleName, \"puzzle-description\": \"\" });\n  }\n\n  setPuzzleDescription(descString: PuzzleDescriptionString): void {\n    this.configUI.puzzleNameSelect.value = \"\";\n    this.twistyPlayer.experimentalModel.setupTransformation.set(null);\n    setAlgParamEnabled(true);\n    this.twistyPlayer.experimentalPuzzleDescription = descString;\n    this.configUI.descInput.value = descString;\n    setURLParams({\n      puzzle: \"\",\n      \"puzzle-description\": descString,\n    });\n  }\n\n  showText(text: string): void {\n    navigator.clipboard.writeText(text);\n    this.dialog.show(text);\n  }\n}\n\nclass Dialog {\n  dialogElement = document.querySelector(\n    \"#stuff-for-nerds\",\n  ) as HTMLDialogElement;\n  textarea = this.dialogElement.querySelector(\n    \"textarea\",\n  ) as HTMLTextAreaElement;\n  constructor() {}\n\n  show(text: string): void {\n    this.textarea.value = text;\n    (this.dialogElement as any).showModal();\n  }\n}\n\nclass ConfigUI {\n  puzzleNameSelect = document.body.querySelector(\n    \"#puzzle-name\",\n  ) as HTMLSelectElement;\n  scrambleButton = document.body.querySelector(\n    \"#scramble\",\n  ) as HTMLButtonElement;\n  resetButton = document.body.querySelector(\"#reset\") as HTMLButtonElement;\n  toggleButton = document.body.querySelector(\n    \"#config-toggle\",\n  ) as HTMLButtonElement;\n  descWrapper = document.body.querySelector(\n    \"#puzzle-description-wrapper\",\n  ) as HTMLInputElement;\n  descInput = document.body.querySelector(\n    \"#puzzle-description-string\",\n  ) as HTMLInputElement;\n  optionsContainer = document.body.querySelector(\n    \"#main-config\",\n  ) as HTMLInputElement;\n  showing: boolean = false;\n  constructor(private app: TwizzleExplorerApp) {\n    this.toggleButton.addEventListener(\"click\", () => {\n      this.showing = !this.showing;\n      // TODO: Handle this with a single CSS class on the whole app.\n      this.descWrapper.toggleAttribute(\"hidden\", !this.showing);\n      this.optionsContainer.toggleAttribute(\"hidden\", !this.showing);\n    });\n\n    for (const name of Object.keys(getPG3DNamedPuzzles())) {\n      const optionElem = document.createElement(\"option\");\n      optionElem.value = name;\n      optionElem.textContent = name;\n      this.puzzleNameSelect.appendChild(optionElem);\n    }\n\n    const puzzleDescriptionString = getURLParam(\"puzzle-description\");\n    if (getURLParam(\"puzzle-description\")) {\n      this.descInput.value = puzzleDescriptionString;\n      this.descWrapper.hidden = false;\n    } else {\n      let puzzleName = getURLParam(\"puzzle\");\n      if (!puzzleName) {\n        puzzleName = \"3x3x3\";\n      }\n      this.puzzleNameSelect.value = puzzleName;\n      this.descInput.value = getPuzzleDescriptionString(puzzleName);\n    }\n\n    this.scrambleButton.addEventListener(\"click\", async () => {\n      this.app.twistyPlayer.experimentalModel.setupTransformation.set(\n        (async () => {\n          const loader =\n            await this.app.twistyPlayer.experimentalModel.puzzleLoader.get();\n          const pg = await loader.pg!();\n          const kpuzzle = await loader.kpuzzle();\n          const scrambleTransformationData = pg.getScramble();\n          setAlgParamEnabled(false);\n          return new KTransformation(kpuzzle, scrambleTransformationData);\n        })(),\n      );\n    });\n\n    this.resetButton.addEventListener(\"click\", () => {\n      this.app.twistyPlayer.alg = \"\";\n      this.app.twistyPlayer.experimentalModel.setupTransformation.set(null);\n      setAlgParamEnabled(true);\n    });\n\n    // TODO: connect this to the checkboxes?\n    this.puzzleNameSelect.addEventListener(\"change\", () => {\n      this.app.setPuzzleName(this.puzzleNameSelect.value);\n    });\n\n    // TODO: connect this to the checkboxes?\n    this.descInput.addEventListener(\"input\", () => {\n      this.app.setPuzzleDescription(this.descInput.value);\n    });\n  }\n}\n\nclass SelectUI {\n  constructor(private app: TwizzleExplorerApp) {\n    (\n      document.body.querySelector(\"#actions\") as HTMLSelectElement\n    ).addEventListener(\"change\", this.onChange.bind(this));\n    (\n      document.body.querySelector(\"#move-input\") as HTMLSelectElement\n    ).addEventListener(\"change\", this.onChange.bind(this));\n  }\n\n  async onChange(e: MouseEvent) {\n    const action = (e.target as HTMLSelectElement).value;\n    (document.body.querySelector(\"#actions\") as HTMLSelectElement).value = \"\";\n    (document.body.querySelector(\"#move-input\") as HTMLSelectElement).value =\n      \"\";\n    switch (action) {\n      case \"gap\": {\n        this.app.showText((await this.app.puzzleGeometry()).writegap());\n        break;\n      }\n      case \"ss\": {\n        const lines: string[] = [];\n        (await this.app.puzzleGeometry()).writeSchreierSims((line) =>\n          lines.push(line),\n        );\n        this.app.showText(lines.join(\"\\n\"));\n        break;\n      }\n      case \"canon\": {\n        const lines: string[] = [];\n        (await this.app.puzzleGeometry()).showcanon((line) => lines.push(line));\n        this.app.showText(lines.join(\"\\n\"));\n        break;\n      }\n      case \"ksolve\": {\n        this.app.showText(\n          (await this.app.puzzleGeometry()).writeksolve(\"TwizzlePuzzle\"),\n        );\n        break;\n      }\n      case \"svg\": {\n        const is3D =\n          (await this.app.twistyPlayer.experimentalModel.visualizationFormat.get()) !==\n          \"2D\"; // TODO\n        this.app.showText(\n          (await this.app.puzzleGeometry()).generatesvg(800, 500, 10, is3D),\n        );\n        break;\n      }\n      case \"summary\": {\n        this.app.showText(\n          (\n            await (\n              await this.app.twistyPlayer.experimentalModel.puzzleLoader.get()\n            ).pg!()\n          ).textForTwizzleExplorer(),\n        );\n        break;\n      }\n      case \"screenshot\":\n      case \"screenshot-back\": {\n        this.app.twistyPlayer.experimentalDownloadScreenshot(); // TODO: back!\n        break;\n      }\n      case \"bluetooth\":\n      case \"keyboard\": {\n        (async (): Promise<void> => {\n          const inputPuzzle = await (action === \"bluetooth\"\n            ? connectSmartPuzzle\n            : debugKeyboardConnect)();\n          inputPuzzle.addAlgLeafListener((e: MoveEvent) => {\n            this.app.twistyPlayer.experimentalAddAlgLeaf(e.latestAlgLeaf);\n          });\n        })();\n        break;\n      }\n      default:\n        alert(`Action ${action} not handled yet.`);\n    }\n  }\n}\n\nclass SidePanel extends HTMLElement {\n  connectedCallback() {\n    const buttons = this.querySelectorAll(\"panel-selector button\");\n    for (const button of Array.from(buttons)) {\n      button.addEventListener(\"click\", () => {\n        this.showTab(button.getAttribute(\"data-tab-id\")!);\n      });\n    }\n  }\n\n  showTab(id: string) {\n    for (const child of Array.from(\n      this.querySelector(\"panel-tabs\")!.children,\n    ) as HTMLElement[]) {\n      child.hidden = true;\n    }\n    document.getElementById(id)!.hidden = false;\n  }\n}\ncustomElements.define(\"side-panel\", SidePanel);\n"],
  "mappings": "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",
  "names": ["TwizzleExplorerApp", "constructTwistyPlayer", "ConfigUI", "SelectUI", "moveCountElem", "moveCount", "Dialog", "twistyPuzzleDescriptionInput", "puzzleLoader", "puzzleName", "descString", "getPuzzleDescriptionString", "setAlgParamEnabled", "setURLParams", "text", "app", "name", "getPG3DNamedPuzzles", "optionElem", "puzzleDescriptionString", "getURLParam", "loader", "pg", "kpuzzle", "scrambleTransformationData", "KTransformation", "e", "action", "lines", "line", "is3D", "connectSmartPuzzle", "debugKeyboardConnect", "SidePanel", "buttons", "button", "id", "child"]
}
