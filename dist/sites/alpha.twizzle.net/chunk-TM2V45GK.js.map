{
  "version": 3,
  "sources": ["../../../src/sites/alpha.twizzle.net/explore/TwistyPuzzleDescriptionInput.ts"],
  "sourcesContent": ["import {\n  ExperimentalPuzzleBaseShape,\n  ExperimentalPuzzleCutDescription,\n  ExperimentalPuzzleCutType,\n  ExperimentalPuzzleDescription,\n  EXPERIMENTAL_PUZZLE_CUT_TYPES,\n} from \"../../../cubing/puzzle-geometry\";\nimport type {\n  PuzzleBaseShape,\n  PuzzleCutType,\n} from \"../../../cubing/puzzle-geometry/PuzzleGeometry\";\n\nconst sqrt = Math.sqrt.bind(Math);\n\nconst SnapEpsilon = 0.01;\n\n// Each value needs at least 4 digits of precision.\nconst MAX_DISTANCE_TABLE: Record<\n  ExperimentalPuzzleBaseShape,\n  Record<ExperimentalPuzzleCutType, number>\n> = {\n  c: {\n    f: 1,\n    v: sqrt(3),\n    e: sqrt(2),\n  },\n  t: {\n    f: 1,\n    v: 3,\n    e: sqrt(3),\n  },\n  o: {\n    f: 1,\n    v: sqrt(3),\n    e: sqrt(3 / 2),\n  },\n  d: {\n    f: 1,\n    v: 1.2584,\n    e: 1.1756,\n  },\n  i: {\n    f: 1,\n    v: 1.2584,\n    e: 1.0705,\n  },\n};\n\nexport class TwistyPuzzleDescriptionInput extends HTMLElement {\n  puzzleShapeSelect: HTMLInputElement = this.querySelector(\"#puzzle-shape\")!;\n  sectionElems: Record<ExperimentalPuzzleCutType, HTMLElement> = {\n    f: this.querySelector(\"#f-cuts\")!,\n    v: this.querySelector(\"#v-cuts\")!,\n    e: this.querySelector(\"#e-cuts\")!,\n  };\n  connectedCallback() {\n    for (const [cutType, section] of Object.entries(this.sectionElems)) {\n      section.querySelector(\"button\")?.addEventListener(\"click\", () => {\n        this.addInput({\n          cutType: cutType as ExperimentalPuzzleCutType,\n          distance: 0,\n        });\n        this.dispatchPuzzleDescription();\n      });\n    }\n\n    this.puzzleShapeSelect.addEventListener(\"change\", () => {\n      this.dispatchPuzzleDescription();\n    });\n  }\n\n  get puzzleShape(): ExperimentalPuzzleBaseShape {\n    const shape = this.puzzleShapeSelect.value as ExperimentalPuzzleBaseShape;\n    return shape;\n  }\n\n  dispatchPuzzleDescription() {\n    const descriptionStringParts: string[] = [this.puzzleShape];\n    for (const cutType of EXPERIMENTAL_PUZZLE_CUT_TYPES) {\n      for (const input of Array.from(\n        this.sectionElems[cutType].querySelectorAll(\"input\")!,\n      )) {\n        descriptionStringParts.push(cutType);\n        descriptionStringParts.push(\n          this.clean(this.puzzleShape, cutType, +input.value).toString(),\n        );\n      }\n    }\n\n    const descriptionString = descriptionStringParts.join(\" \");\n\n    this.dispatchEvent(\n      new CustomEvent(\"puzzle-change\", {\n        detail: {\n          descriptionString,\n        },\n      }),\n    );\n  }\n\n  clean(base: PuzzleBaseShape, cut: PuzzleCutType, ival: number): number {\n    const goodpts = KeyPoints[base + cut];\n    let best = 1000;\n    for (const v of goodpts) {\n      if (\n        Math.abs(v - ival) < SnapEpsilon &&\n        Math.abs(v - ival) < Math.abs(best - ival)\n      ) {\n        best = v;\n      }\n    }\n    if (best !== 1000) {\n      return best;\n    }\n    return ival;\n  }\n\n  inputMax(cutType: ExperimentalPuzzleCutType): number {\n    return (\n      Math.ceil(MAX_DISTANCE_TABLE[this.puzzleShape][cutType] * 1000 - 1) / 1000\n    );\n  }\n\n  addInput(cut: ExperimentalPuzzleCutDescription): HTMLInputElement {\n    const section = this.sectionElems[cut.cutType];\n    const inputsGoBeforeHere = section.querySelector(\".inputs-go-before-here\");\n\n    const input = document.createElement(\"input\");\n    section.insertBefore(input, inputsGoBeforeHere);\n    input.type = \"range\";\n    input.min = \"0\";\n    input.max = this.inputMax(cut.cutType).toString(); // TODO: adjust based on puzzle and cut type\n    input.step = \"0.001\";\n    input.value = cut.distance.toString();\n    input.addEventListener(\"input\", () => {\n      this.dispatchPuzzleDescription();\n    });\n\n    const removeButton = document.createElement(\"button\");\n    section.insertBefore(removeButton, inputsGoBeforeHere);\n    removeButton.textContent = \"\u274C\";\n    removeButton.title = \"Remove this cut\";\n    removeButton.addEventListener(\"click\", () => {\n      input.remove();\n      removeButton.remove();\n      this.dispatchPuzzleDescription();\n    });\n\n    return input;\n  }\n\n  set puzzleDescription(puzzleDescription: ExperimentalPuzzleDescription) {\n    const existingInputs: Record<\n      ExperimentalPuzzleCutType,\n      HTMLInputElement[]\n    > = {\n      f: Array.from(this.sectionElems[\"f\"].querySelectorAll(\"input\")),\n      v: Array.from(this.sectionElems[\"v\"].querySelectorAll(\"input\")),\n      e: Array.from(this.sectionElems[\"e\"].querySelectorAll(\"input\")),\n    };\n\n    this.puzzleShapeSelect.value = puzzleDescription.shape;\n\n    for (const cut of puzzleDescription.cuts) {\n      const existingInput: HTMLInputElement | undefined = existingInputs[\n        cut.cutType\n      ].splice(0, 1)[0];\n      if (existingInput) {\n        existingInput.value = cut.distance.toString();\n        existingInput.max = this.inputMax(cut.cutType).toString();\n      } else {\n        this.addInput(cut);\n      }\n    }\n    for (const extraInputs of Object.values(existingInputs)) {\n      for (const extraInput of extraInputs) {\n        extraInput.nextElementSibling!.remove();\n        extraInput.remove();\n      }\n    }\n  }\n}\n\ncustomElements.define(\n  \"twisty-puzzle-description-input\",\n  TwistyPuzzleDescriptionInput,\n);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"twisty-puzzle-description-input\": TwistyPuzzleDescriptionInput;\n  }\n}\n\nconst KeyPoints: Record<string, number[]> = {\n  te: [0, 0.346184634065199, 0.577350269189626, 0.866025403784437],\n  if: [\n    0, 0.0437137412199553, 0.10557280900008, 0.142911758634148, 0.2360679774998,\n    0.272067557625603, 0.333333333333342, 0.381966011250105, 0.366293370955617,\n    0.461896476441222, 0.527864045000399, 0.555741433418137, 0.56691527068179,\n    0.579145823610522, 0.618033988749886, 0.672742662378172, 0.745355992499953,\n    0.770969598759586,\n  ],\n  df: [\n    0, 0.105585091198902, 0.236067977499772, 0.358548932642016,\n    0.447213595499989, 0.548137753621931, 0.618033988749895, 0.745604667392652,\n  ],\n  ie: [\n    0, 0.118724773661763, 0.136293910356528, 0.157981582327811,\n    0.171657248314431, 0.185354472327642, 0.22052817941659, 0.225206963771198,\n    0.231801297246193, 0.255235116516706, 0.267616567329866, 0.279397861264267,\n    0.295869600077765, 0.302680679737852, 0.308301945313531, 0.311882116063692,\n    0.316521888676107, 0.324005476841408, 0.330792269124856, 0.346272894885839,\n    0.356822089773061, 0.36998951851398, 0.408881731069641, 0.427045750483211,\n    0.449404510502461, 0.472055041464925, 0.47872706916371, 0.485249039797452,\n    0.498843026314944, 0.515190145191102, 0.535233134659677, 0.548806039292405,\n    0.577350269189651, 0.618315762969106, 0.661584538249713, 0.692375929817155,\n    0.774596669241419, 0.7945579326996, 0.807144971628418, 0.826580114438045,\n    0.86602540378442, 0.888053374878366, 0.934172358962655, 0.944421022283983,\n  ],\n  iv: [\n    0, 0.112482206141184, 0.187592474085081, 0.28138871112762,\n    0.562777422255239, 0.736685209782635, 0.794654472291766, 0.841075170785081,\n    0.910592997310029,\n  ],\n  tv: [0, 0.333333333333333, 0.600260416666341, 0.999999999500001],\n  oe: [\n    0, 0.244789502290502, 0.408248290463866, 0.461990350408647,\n    0.489897948556645, 0.524941918234976, 0.61237243569579, 0.689716350284335,\n    0.816496580927733, 0.852377778460046,\n  ],\n  of: [0, 0.199869791666992, 0.333333333333, 0.500000000000001],\n  dv: [\n    0, 0.0560874285802, 0.0990233221822336, 0.129641954773404,\n    0.187592474085079, 0.259374724922907, 0.41946952412161, 0.502579833588376,\n    0.531745191119057, 0.562791600335274, 0.592300472889519, 0.617533116288632,\n    0.678715947273417, 0.726155636708975, 0.794654472291768, 0.854832593500508,\n    0.937962370400783, 1.09818547139511,\n  ],\n  de: [\n    0, 0.128563971004914, 0.145308505600951, 0.170241453552642,\n    0.200811415886164, 0.20942149071417, 0.214828453505561, 0.224204126002919,\n    0.242180842668631, 0.254805789761306, 0.262865556059523, 0.27330868728898,\n    0.277514551425611, 0.284605286554775, 0.305018008054503, 0.313608385297821,\n    0.324919696232883, 0.345069250323634, 0.363271264002833, 0.37817914684952,\n    0.411888053250777, 0.411888053926078, 0.41188805460115, 0.429660084874436,\n    0.449027976579373, 0.476892790186451, 0.525731112119047, 0.544456729884171,\n    0.547822164005765, 0.551644835984693, 0.562428193028154, 0.575156248114469,\n    0.587785252292405, 0.606349458290752, 0.634037677529931, 0.64731718197753,\n    0.726542528005439, 0.777241350811778, 0.79854751226776, 0.817679191298903,\n    0.85065080835193, 0.886439952295727, 0.951056516295154, 1.02604067771384,\n  ],\n  tf: [0],\n  cv: [\n    0, 0.192450089729875, 0.239059095459766, 0.577350269189594,\n    0.915641442663986, 0.962250448649376, 1.15470053837926, 1.34715062810913,\n  ],\n  ce: [\n    0, 0.2357022604, 0.261021839065223, 0.353553390593277, 0.414205290678296,\n    0.471404520791054, 0.546902900980241, 0.707106781186553, 0.943269392613834,\n  ],\n  cf: [0, 0.333333333333333],\n  ov: [\n    0, 0.433012701892219, 0.577350269189626, 0.692933086751677, 0.8660254038,\n  ],\n};\n"],
  "mappings": "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",
  "names": ["sqrt", "SnapEpsilon", "MAX_DISTANCE_TABLE", "TwistyPuzzleDescriptionInput", "cutType", "section", "descriptionStringParts", "PUZZLE_CUT_TYPES", "input", "descriptionString", "base", "cut", "ival", "goodpts", "KeyPoints", "best", "v", "inputsGoBeforeHere", "removeButton", "puzzleDescription", "existingInputs", "existingInput", "extraInputs", "extraInput"]
}
