{
  "version": 3,
  "sources": ["../../../src/cubing/stream/websocket-proxy.ts", "../../../src/cubing/stream/twizzle/TwizzleStream.ts"],
  "sourcesContent": ["import type { MoveEvent, OrientationEvent } from \"../bluetooth\";\nimport type { ProxyEvent } from \"./proxy-event\";\n\nexport class WebSocketProxySender {\n  protected websocket: WebSocket;\n  constructor(url: string) {\n    this.websocket = new WebSocket(url);\n    this.websocket.onopen = this.onopen.bind(this);\n    this.websocket.onerror = this.onerror.bind(this);\n    this.websocket.onmessage = this.onmessage.bind(this);\n  }\n\n  public sendMoveEvent(e: MoveEvent): void {\n    this.sendProxyEvent({\n      event: \"move\",\n      data: e,\n    });\n  }\n\n  public sendOrientationEvent(e: OrientationEvent): void {\n    this.sendProxyEvent({\n      event: \"orientation\",\n      data: e,\n    });\n  }\n\n  public sendResetEvent(): void {\n    this.sendProxyEvent({ event: \"reset\" });\n  }\n\n  protected sendProxyEvent(proxyEvent: ProxyEvent): void {\n    this.websocket.send(JSON.stringify(proxyEvent));\n  }\n\n  protected onopen(): void {\n    console.log(\"Sending socket is open!\");\n  }\n\n  protected onerror(error: Error): void {\n    console.error(\"WebSocket sender error:\", error);\n  }\n\n  protected onmessage(_e: MessageEvent): void {}\n}\n\nexport abstract class WebSocketProxyReceiver {\n  protected websocket: WebSocket;\n  constructor(url: string, socketOrigin?: string) {\n    if (!socketOrigin) {\n      console.log(\"No socket origin specified. Will not attempt to connect.\");\n      return;\n    }\n    this.websocket = new WebSocket(url);\n    console.log(this.websocket);\n    this.websocket.onopen = this.onopen.bind(this);\n    this.websocket.onerror = this.onerror.bind(this);\n    this.websocket.onmessage = this.onmessage.bind(this);\n  }\n\n  protected onopen(): void {\n    console.log(\"Receiving socket is open!\");\n  }\n\n  protected onerror(error: Error): void {\n    console.error(\"WebSocket receiver error:\", error);\n  }\n\n  protected onmessage(e: MessageEvent): void {\n    this.onProxyEvent(JSON.parse(e.data));\n  }\n\n  abstract onProxyEvent(e: ProxyEvent): void;\n}\n", "import { Move, QuantumMove } from \"../../alg\";\nimport type { StreamMessageEvent } from \"./stream-types\";\n\nclass TwizzleStream extends EventTarget {\n  socket: WebSocket;\n  constructor(url: string) {\n    super();\n    this.socket = new WebSocket(url);\n    this.socket.onmessage = this.onMessage.bind(this); // TODO: Can we \"add a listener instead\"?\n  }\n\n  onMessage(msg: MessageEvent): void {\n    try {\n      const json: StreamMessageEvent = JSON.parse(msg.data);\n      if (json.event === \"move\") {\n        const move = json.data.latestMove;\n        if (move.type !== \"blockMove\") {\n          throw new Error(\"Invalid move!\");\n        }\n        this.dispatchEvent(\n          new CustomEvent(\"move\", {\n            detail: {\n              move: new Move(new QuantumMove(move.family), move.amount),\n            },\n          }),\n        );\n      }\n    } catch (e) {\n      console.error(\"Could not handle message:\", e);\n    }\n  }\n}\n\ntype StreamsField = {\n  streamID: string;\n  senders: { name: string; twizzleUserID: string; wcaID: string | null }[];\n}[];\n\nexport class TwizzleStreamServer {\n  async streams(): Promise<StreamsField> {\n    return (\n      (await (await fetch(\"https://api.twizzle.net/v0/streams\")).json()) as {\n        streams: StreamsField;\n      }\n    ).streams;\n  }\n\n  connect(streamID: string): TwizzleStream {\n    return new TwizzleStream(\n      `wss://api.twizzle.net/v0/streams/${streamID}/socket`,\n    );\n  }\n}\n"],
  "mappings": "2EAGO,IAAMA,EAAN,KAA2B,CAEhC,YAAYC,EAAa,CACvB,KAAK,UAAY,IAAI,UAAUA,CAAG,EAClC,KAAK,UAAU,OAAS,KAAK,OAAO,KAAK,IAAI,EAC7C,KAAK,UAAU,QAAU,KAAK,QAAQ,KAAK,IAAI,EAC/C,KAAK,UAAU,UAAY,KAAK,UAAU,KAAK,IAAI,CACrD,CAEO,cAAc,EAAoB,CACvC,KAAK,eAAe,CAClB,MAAO,OACP,KAAM,CACR,CAAC,CACH,CAEO,qBAAqB,EAA2B,CACrD,KAAK,eAAe,CAClB,MAAO,cACP,KAAM,CACR,CAAC,CACH,CAEO,gBAAuB,CAC5B,KAAK,eAAe,CAAE,MAAO,OAAQ,CAAC,CACxC,CAEU,eAAeC,EAA8B,CACrD,KAAK,UAAU,KAAK,KAAK,UAAUA,CAAU,CAAC,CAChD,CAEU,QAAe,CACvB,QAAQ,IAAI,yBAAyB,CACvC,CAEU,QAAQC,EAAoB,CACpC,QAAQ,MAAM,0BAA2BA,CAAK,CAChD,CAEU,UAAUC,EAAwB,CAAC,CAC/C,EAEsBC,EAAf,KAAsC,CAE3C,YAAYJ,EAAaK,EAAuB,CAC9C,GAAI,CAACA,EAAc,CACjB,QAAQ,IAAI,0DAA0D,EACtE,MACF,CACA,KAAK,UAAY,IAAI,UAAUL,CAAG,EAClC,QAAQ,IAAI,KAAK,SAAS,EAC1B,KAAK,UAAU,OAAS,KAAK,OAAO,KAAK,IAAI,EAC7C,KAAK,UAAU,QAAU,KAAK,QAAQ,KAAK,IAAI,EAC/C,KAAK,UAAU,UAAY,KAAK,UAAU,KAAK,IAAI,CACrD,CAEU,QAAe,CACvB,QAAQ,IAAI,2BAA2B,CACzC,CAEU,QAAQE,EAAoB,CACpC,QAAQ,MAAM,4BAA6BA,CAAK,CAClD,CAEU,UAAU,EAAuB,CACzC,KAAK,aAAa,KAAK,MAAM,EAAE,IAAI,CAAC,CACtC,CAGF,ECrEA,IAAMI,EAAN,cAA4B,WAAY,CAEtC,YAAYC,EAAa,CACvB,MAAM,EACN,KAAK,OAAS,IAAI,UAAUA,CAAG,EAC/B,KAAK,OAAO,UAAY,KAAK,UAAU,KAAK,IAAI,CAClD,CAEA,UAAUC,EAAyB,CACjC,GAAI,CACF,IAAMC,EAA2B,KAAK,MAAMD,EAAI,IAAI,EACpD,GAAIC,EAAK,QAAU,OAAQ,CACzB,IAAMC,EAAOD,EAAK,KAAK,WACvB,GAAIC,EAAK,OAAS,YAChB,MAAM,IAAI,MAAM,eAAe,EAEjC,KAAK,cACH,IAAI,YAAY,OAAQ,CACtB,OAAQ,CACN,KAAM,IAAIC,EAAK,IAAIC,EAAYF,EAAK,MAAM,EAAGA,EAAK,MAAM,CAC1D,CACF,CAAC,CACH,CACF,CACF,OAASG,EAAP,CACA,QAAQ,MAAM,4BAA6BA,CAAC,CAC9C,CACF,CACF,EAOaC,EAAN,KAA0B,CAC/B,MAAM,SAAiC,CACrC,OACG,MAAO,MAAM,MAAM,oCAAoC,GAAG,KAAK,GAGhE,OACJ,CAEA,QAAQC,EAAiC,CACvC,OAAO,IAAIT,EACT,oCAAoCS,UACtC,CACF,CACF",
  "names": ["WebSocketProxySender", "url", "proxyEvent", "error", "_e", "WebSocketProxyReceiver", "socketOrigin", "TwizzleStream", "url", "msg", "json", "move", "Move", "QuantumMove", "e", "TwizzleStreamServer", "streamID"]
}
