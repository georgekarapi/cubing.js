{
  "version": 3,
  "sources": ["../../../src/sites/alpha.twizzle.net/edit/alg-features.ts"],
  "sourcesContent": ["import {\n  Alg,\n  Commutator,\n  Conjugate,\n  functionFromTraversal,\n  Grouping,\n  LineComment,\n  Move,\n  Newline,\n  Pause,\n  TraversalDownUp,\n} from \"../../../cubing/alg\";\n\nconst noAlgFeatures = {\n  commutator: false,\n  conjugate: false,\n  caretNISS: false,\n  square1: false,\n} as const satisfies Record<string, false>;\n\ntype AlgFeatures = Record<keyof typeof noAlgFeatures, boolean>;\n\nclass UsesCaretNISSNotation extends TraversalDownUp<AlgFeatures, void> {\n  public traverseAlg(alg: Alg, algFeatures: AlgFeatures): void {\n    for (const node of alg.childAlgNodes()) {\n      this.traverseAlgNode(node, algFeatures);\n    }\n  }\n  public traverseGrouping(grouping: Grouping, algFeatures: AlgFeatures): void {\n    algFeatures.caretNISS ||= !!grouping.experimentalNISSPlaceholder;\n    algFeatures.square1 ||= !!grouping.experimentalAsSquare1Tuple();\n    this.traverseAlg(grouping.alg, algFeatures);\n  }\n  public traverseMove(_move: Move, _algFeatures: AlgFeatures): void {}\n  public traverseCommutator(\n    commutator: Commutator,\n    algFeatures: AlgFeatures,\n  ): void {\n    algFeatures.commutator = true;\n    this.traverseAlg(commutator.A, algFeatures);\n    this.traverseAlg(commutator.B, algFeatures);\n  }\n  public traverseConjugate(\n    conjugate: Conjugate,\n    algFeatures: AlgFeatures,\n  ): void {\n    algFeatures.conjugate = true;\n    this.traverseAlg(conjugate.A, algFeatures);\n    this.traverseAlg(conjugate.B, algFeatures);\n  }\n  public traversePause(_pause: Pause, _algFeatures: AlgFeatures): void {}\n  public traverseNewline(_newline: Newline, _algFeatures: AlgFeatures): void {}\n  public traverseLineComment(\n    _comment: LineComment,\n    _algFeatures: AlgFeatures,\n  ): void {}\n}\n\nconst algFeaturesVisitor = functionFromTraversal(UsesCaretNISSNotation);\n\nexport function computeAlgFeatures(alg: Alg): AlgFeatures {\n  const algFeatures: AlgFeatures = { ...noAlgFeatures };\n  algFeaturesVisitor(alg, algFeatures);\n  return algFeatures;\n}\n"],
  "mappings": "+CAaA,IAAMA,EAAgB,CACpB,WAAY,GACZ,UAAW,GACX,UAAW,GACX,QAAS,EACX,EAIMC,EAAN,cAAoCC,CAAmC,CAC9D,YAAYC,EAAUC,EAAgC,CAC3D,QAAWC,KAAQF,EAAI,cAAc,EACnC,KAAK,gBAAgBE,EAAMD,CAAW,CAE1C,CACO,iBAAiBE,EAAoBF,EAAgC,CAC1EA,EAAY,YAAZA,EAAY,UAAc,CAAC,CAACE,EAAS,6BACrCF,EAAY,UAAZA,EAAY,QAAY,CAAC,CAACE,EAAS,2BAA2B,GAC9D,KAAK,YAAYA,EAAS,IAAKF,CAAW,CAC5C,CACO,aAAaG,EAAaC,EAAiC,CAAC,CAC5D,mBACLC,EACAL,EACM,CACNA,EAAY,WAAa,GACzB,KAAK,YAAYK,EAAW,EAAGL,CAAW,EAC1C,KAAK,YAAYK,EAAW,EAAGL,CAAW,CAC5C,CACO,kBACLM,EACAN,EACM,CACNA,EAAY,UAAY,GACxB,KAAK,YAAYM,EAAU,EAAGN,CAAW,EACzC,KAAK,YAAYM,EAAU,EAAGN,CAAW,CAC3C,CACO,cAAcO,EAAeH,EAAiC,CAAC,CAC/D,gBAAgBI,EAAmBJ,EAAiC,CAAC,CACrE,oBACLK,EACAL,EACM,CAAC,CACX,EAEMM,EAAqBC,EAAsBd,CAAqB,EAE/D,SAASe,EAAmBb,EAAuB,CACxD,IAAMC,EAA2B,CAAE,GAAGJ,CAAc,EACpD,OAAAc,EAAmBX,EAAKC,CAAW,EAC5BA,CACT",
  "names": ["noAlgFeatures", "UsesCaretNISSNotation", "TraversalDownUp", "alg", "algFeatures", "node", "grouping", "_move", "_algFeatures", "commutator", "conjugate", "_pause", "_newline", "_comment", "algFeaturesVisitor", "functionFromTraversal", "computeAlgFeatures"]
}
