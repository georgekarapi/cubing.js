{
  "version": 3,
  "sources": ["../../../src/cubing/search/inside/solve/puzzles/dynamic/sgs-unofficial/fto.sgs.ts", "../../../src/cubing/vendor/mpl/xyzzy/redi_cube.js"],
  "sourcesContent": ["import { puzzles } from \"../../../../../../puzzles\";\nimport { parseSGS, SGSCachedData } from \"../../../parseSGS\";\n\nlet cachedData: Promise<SGSCachedData> | null = null;\nexport async function sgsDataFTO() {\n  return (cachedData ??= uncachedSGSDataFTO());\n}\n\n// TODO: Reduce info.\nasync function uncachedSGSDataFTO(): Promise<SGSCachedData> {\n  return parseSGS(\n    await puzzles[\"fto\"].kpuzzle(),\n    `SubgroupSizes 24 12 11 12 12 11 10 9 11 8 10 9 7 8 10 10 6 9 8 5 7 6 5 4 4 8 7 3 6 6 360\n\nAlg T\nAlg B\nAlg B T\nAlg B'\nAlg B' T\nAlg U\nAlg U T\nAlg U'\nAlg U' T\nAlg B BL\nAlg B BL T\nAlg B BL'\nAlg B BL' T\nAlg B' BR\nAlg B' BR T\nAlg B' BR'\nAlg B' BR' T\nAlg U R'\nAlg U R' T\nAlg U' L\nAlg U' L T\nAlg B BL' D\nAlg B BL' D T\n\nAlg R\nAlg R'\nAlg R D\nAlg R D'\nAlg R BR\nAlg R BR'\nAlg R' F\nAlg R' L\nAlg R' L'\nAlg B L B'\nAlg U L' U'\n\nAlg B U B'\nAlg B U' B'\nAlg B R B'\nAlg B R' B'\nAlg B' U' B\nAlg B' U B L\nAlg B' U B L'\nAlg B' U' B BL'\nAlg B U' B' BR\nAlg B' R' B F\n\nAlg BR\nAlg BR'\nAlg BR BL\nAlg BR BL'\nAlg BR' F\nAlg BR' F'\nAlg BR' D\nAlg B BR B'\nAlg U F U'\nAlg BR BL L\nAlg BR' D BR'\n\nAlg B' BL B\nAlg B' BL' B\nAlg BR D' BR'\nAlg B' BL B D'\nAlg B' BL B BL\nAlg B' BL B BL'\nAlg B' BL L B\nAlg B' BL' B F'\nAlg B' BL' B L'\nAlg B' BL' B BL'\nAlg B' BL' L BL' B\n\nAlg R' BR R\nAlg R' BR' R\nAlg BR BL' D BR\nAlg R' BR D R\nAlg R' BR D' R\nAlg R' BR R BL\nAlg B' D' BL D B\nAlg BR B D' B' BR'\nAlg BR BL' D BR L'\nAlg BR BL' D BL BR\n\nAlg U BR U'\nAlg U BR' U'\nAlg U' R U\nAlg U' R' U\nAlg U BR B' U'\nAlg U BR' U' D\nAlg U BR' U' D'\nAlg U' R F' U\nAlg U' R' U L'\n\nAlg U B U'\nAlg U B' U'\nAlg U B U' L\nAlg U B U' L'\nAlg U B' U' BL'\nAlg U B U' L F\nAlg U B U' L F'\nAlg U B' U' BL' D'\n\nAlg B BL' L BL B'\nAlg B BL' L' BL B'\nAlg U B' D B U'\nAlg U B' D' B U'\nAlg U R D R' U'\nAlg U R D' R' U'\nAlg R' F L F' R\nAlg R' F L' F' R\nAlg B L' B F' D B\nAlg U B' D' B U' D\n\nAlg F\nAlg F'\nAlg F D\nAlg F D'\nAlg F' L\nAlg F' L'\nAlg F D' BL\n\nAlg F BL F'\nAlg F BL' F'\nAlg BR' BL BR\nAlg BR' BL' BR\nAlg F BR F' BR'\nAlg F BL F' BL'\nAlg F BL' F' L\nAlg F BL' L' F'\nAlg F BR' BL BR F'\n\nAlg F' BL F\nAlg F' BL' F\nAlg U BL U'\nAlg U BL' U'\nAlg F U' F' U\nAlg F' BL F D'\nAlg F' BL F BL'\nAlg F' BL D F\n\nAlg L\nAlg L'\nAlg L BL\nAlg L BL'\nAlg F' D F\nAlg L BL D\n\nAlg L' BL L\nAlg L' BL' L\nAlg L' BL D L\nAlg L' BL D' L\nAlg L' BL L BL'\nAlg L' BL D' L BL\nAlg L' BL D' L BL'\n\nAlg L D L'\nAlg L D' L'\nAlg R' D R\nAlg R' D' R\nAlg L D L' D'\nAlg L R L' R'\nAlg L' B' L B\nAlg R' D R BL\nAlg L BL' L' BL L'\n\nAlg U L' D L U'\nAlg U B D B' U'\nAlg U L' D' L U'\nAlg U B D' B' U'\nAlg R' D' BL' D R\nAlg U B D' B' U' D\nAlg U B' L B L' U'\nAlg U B D B' U' BL'\nAlg U B D' B' L' D' L U'\n\nAlg F L F'\nAlg F L' F'\nAlg F L F' D\nAlg F L F' D'\nAlg F L' F' BL'\n\nAlg L BL' D BL L'\nAlg L BL' D' BL L'\nAlg F D L D' L' F'\nAlg F L D L' D' F'\nAlg F L' B' L B F'\nAlg F' D' R' D R F\nAlg F D L D' L' F' BL'\nAlg F' R' B' R' B R' F\n\nAlg B D B'\nAlg B D' B'\nAlg L' D L\nAlg L' D' L\nAlg B D B' D'\nAlg B' L B L'\nAlg B D B' D' BL\n\nAlg D\nAlg D'\nAlg D BL\nAlg D BL'\n\nAlg D BL' D BL D'\nAlg D BL' D' BL D'\nAlg B D R D' R' B'\nAlg B R D R' D' B'\nAlg D BL' D BL D' BL\nAlg D BL' D BL D' BL'\n\nAlg D BL D BL' D'\nAlg D BL D' BL' D'\nAlg B' BL' B BR D' BR'\nAlg D BL D BL' D' BL\nAlg D BL D BL' D' BL'\n\nAlg D' BL D\nAlg D' BL' D\nAlg D' BL D BL\nAlg D' BL D BL'\n\nAlg B D' B' BL B D B'\nAlg B D' B' BL' B D B'\nAlg D' BL' D BL D' BL D\n\nAlg B R' B' BL B R B'\nAlg B R' B' BL' B R B'\nAlg L R L' BL' L R' L'\n\nAlg F BL' B' BL F' BL' B\nAlg F' R' F BL F' R F\nAlg F' R' F BL' F' R F\nAlg BR R BR' BL' BR R' BR'\nAlg F L' BL U BL' U' L F'\nAlg F' U' F D F' U F D'\nAlg F BL F' D F BL' F' BL D'\n\nAlg F D F U' F' U D' F'\nAlg F D F' BL F BL' D' F'\nAlg F U D BL' U' BL D' F'\nAlg F U' D F U F' D' F'\nAlg F' BR L F BR' F' L' F\nAlg U R BL' F BL F' R' U'\n\nAlg BL\nAlg BL'\n\nAlg F U BL U' BL' F'\nAlg F BL U BL' U' F'\nAlg U BL BR BL' BR' U'\nAlg BR F BL F' BL' BR'\nAlg F U' F' U BL' U BL U'\n\nAlg F U' F' D F U F' D'\nAlg B' U' F U B U' F' U\nAlg D F U' F' D' F U F'\nAlg BR' U BR D' BR' U' BR D\nAlg D' BR BL' F BL' F' BL BR' BL D\n\nAlg D BL D F' U' B L' BL' L R' BR' R L' BL L B' U F D\nAlg B D BR F' R' BR' R B' F D' BL D B BR' D' B'\nAlg L B' BR' L F BR L' B BR' L U F U' BR' F L BL BR'\nAlg L BL' D' BR' B R' U' R BR B' D BL' L'\nAlg B BR B' D' B D B F' R' B' R BR' B' BR F BR' BL\nAlg L' BL D L' D' L' D L' U' R' F' R U D'\nAlg U' L BL L U' D R' BL B' BL F' BL' B R BL' U D' L U\nAlg L BL BR' L U' D R' F' R BL' U BL D' BR L\nAlg D L' R F' R' L BL' BR BL' B' BL B BR' F BL' F' D'\nAlg B BL B BR' L R' U' R BR L' B\nAlg L B' R' BR B F BL D' BL' D BL' B' F' BR' R U B L'\nAlg D' L' BL F' D' BL' D B F' R' BR R B' F' BL' L D\nAlg B D' R D' R' BL BR' B BR' B' BL' D' BR B R' B' R B' BL' D'\nAlg U' L R' F U L' BL' L B BL' B' BL L U' L' F' R L' U\nAlg F' D BL' BR' BL' BR B' U' F L F' U B D F L U BL' U' L'\nAlg L' U BR' U D R' BL F R BL' U D' BR' L' BL' BR' L'\nAlg U' L' U' D R' BL B' BL F BL' B R BL' U D' L' BL' L' U\nAlg D F BL L' BL' B L' B' L' B L' B' L' BL L BL' F' D'\nAlg F' BR' B BL' BR BL B' F L' F' L B BR' B' BR L' F L BL'\nAlg F' L F' L U' D R' F R U D' L' BL' F L' F\nAlg F U' F' BR F' R' BR' U F' L' BL F' D' BL'\nAlg B BR' U R BR' R' BR U' B' BR\nAlg F' BR' B BR' R BR' BL' BR R' BR BL B' BR F\nAlg L' U BL B' U' BL U BL' B BR BL' BR' U' L\nAlg BR BL' BR' BL L' BL BR BL' BR' L\nAlg U BR' U' BR L' BL BR BL' BR' L\nAlg U' L F BL' F' BL F' BR F BR' L' U\nAlg F L F' BL D F' D' F BL' L'\nAlg U BR' U BR L BL BR BL' BR' L' U\nAlg F BR R BL' F' BL' F R' BL BR' BL F'\nAlg D BL D B U BR' D BR' L' U' BR' U BR L D' BR U' B' D\nAlg U BL' U' BL U BL D L' D BR D' L D BR U BR U D\nAlg B' U F U' B' U F' BR' U' B L B' U BR U' B L' B BL\nAlg B U' B BL U' BL L U' D R' F' R U' D' L' BL' U B\nAlg B L R F D' BR' D F' R' BL' U' L U L' U BL L' B'\nAlg D BL D F' BR' F BL' D R' BR' R F D' BL F' BR D\nAlg L' D F' R' U BR L BL B' BL B BL' BR' L' U' R D' L\nAlg F BL' U D L' U' BR R F' R' BR' U L D BL U' D BL F'\nAlg BR' BL' U' L' BL D F' L' F' L F L U L' D' BR L BL\nAlg B' L' BL U D R' F' R U D' L' BL L U BL' L B\nAlg B BL' L U B' L BL' L B' U' B' L' D L' U' B L' B' D'\nAlg B' R' L U L' R BR BL' B BR' B' BL B' BL' B'\nAlg F L R BL B' U' B R' BL' L' BL F' BL BR' BL L BL' BR L'\nAlg B' U' BL L U D R' F R U D' L' BL' U BL' B' U B'\nAlg U BR BL' BR' D' B D' F' D B' D' F BL' U' BL' F' BL' F D'\nAlg D' BL' D L BL L' D' BL D F' D F D' BL' D' BL D\nAlg B' BL' B' BL L' B' BL' F' D F L F' D' F BL' L BL' B L B\nAlg F BL' U D' BL' D' L' U' BR R F R' BR' U L U' D' BL F'\nAlg U' D' B D F' D' BR' D' BR D BR B' BL' D F BL U BL'\nAlg B BL BR D' BR L' R F R' BR' L D BL' BR' BL' B'\nAlg L' F L' U BR' U' BR L F' BR' L U BR U'\nAlg F' BL' D' BR' BL B' U' BL U B BL' BR D F\nAlg F' D' BR' U R' U BL U' R U' BL' BR D F\nAlg F U' BR F' U' BL' B U F BR' R F' U BL L\nAlg B' BL' U' BL U B BL' B BL BR BL' BR' B' BL\nAlg D' F' U BL U' L F U' F' U L' BL' F D\nAlg F' BL' D' BR' BL BR' F' BR U' B' BR' U R' BR' F'\nAlg B' U' B BL' B U' B BL' L U' L BL' L B\nAlg F' D' F U' F U F' BL F' BL' D F\nAlg F' D BR F' R F R' BR' F D'\nAlg D BL D B BR' D L' BL' L' BL' BR' BL L BL L D' BR B' D\nAlg B L BL L' BL' L' D F' R' BR R D' F L' BL' L' B'\nAlg B BL' F' BL BR D' BR' F D' B' D L F' BL' F L D L D' BL\nAlg B D' BR' D' BR' F D' BL' D' BL D BL F' D BR D' B'\nAlg B D' B U B' D B F' BR' F L' F BR F' L U' B BL\nAlg L BL' B' U BL L' BL L U L' BL' L BL' U' B BL' L'\nAlg U D F' D BR BL' BR' BL B D' F D B' D BR BL BR' U'\nAlg F' D BR L' U' R F' R' U BR' L D BR' BL BR D F\nAlg BR' L BL L' BL' BR BL' F BL' L R BL B' U B R' BL' L' F'\nAlg D BL BR D B F' R' U' BR' U R B' F D' BR' D'\nAlg D' B BR' D L' BL' L' BL' BR BL L BL L D' BR B' D' BL' D'\nAlg B U' R B' BL' B R' U' B BL' B' U' BL B' U' L U L'\nAlg B D' B' D' BR' BL BR D' B' L B BR' U B U' BL' BR BL L' BL'\nAlg B D BR' D' F BL' D' BL' D BL D F' BR D BR D B'\nAlg D' B D F' D' BR' D' BR D BR BL BR' BL' BR B' BL' D F\nAlg L BL B' U BL L' BL L U' L' BL' L BL' U' B BL L'\nAlg B' U B' D' B U' B' D BL' U BL' U' BL' B' U BL' U'\nAlg D' BR' B' L' U L' B' U B L U' L B BR D BL\nAlg L' D L' F U' F' L D' L' F U BR F' L F BR' F' L BL'\nAlg D BR D B F' R' U' BR U R B' F D' BR' BL' D'\nAlg BR BL D F BR' BL BR BL' BR F' BR' D' BL' BR'\nAlg BR' U' L' BL F' BL' F L BL' U BL BR\nAlg D' BR' B' U BR U' BL U' BL' U BR' B BR D\nAlg F U BR' U R U' BR B U' F' BL U' L' U BL' B'\nAlg B U' L F BR F' L F' BR' F L U B'\nAlg BR BL F BL' L F' BR' BL' F BL L' BL' F' BL\nAlg U' BR' L BL' BR L U' BR' U L' BL L' U' BR U'\nAlg L' F L' U BR' U' BR L F' L BL' BR BL BR'\nAlg F' D' BR' BL U R' U BL' U' R U' BR D F\nAlg F' BR' B F' U F BR U' BR' B' F BL BR BL'\nAlg L B' U' R' BR B F BL D' BL D BL' B' F' BR' R B L'\nAlg B F BL B L F BR' R' BL U' R BL' BR' F' L' F' BR' B\nAlg U BR F' D F BR' U' L' BL L' BL' L U L B' BL L' B U'\nAlg F' L B F BL B R U' R' B' BL' B' F' L BL L F\nAlg D BL D B BR' D BR' D' BR D BR BL BR' BL' D' B' D\nAlg D' BR' BL B BR B' BL' D BL D' B' BL B BR' BL' BR D\nAlg D F' U BR U' L U' BR' U L' D B D' F D B' D BL\nAlg L B BL' B L F R U' R' F' L' B' BL B' L' BL'\nAlg B D' B U B' D F' BR F L' F BR' F' L B U' B BL\nAlg B' BL L B' L' B' L B' BR' R' U' R BR L'\nAlg D' F' U' B L' BL' L R' BR R L' BL L B' U F D' BL' D'\nAlg B' F' BL' B' F U D' R BR R' BL U' BL' D B'\nAlg F' BL' D BL F BL' D' B' U' B D F' D' B' F U B\nAlg F' L' BL' L' B F BL B R U R' B' BL' B' F' L' F\nAlg L' BL U' D F D' BL' D BL F' BL' D' BL D F' U D' BL L\nAlg B' BR L R' U R BR F L' B' BL' B L F' BR L' B\nAlg B' L B' BR' B L' B' D F' U F D' F U' F' BR B' BL'\nAlg B' BR D' BL' BR' BL B L' R' L' R BR L D L BL BR' B BL\nAlg L' D F' L F L' F D' L' BL' L' D BL' BR' BL' BR BL' D'\nAlg B' F BR F BR L R' BL U R BL' BR L' B' BL' B' F\nAlg F L' F' BR' B BR' F' BR B' BR' F' L F' BR'\nAlg BR' B' BR BL' D' BR D BR' BL B\nAlg L' F L' U BR' U' L U' BR U F' L\nAlg F U' BR' R U' BR BL BR' U' BL' U' R' F' BR U\nAlg B' BR' R' U' BL D' BL U BL' D R BL' BR B\nAlg D BR' U' L BL' F' BL F L' BL U BL' BR D'\nAlg F' BL' D' F BR' BL BR BL' BR F' BR' D BL F\nAlg F' BR' BL' BR D' F' BR F BR' D BL F\nAlg F' BR R' BR BL' BR' R BR' BL F\nAlg B BR F' BR' B' F BL F BL' F'\nAlg B D' B U B' D BL' F R' F BL F' R B F' U' B BL\nAlg L BL' B' U L U L BL L B' BL B' U' BL' U' B' L' BL\nAlg L' BL' U' D F D' BL' D BL F BL' D' BL D F' U D' BL' L\nAlg F' L F' BL' D' BR' B R' U' R BR B' D BL' F L' F\nAlg U D' BR' D BR' U' L U BR L' D' BR D L U' L' BL\nAlg B' BR' B' BL B L F' BR' R' U' R BR F BR L' B\nAlg U' F' D BR' F' BR D L D L' U D' B D' B' F D' BL F\nAlg B F BL B F' L F BR' R' BL U' R BL' BR' F' BR' L' B\nAlg F' D' BL B BR' BL BR BL' BR' D' BR' D BR D F D' B' D\nAlg B' BR' B' BL B L F BR' R' U' R BR F' BR L' B\nAlg L' F BR L' R' BR BL' BR' R BR' BL B' L F' L' B L' BL'\nAlg B' U' BL' U D' BL' D F L' R U R' F' L U' BL U B\nAlg D' B D BL BR BL' BR' D' BR' D BR D' BR B' D' BL' D'\nAlg B' BR' L F' BR' R' U R BR F L' B' BL' B BR B\nAlg L U L' D' BR' D L U' L' U D' BR D BR BL BR' BL' U' BL'\nAlg F' L F' BL D' B BR' R' U R B' BR D BL F L' F\nAlg B' L B' BR' B L' F' R F' BL F R' F BL' B' BR B' BL'\nAlg F' L BL' BR' R' BL U R BR B L' B L B L' F BL' B\nAlg L' F D' BR U' BR' D BR' U BR L' B' L F' L' B L' BL'\nAlg B' BR' L F BR' R' U R BR F' L' B' BL' B BR B\nAlg L F' D' F BR' BL BR BL' BR F' BR' D F L'\nAlg F' BL' D F BL' F' BL D' BR' BL BR F\nAlg B' BR' R' BL D' BL U' BL' D BL' U R BR B\nAlg B' L BL' BR BL L' B' F BL F' BL' B BR' B\nAlg F U' BR' R BR F' U BL L U BL' B U'\nAlg B' BR B' BL F BL' B F' L BL' BR' BL L' B\nAlg U' L BL' U' R U' BL' U R' U BL' L' U\nAlg F U' BR' R' F' BR' F BL BR R BL' F' BR U\nAlg B U' L' F' BR F L' F BR' F' L' U B'\nAlg F' BR' B' F BR' BL' BR F BL B F' BL BR BL'\nAlg B BL' U' L U BL' B' BL' B' L' BL U B' U' BL L BL L\nAlg B R' U' B U R B' BR F D' B' D BL F' BL' BR' BL\nAlg U BL U' B BL U BL U' BL D' B U B' D B U' B\nAlg B BL B BL' B BR B' BL BR' R' L U' L' R B\nAlg U' L BL' B BL B' L' F U B' R U R' U F' U B BL\nAlg F' BL' D' BR' L' B' L B BL BR BL' B' L' B L D BL F BL\nAlg L B' L' F U B' R BR B BR' R' BR BL' BR' BL B U' F' BL\nAlg D' F BL B BR' B BR B' BL' D BL D' B' F' D\nAlg B' L' BL F U F' L' U B U' L F U' F' BL' L BL' B BL B\nAlg D BL D B U F' R' BR' R F U' B' D\nAlg B BR B' D' BL BR D BR D B' BL' B D BR' BL' D' BL' D'\nAlg B' R BR B' BR' R' B U' F' L B L' BL' F BL U BL'\nAlg U BR BL' BR' D' B D' F' D B' BL' BR BL BR' D' F U' D'\nAlg U' D' BR' U' BR' D' L' D BR' D' L D' BL' U' BL' U BL U'\nAlg L' F' BR F' R F' R' L F' BR' D L BL' L' BL D' F BL'\nAlg B D BL' D B U R BR R' U' B' D' BL D' B' BL\nAlg B' U L' U B BL L' F' BL F D' B' U B D B' L B L'\nAlg L BL' B' U L F R U' R' F' U L F' L B L' F\nAlg L' D R' U BR L BL B' BL' B BL' BR' L' U' R F D' L\nAlg D' B U F' R' BR R F U' B' D' BL' D'\nAlg B D BL' B' U' BL L' D L D' BL' U B BL B' D'\nAlg B U' BL' U' F U' B U B' F' U BL U' B U' B\nAlg U BR' U L BL' L U' BR U BR' L' BL BR L' U\nAlg F' D' BR' BL B' U' BL' U B BL' BR D BL F\nAlg B' L' B' F BL' F' BL F' BR F BR' B L B\nAlg F' BL' D' BR F' BR' F D BR' BL BR F\nAlg F D' F' U' F' D' BR D F' D' BR' D' F' U\nAlg BR' BL' U' BL L U' F U F' L' U BR\nAlg F BR R U' BR B U BR' F BR BL' BR D BL F\nAlg F' BR' F U' BL L' U BL' B' F' BL' BR D' BL F\nAlg B' U L' B' U L' D F L F' D' L U' B L U' L B L'\nAlg B BL B L F BR' R' U' R BR F' L' B\nAlg B D' B BR' R' U' B' U R BR U' D' F L' F' U L' D' L\nAlg L U' L' U B BL' U B BL B' U R B' BL B R' U B'\nAlg D F' D BL U' R U' BL' U R' U B D' F D B' D BL\nAlg B BL U B BR' L R' F' U' F R BR L' B' U' B'\nAlg B' U' B F' D F D' B' U B D BL F' BL' D' BL F\nAlg B D BR B F' U' R' BR' R U B' F BR' D' BL B'\nAlg L B' F R BL' U' R' BL B F' L U BR' U' BL L U BR U'\nAlg F' L F' BL L U' D R' F' R U D' L' F L' F\nAlg L U L' F' BL' F L B BL' U BL' U' BL B' BL L U' L\nAlg B' L F BR' R' U R BR F' L' B' BL' B'\nAlg U BR' U' L' U' BR' F' BR F BR D R' F R U D' L' BL' L'\nAlg B L BL L F' D R' BR' R F D' L BL L BL' L' B'\nAlg F' BL' D F' D' B D' B' U' D L D BR' L' F BR D' F U\nAlg B U B BR' L R' F' U F R BR L' B' U' BL' B'\nAlg U B' L BL' B L' U' L' BL L BL' L U BR F' D' F BR' U'\nAlg B BL' D BR B F' U' R' BR R U B' F BR' D' B'\nAlg B BR B F BR' U BL' L R BR' R' L' F' U BR U BL B BL'\nAlg B' BR' L R' U R BR L' B' BL' B'\nAlg B' U BR' R L F' BR' F L' R' BR U' B' BR B'\nAlg F' BL' F' BR R U' BR B F BR BL' D F U BL'\nAlg F' BR' B' U BR' F BR' F' BR U' BR B BR F\nAlg BR' BL' U' BL L' F' BL F BL' L U BR\nAlg U' L BL U' R U' BL U R' U BL L' U\nAlg F BR' F' U' L F BR U F' U' L' BL U BL'\nAlg L' F U' BR' U L' U BR U' L F' L\nAlg F' BR' B' U' BR' U F BR B U' BL U BR BL'\nAlg F' BR' U BR D' BR U' BR' D F\nAlg F BL' BR R BL' F' BL F R' BL BR' F'\nAlg L BL' B BL' U BL U' BL B' L' F' BL F L U' L U L\nAlg B F BL B F' L F' BR' R' BL U' R BL' BR' F BR' L' B\nAlg F BL B' F' BR B' BR' B L F BL B' BR B BL' BR' F' L' B\nAlg B F D' BL U R BL' BR' R' U' D B F' BL B\nAlg L B' U B' BR B BR U' BR' B L' F BL' B F' BR' B' BL'\nAlg U' L R' F L U L' BL' B BL B' L' BL L U' F' R L' U\nAlg BR BL F BL' F' L' F' BR' L B BR B' L' F L B BR' B' BL\nAlg B' BR' L F L' B' BL B L F' BR' R' U' R BR' L' B\nAlg D L U' BR U L U' R BL' F' R' F BL F' BR' U L D BL D\nAlg B F BL B F BR' L R' BL U' R BL' BR' L' F BR' B\nAlg L B' L' U L' B' U L' D F L' F' D' L U' B L U' B\nAlg B' BR L F' BR R' BL U R BL' BR F L' B' F BL' B' F'\nAlg B' BL L B L' B' BL' L' U BL' U R' L' R U' BL U' L B\nAlg B U' D' F D B BL' B' U D' R BR R' U' F' U D B'\nAlg D F L F' L' F R L' BL B L B' BL' L R' F' L D'\nAlg L BL D' B BR' R' U R B' BR D BL L'\nAlg D F D' B' U' B U' D F' D' F U B' U B F' BL'\nAlg D' BR' BL BR B' BL' B D BL' D' BL B BR' B' BL' BR D\nAlg U BR' U' L U R' L R BR L' B' L' B L U' L' BL'\nAlg BR' L R' U R BR B L' B L B L' BL' B\nAlg B BR' B U BR' R L F' BR F L' R' BR U' B\nAlg F' L B' BR' B L BL' L' B' BR B L BL L F\nAlg D F U' F' U D' BR U' D' F U F' D BR'\nAlg B' BL' BR D' BR' D BL BR' B BR\nAlg B BL U' BR' L U BR' F' BL D BL BR F BR\nAlg L' U BR BL BR' B' BL U' BL' U B BL' U' L\nAlg U B' BL U' L' BL' U' F BR' R' BR U F'\nAlg D BR' BL U' BL' L F' BL' F BL L' U BR D'\nAlg BR L' BL BR' BL' L BL' BR BL BR'\nAlg F BL F' BL' B F' BR F BR' B'\nAlg D BR L' U' R F' R' U BR L BL B' BL B BL' BR D'\nAlg D' BL' D BL D F' D' F D' BL' D L BL' L' D' BL D\nAlg B F D' F' U' BL' B U B' BL F D B U' B' U B' F' BL\nAlg B U F' D' R BR' R' U' D B BL B' U F U' B'\nAlg B BL B L B BR' F BR B' BR' R' U' R F' BR L' B\nAlg B BL B L F' U' F' U F BR' R' U' R BR' F BR' L' B\nAlg B' U' B F' D F D' B' U B U' D BL' F' BL D' F U BL\nAlg L F' BR B' F' R BL' U' R' BL B F' BR L BL BR L\nAlg D F' D' BL F' D' F R BL B' L U L' B R' F' BL' D F\nAlg B BL BR BL D' BR L' R F' R' BR' L D BR' BL' B'\nAlg B' L B' BR' B L' BL' U BL U' B' BR B' U BL' U'\nAlg D' B BR' F BL' F' D BR D' BL F' BR B' F D' BL' D'\nAlg B D F' L' R F D BR' D' F' R BR' L D B' BL' D' F D'\nAlg D L BL' F' R U R' B F' L BL' L' B' F' BL L' D'\nAlg B' BR' L F R' U R BR B BR' F' BR B' L' B' BL' B'\nAlg D L F BL F L BL' L D' BL' D' F' D' F' L BL D' BL'\nAlg D F BL F' BR B' BL' B BL BR' BL L' R F R' L D'\nAlg L BL' B' L B L B' L F R U R' B F'\nAlg F' D' BL F R B' L U' L' B R' BL' F' D F BL' D F D'\nAlg B' L' BL U' D' L' BL' L U' D R' F R U' BL' L B\nAlg L' F L' BL U' BL' U L F' L U' BL U BL'\nAlg D' F' BL L U' F U F' L' U BL' U' F D\nAlg B' U F D F' U F D' F U B U' F U\nAlg U B' BR' U R' U' R BR U' B\nAlg F' BL' D F BL F' BR F' BR' F BL' D' BL F\nAlg F' BR' BL' BR D BL' F BL F' D' BL F\nAlg U' F R F' BL' F R' F BL F U\nAlg F' BR F BR' L BL' BR' BL BR L'\nAlg F U' B F U' BR U BR' U F' U' B' U F'\nAlg D F' BR R F' R' F BR' D' F\nAlg B D' B U B' D B U' B BR BL BR' D BL BR BL BR' BL D'\nAlg B' U' L' D' F D' L' F' L D F' D L U B BL'\nAlg D L' F R L' BL B L' B' BL' L R' F' L F L' F' D'\nAlg D L' D' BL D F' D F D' BL' L BL D'\nAlg D' B R U' B' F' BL' L BL L' BL B F U R' BR' B' D\nAlg D L BL' F L BL L' B' F R U' R' B F BL L' D'\nAlg D F' BL F BL U BL F' D B D' F D B' D BR BL BR' U'\nAlg B F' BL B F' BR' F' L F R' U' R BL' BR BL F' L' B\nAlg L F BR B' D BL D' R U' R' D BL' D' B BR' F' L BL L\nAlg B F BL B F' BR' L R' U' R BL' BR BL L' B\nAlg D' B U BR' D BR' L' U' BR U BR L D' BR U' B' D' BL' D'\nAlg F' D' BR' BL' BR D' BR L' U' R F R' U BR' L D' F\nAlg D F U D' BL U' B D' F BR F' D' F' D BR' D B' BL\nAlg B U' D' F D BL' D' BR D' BR' D BL B' BL' B F' U D B'\nAlg L' BL' L' F BR B' D BL D' R U R' D BL' D' B BR' F' L'\nAlg B U F' U' B BL' B' U D' R BR R' D F U' B'\nAlg B L BL' U' L U' L' U R BL F D' BR D F' R' L' B'\nAlg B' L B' BR' B L' F' BL F BL' B' BR B' F U' F' U BL'\nAlg D' B BR R U' B' F' BL' L BL' L' BL B F U R' B' D\nAlg B BL' U' B BL' B D B D' B D B D' BL B' U BL B'\nAlg U BR' U' BR L' F BR' L' U BR U' L F' L\nAlg L' U BR BL BR' B U BR' U' BR B' BL' U' L\nAlg BR BL D BR' BL' L BL' BR BL L' BL D' BL' BR'\nAlg F' BL' D' BR' D BL BR' B U BR U' B' BR F\nAlg F U' F' D F' U' B' U F' U' B U' F' D'\nAlg B' U BR' R' U R U' BR B U'\nAlg L U BL U' BL' L' BL L' F' BL' F BL L BL'\nAlg U B' BL' BR' U F' BR' D' F BR' U BL' L' BL'\nAlg F BL' L' F' BL D' F' BR U' R' F' U F' BR'\nAlg U B U' BL L U' L' U BL' B'\nAlg U BL U' B BR' B U BL' U' BL L B' BR B L' B\nAlg B BL B L F' U' F U F BR' R' U' R BR' F' BR' L' B\nAlg B BR D L' D' F' D F D' F' D' F D' BR' L D' B D B\nAlg F' L B' L' F L' U' F R U R' F' L' U' B BL L'\nAlg B' L' F U F L' F R U' R' U L F R U R' U B F' BL\nAlg B U F' D' F' U R BR' R' U' F D B BL B' F U' B'\nAlg F BL U BL' U' F' BL L U' L D BR L' U L U' BR' U D' L\nAlg B U' D' B' F BL B BL' D' BR D BR' D BL D' F' U D B'\nAlg B BL' D' B' D B BL D BR' BL BR' R D R' BR BL' BR D' B'\nAlg B F U' F' D' F' U' R BL' BR' R' BL U' F D B BL B\nAlg D BR' BL B' BL' B BL' BR' L' U' R F R' U BR' L D'\nAlg B' F' U' F' BL' D' B BR' R' U R B' BR D F U B F\nAlg B' D' B' D BR L' D F' D F D F' D' F D L D' BR' B'\nAlg D' B F D BL' D' BL B BR' B' BR B' BL' F' D\nAlg B D B' F BL L' BL' F' L BL L' BL' BR L R L' R' BR' L' D'\nAlg B U B F' BL' B' D' F' U R BR R' U' F D F U' B'\nAlg BR BL' L' F' BR U F' U' BR L' B' BR' L F' BR L' B L'\nAlg D BL' L' BL D F' D' F D' BL' D L D'\nAlg F' BL' B F U' B U B' D' F' BL' B U' B' BL U F D B'\nAlg B' F' L BL' BR' R' BL U R BR L' B' F BL' B'\nAlg BR BL' BR' BL L' F L' BL' BR BL BR' L F' L\nAlg B BL BR' F U' L F U BR' F BL D BR' BL\nAlg B' BL' B' U BR' U' BR BL' BR BL BR' B BL B\nAlg BR' U' L F U' F' U L' BL' U BL BR\nAlg B U BR R' BR U' B' BR U' B' U BR' R' BR\nAlg B BR BL L BL BR' BL' L U' BL' U BL L BL' B'\nAlg F' BR' B BL' BR' R BR' BL BR R' BR B' BR F\nAlg F' BR' B U BR' U' B' BR BL' D' BR D BL F\nAlg D' F' BR U' R' F' U F' BR' F BL' L' F' BL\nAlg B BL U' L U L' BL' U B' U'\nAlg L' F' R B F' BR L' D' F' D BR' L B' F R' F BL L\nAlg D F BL L' BL' B L B' L B L B' L BL L BL' F' D'\nAlg B BL B BR' L R' U' R BR L' B U BR' U' BR BL' BR BL BR'\nAlg B' F R U' R' F' L' B L' B' L' B BL L'\nAlg B' L' F D R' F' L' U L F R' U D' L' B BL L F' L\nAlg D' L' BL F R' BR' R B' F D' BL D B F BL' L D\nAlg B' BR' R' U' BL' U' L R' F R F' L' R U' BL BR B BL\nAlg BR L BL BR L U' D R' BL F' R BL' U' D' BR U' L\nAlg BR L B' L F R F U F' U' R' L' B L F' BR' L BL\nAlg B F U D' R BL' BR' R' BL U' D B F' BL B\nAlg L' BL L' D B D' BL' B' D' L R' D R BL' U' L U BL'\nAlg L' D BL' U' R' BL F R U D' BR L' BL' BR' L'\nAlg U BR' U' L' BL' U BR U' L' B' F R BL' U R' BL B F' L'\nAlg BR L' BL' L' B' F R BL' U R' BL B F BR F BR L'\nAlg B' F' L F BR BL B' BR' B BL' F' L' B' BR B BR' B F BL'\nAlg B D BR B' D' BL' D B F' R' BR R F BR' D' B'\nAlg D BL' L' BL' L BL L' BL F' BL' L' F L BL F BL' L D'\nAlg U' D R' F R U L D' L D L D' BL' L\nAlg U D' BR D' L' D R F BR F' BR' R' BR' D' L U' D' BL'\nAlg B' F' BR' L R' BL U R BL' BR L' B' F BL' B'\nAlg L' F BL' F' BL F' BR F BR' L\nAlg L BL F' D F D' BL' F L' F'\nAlg F' D' BR U BR' D BR' U' BR F\nAlg BR' L BL' BR BL BR L' F' BR' F\nAlg B BR F BR' B' BR F' R' BR' BL' BR R BR' BL\nAlg BR' B U BR' R BR R' U' BR B'\nAlg F' BL' BR R' BR BL BR' R BR' F\nAlg BR L' BL BR' BL' BR' L U BR U'\nAlg U BR' U' BR BL' BR BL BR'\n`,\n  );\n}\n", "/* Redi cube scramble generator */\n// From https://torchlight.github.io/rediscrambler.js\n// Added to `cubing.js` under the GPL license by permission from the author (@torchlight/xyzzy).\n\n\"use strict\";\n\nimport { Alg } from \"../../../alg\";\nimport { randomUIntBelow } from \"random-uint-below\";\n\nfunction counter(A) {\n  let counts = [];\n  for (let a of A) {\n    counts[a] = (counts[a] || 0) + 1;\n  }\n  return counts;\n}\n\n/* Combinatoric functions */\n\nfunction factorial(n) {\n  if (n < 2) {\n    return n;\n  }\n  let f = 1;\n  for (let i = 2; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n}\n\nfunction C(n, k) {\n  if (k < 0 || k > n) {\n    return 0;\n  }\n  if (k === 0 || k === n) {\n    return 1;\n  }\n  let c = 1;\n  for (let i = 0; i < k; i++) {\n    c = ((c * (n - i)) / (i + 1)) | 0;\n  }\n  return c;\n}\n\nfunction permutation_to_index(perm) {\n  perm = perm.slice();\n  let n = perm.length;\n  let f = factorial(n - 1);\n  let ind = 0;\n  while (n > 1) {\n    n--;\n    // invariant: f === factorial(n)\n    // also, perm stores meaningful values up to perm[n]\n    let e = perm[0];\n    ind += e * f;\n    for (let i = 0; i < n; i++) {\n      let x = perm[i + 1];\n      perm[i] = x - (x > e);\n    }\n    f /= n;\n  }\n  return ind;\n}\n\nfunction index_to_permutation(ind, n) {\n  let perm = [];\n  let f = factorial(n - 1);\n  for (let i = 0; i < n; i++) {\n    perm[i] = (ind / f) | 0;\n    ind %= f;\n    f /= n - 1 - i;\n  }\n  // could probably use some kind of binary tree to make this linearithmic, but I am hella lazy.\n  for (let i = n - 2; i >= 0; i--) {\n    for (let j = i + 1; j < n; j++) {\n      perm[j] += +(perm[j] >= perm[i]);\n    }\n  }\n  return perm;\n}\n\nfunction permutation_parity(A) {\n  let n = A.length;\n  let parity = 0;\n  // again, there is a linearithmic algorithm to count inversions, but >lazy\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = i; j < n; j++) {\n      if (A[i] > A[j]) {\n        parity ^= 1;\n      }\n    }\n  }\n  return parity;\n}\n\nfunction index_to_evenpermutation(ind, n) {\n  let perm = [];\n  let f = factorial(n - 1) / 2;\n  let parity = 0;\n  for (let i = 0; i < n - 1; i++) {\n    perm[i] = (ind / f) | 0;\n    ind %= f;\n    f /= n - 1 - i;\n  }\n  perm[n - 1] = 0;\n  for (let i = n - 2; i >= 0; i--) {\n    for (let j = i + 1; j < n; j++) {\n      if (perm[j] >= perm[i]) {\n        perm[j]++;\n      } else {\n        parity ^= 1;\n      }\n    }\n  }\n  if (parity === 1) {\n    [perm[n - 2], perm[n - 1]] = [perm[n - 1], perm[n - 2]];\n  }\n  return perm;\n}\n\nfunction evenpermutation_to_index(perm) {\n  return permutation_to_index(perm) >> 1;\n}\n\nfunction comb_to_index(l) {\n  let bits = l.length;\n  let ones = 0;\n  for (let i = 0; i < bits; i++) {\n    ones += +(l[i] === 1);\n  }\n  let zeros = bits - ones;\n  if (zeros === 0 || ones === 0 || bits === 1) {\n    return 0;\n  }\n  let b = C(bits - 1, ones);\n  let ind = 0;\n  for (let i = 0; zeros > 0 && ones > 0 && bits > 1; i++) {\n    bits--;\n    if (l[i] === 0) {\n      b = (b * --zeros) / bits;\n    } else {\n      // l[i] === 1\n      ind += b;\n      b = (b * ones--) / bits;\n    }\n  }\n  return ind;\n}\n\nfunction index_to_comb(ind, ones, bits) {\n  let zeros = bits - ones;\n  let b = C(bits - 1, ones);\n  let l = [];\n  let n = bits - 1;\n  for (let i = 0; i < n; i++) {\n    bits--;\n    if (ind < b) {\n      l.push(0);\n      b = (b * --zeros) / bits;\n    } else {\n      l.push(1);\n      ind -= b;\n      b = (b * ones--) / bits;\n    }\n  }\n  l.push(ones);\n  return l;\n}\n\nfunction compose(A, B) {\n  let C = [];\n  for (let i = 0; i < B.length; i++) {\n    C[i] = A[B[i]];\n  }\n  return C;\n}\n\nfunction permutation_from_cycle(cycle, n) {\n  let perm = [];\n  for (let i = 0; i < n; i++) {\n    perm[i] = i;\n  }\n  for (let i = 0; i < cycle.length; i++) {\n    perm[cycle[i]] = cycle[(i + 1) % cycle.length];\n  }\n  return perm;\n}\n\nfunction unsparsify_list(d, n) {\n  let l = Array(n).fill(0);\n  for (let k in d) {\n    l[k] = d[k];\n  }\n  return l;\n}\n\nfunction compose_state(state1, state2) {\n  let o = Array(8).fill(0);\n  for (let i = 0; i < 8; i++) {\n    o[i] = (state1[1][i] + state2[1][i]) % 3;\n  }\n  return [compose(state1[0], state2[0]), o];\n}\n\nlet move_UL = [\n  permutation_from_cycle([0, 1, 4], 12),\n  unsparsify_list({ 0: 2 }, 8),\n];\nlet move_U = [\n  permutation_from_cycle([1, 2, 5], 12),\n  unsparsify_list({ 1: 2 }, 8),\n];\nlet move_UR = [\n  permutation_from_cycle([2, 3, 6], 12),\n  unsparsify_list({ 2: 2 }, 8),\n];\nlet move_F = [\n  permutation_from_cycle([3, 0, 7], 12),\n  unsparsify_list({ 3: 2 }, 8),\n];\nlet move_L = [\n  permutation_from_cycle([9, 8, 4], 12),\n  unsparsify_list({ 4: 2 }, 8),\n];\nlet move_B = [\n  permutation_from_cycle([10, 9, 5], 12),\n  unsparsify_list({ 5: 2 }, 8),\n];\nlet move_R = [\n  permutation_from_cycle([11, 10, 6], 12),\n  unsparsify_list({ 6: 2 }, 8),\n];\nlet move_D = [\n  permutation_from_cycle([8, 11, 7], 12),\n  unsparsify_list({ 7: 2 }, 8),\n];\n\nlet solved = [index_to_permutation(0, 12), Array(8).fill(0)];\n\nlet moves = [move_UL, move_U, move_UR, move_F, move_L, move_B, move_R, move_D];\nlet move_names = [\"UL\", \"U\", \"UR\", \"F\", \"L\", \"B\", \"R\", \"D\"];\nlet tetrad = [0, 1, 0, 1, 1, 0, 1, 0];\n\nfunction apply_move_sequence(state, move_sequence) {\n  for (let [m, r] of move_sequence) {\n    for (let i = 0; i < r; i++) {\n      state = compose_state(state, moves[m]);\n    }\n  }\n  return state;\n}\n\nfunction stringify_move_sequence(move_sequence) {\n  let suffixes = [\"0\", \"\", \"'\"];\n  let s = move_sequence.map(([m, r]) => move_names[m] + suffixes[r]);\n  return s.join(\" \");\n}\n\nfunction print_move_sequence(move_sequence) {\n  console.log(stringify_move_sequence(move_sequence));\n}\n\nfunction generate_random_state() {\n  let p = index_to_evenpermutation(\n    Math.floor(randomUIntBelow(factorial(12)) / 2),\n    12,\n  );\n  let o = Array(8);\n  for (let i = 0; i < 8; i++) {\n    o[i] = randomUIntBelow(3);\n  }\n  return [p, o];\n}\n\nfunction generate_random_state_scramble() {\n  return solve(generate_random_state());\n}\n\nfunction generate_scramble_sequence() {\n  return stringify_move_sequence(generate_random_state_scramble());\n}\n\nfunction solve(state) {\n  let phase1_indices = index_phase1(state);\n  let phase1_mtables = [\n    generate_phase1_edge_mtable(),\n    generate_phase1_separate_mtable(),\n  ];\n  let phase1_ptables = [\n    generate_phase1_edge_ptable(),\n    generate_phase1_separate_ptable(),\n  ];\n  let phase2_mtables = [\n    generate_phase2_edge_mtable(),\n    generate_phase2_corner_mtable(),\n  ];\n  let phase2_ptables = [\n    generate_phase2_edge_ptable(),\n    generate_phase1_corner_ptable(),\n  ];\n\n  let phase1gen = ida_solve_gen(phase1_indices, phase1_mtables, phase1_ptables);\n  let best = undefined;\n  let intermediate_states = new Set();\n  let start_time = +new Date();\n  for (let i = 0; i < 25; i++) {\n    let { value: sol1, done } = phase1gen.next();\n    let new_state = state;\n    for (let [m, r] of sol1) {\n      for (let i = 0; i < r; i++) {\n        new_state = compose_state(new_state, moves[m]);\n      }\n    }\n    if (intermediate_states.has(new_state.toString())) {\n      // console.log(\"skip\");\n      continue;\n    } else {\n      intermediate_states.add(new_state.toString());\n    }\n    let edge_ind = evenpermutation_to_index(new_state[0].slice(0, 8));\n    let corner_ind = 0;\n    for (let i = 0; i < 4; i++) {\n      corner_ind += new_state[1][i] * 3 ** i;\n    }\n    let phase2_indices = [edge_ind, corner_ind];\n    //let sol2 = [];\n    let moves_left = best ? best.length - sol1.length - 1 : 999999;\n    let sol2 = ida_solve(\n      phase2_indices,\n      phase2_mtables,\n      phase2_ptables,\n      moves_left,\n    );\n    if (sol2 === undefined) {\n      // console.log(\"prune\");\n      continue;\n    }\n    // console.log(\n    //   `to ${new_state} in ${sol1.length} moves; total move count ${\n    //     sol1.length + sol2.length\n    //   }`,\n    // );\n    if (best === undefined || best.length > sol1.length + sol2.length) {\n      best = sol1.concat(sol2);\n    }\n    // bail if we've spent too much time\n    if (new Date() - start_time > 300) {\n      break;\n    }\n  }\n  return best;\n}\n\nfunction index_phase1(state) {\n  let edge_ind = 0;\n  for (let i = 0; i < 4; i++) {\n    edge_ind += state[0].indexOf(i + 8) * 12 ** i;\n  }\n  let corner_ind = 0;\n  for (let i = 0; i < 4; i++) {\n    corner_ind += state[1][i + 4] * 3 ** i;\n  }\n  let filtered = state[0].map((x) => Math.max(-1, x - 8));\n  let separate_ind =\n    comb_to_index(filtered.map((x) => +(x >= 0))) * 2 +\n    permutation_parity(filtered.filter((x) => x >= 0));\n  return [edge_ind, corner_ind + 81 * separate_ind];\n}\n\nlet tables = {};\n\nfunction generate_phase1_corner_mtable() {\n  if (tables.phase1cm) {\n    return tables.phase1cm;\n  }\n  let mtable = [];\n  for (let i = 0; i < 81; i++) {\n    mtable[i] = Array(8);\n    let o = [\n      i % 3,\n      Math.floor(i / 3) % 3,\n      Math.floor(i / 9) % 3,\n      Math.floor(i / 27),\n    ];\n    mtable[i][0] = mtable[i][1] = mtable[i][2] = mtable[i][3] = i;\n    for (let j = 0; j < 4; j++) {\n      o[j] = (o[j] + 2) % 3;\n      mtable[i][4 + j] = o[0] + o[1] * 3 + o[2] * 9 + o[3] * 27;\n      o[j] = (o[j] + 1) % 3;\n    }\n  }\n  return (tables.phase1cm = mtable);\n}\n\nfunction generate_phase1_corner_ptable() {\n  if (tables.phase1cp) {\n    return tables.phase1cp;\n  }\n  let ptable = Array(81);\n  for (let i = 0; i < 81; i++) {\n    let o = [\n      i % 3,\n      Math.floor(i / 3) % 3,\n      Math.floor(i / 9) % 3,\n      Math.floor(i / 27),\n    ];\n    ptable[i] = (o[0] !== 0) + (o[1] !== 0) + (o[2] !== 0) + (o[3] !== 0);\n  }\n  return (tables.phase1cp = ptable);\n}\n\nfunction generate_phase1_edge_mtable() {\n  if (tables.phase1em) {\n    return tables.phase1em;\n  }\n  let mtable_single = [];\n  for (let i = 0; i < 12; i++) {\n    mtable_single[i] = [];\n    for (let m = 0; m < 8; m++) {\n      mtable_single[i][m] = moves[m][0].indexOf(i);\n    }\n  }\n  let mtable = Array(12 ** 4);\n  for (let i = 0; i < 12 ** 4; i++) {\n    mtable[i] = Array(8);\n    for (let m = 0; m < 8; m++) {\n      let I = 0;\n      for (let j = 0; j < 4; j++) {\n        I += mtable_single[Math.floor(i / 12 ** j) % 12][m] * 12 ** j;\n      }\n      mtable[i][m] = I;\n    }\n  }\n  return (tables.phase1em = mtable);\n}\n\nfunction generate_phase1_edge_ptable() {\n  if (tables.phase1ep) {\n    return tables.phase1ep;\n  }\n  return (tables.phase1ep = bfs(generate_phase1_edge_mtable(), [\n    8 + 12 * (9 + 12 * (10 + 12 * 11)),\n  ]));\n}\n\nfunction generate_phase1_separate_mtable() {\n  if (tables.phase1sm) {\n    return tables.phase1sm;\n  }\n  const C12_4 = C(12, 4);\n  let mtable_c = [];\n  for (let i = 0; i < C12_4; i++) {\n    mtable_c[i] = [];\n    let comb = index_to_comb(i, 4, 12);\n    let perm = [];\n    for (let j = 0, k = 0; j < 12; j++) {\n      if (comb[j] === 0) {\n        perm[j] = -1;\n      } else {\n        perm[j] = k++;\n      }\n    }\n    for (let m = 0; m < 8; m++) {\n      let new_perm = compose(perm, moves[m][0]);\n      let new_comb = compose(comb, moves[m][0]);\n      let parity = permutation_parity(new_perm.filter((x) => x >= 0));\n      mtable_c[i][m] = comb_to_index(new_comb) * 2 + parity;\n    }\n  }\n  let mtable_co = generate_phase1_corner_mtable();\n  let mtable = [];\n  for (let j = 0; j < C12_4; j++) {\n    for (let i = 0; i < 81; i++) {\n      let m0 = (mtable[i + 81 * (2 * j)] = []);\n      let m1 = (mtable[i + 81 * (2 * j + 1)] = []);\n      for (let m = 0; m < 8; m++) {\n        m0[m] = mtable_co[i][m] + 81 * mtable_c[j][m];\n        m1[m] = mtable_co[i][m] + 81 * (mtable_c[j][m] ^ 1);\n      }\n    }\n  }\n  return (tables.phase1sm = mtable);\n}\n\nfunction generate_phase1_separate_ptable() {\n  if (tables.phase1sp) {\n    return tables.phase1sp;\n  }\n  return (tables.phase1sp = bfs(generate_phase1_separate_mtable(), [0]));\n}\n\nfunction generate_phase2_corner_mtable() {\n  if (tables.phase2cm) {\n    return tables.phase2cm;\n  }\n  let phase1_mtable = generate_phase1_corner_mtable();\n  let mtable = Array(81);\n  for (let i = 0; i < 81; i++) {\n    mtable[i] = phase1_mtable[i].slice(4, 8);\n  }\n  return (tables.phase2cm = mtable);\n}\n\nfunction generate_phase2_edge_mtable() {\n  if (tables.phase2em) {\n    return tables.phase2em;\n  }\n  const n = 8;\n  const HALFFACT8 = factorial(n) / 2;\n  let mtable = Array(HALFFACT8);\n  let perm = [0, 1, 2, 3, 4, 5, 6, 7];\n  for (let i = 0; i < HALFFACT8; i++) {\n    //perm = index_to_evenpermutation(i, 8);\n    mtable[i] = Array(4);\n    for (let m = 0; m < 4; m++) {\n      let new_perm = compose(perm, moves[m][0].slice(0, 8));\n      mtable[i][m] = evenpermutation_to_index(new_perm);\n    }\n\n    if (i === HALFFACT8 - 1) {\n      break;\n    }\n    // update perm to lex-next even permutation\n    let parity = 0;\n    do {\n      for (let k = n - 2; k >= 0; k--) {\n        if (perm[k] > perm[k + 1]) {\n          continue;\n        }\n        let l = k + 1;\n        for (let L = l; L < n; L++) {\n          if (perm[L] > perm[k]) {\n            l = L;\n          }\n        }\n        [perm[k], perm[l]] = [perm[l], perm[k]];\n        parity ^= 1;\n        for (let j = 0; k + 1 + j < n - 1 - j; j++, parity ^= 1) {\n          [perm[k + 1 + j], perm[n - 1 - j]] = [\n            perm[n - 1 - j],\n            perm[k + 1 + j],\n          ];\n        }\n        break;\n      }\n    } while (parity !== 0);\n  }\n  return (tables.phase2em = mtable);\n}\n\nfunction generate_phase2_edge_ptable() {\n  if (tables.phase2ep) {\n    return tables.phase2ep;\n  }\n  return (tables.phase2ep = bfs(generate_phase2_edge_mtable(), [0]));\n}\n\nfunction bfs(mtable, goal_states) {\n  let N = mtable.length;\n  let nmoves = mtable[0].length;\n  let ptable = Array(N).fill(-1);\n  let queue = goal_states.slice();\n  let new_queue = [];\n  let depth = 0;\n  while (queue.length > 0) {\n    new_queue.length = 0;\n    for (let state of queue) {\n      if (ptable[state] !== -1) {\n        continue;\n      }\n      ptable[state] = depth;\n      for (let move_index = 0; move_index < nmoves; move_index++) {\n        let new_state = mtable[state][move_index];\n        while (new_state !== state) {\n          new_queue.push(new_state);\n          new_state = mtable[new_state][move_index];\n        }\n      }\n    }\n    [queue, new_queue] = [new_queue, queue];\n    depth += 1;\n  }\n  return ptable;\n}\n\nfunction ida_solve(indices, mtables, ptables, max_bound) {\n  max_bound = max_bound || 999999;\n  let ncoords = indices.length;\n  let bound = 0;\n  for (let i = 0; i < ncoords; i++) {\n    bound = Math.max(bound, ptables[i][indices[i]]);\n  }\n  while (bound <= max_bound) {\n    let path = ida_search(indices, mtables, ptables, bound, -1);\n    if (path !== undefined) {\n      return path;\n    }\n    bound++;\n  }\n}\n\nfunction ida_search(indices, mtables, ptables, bound, last) {\n  let ncoords = indices.length;\n  let nmoves = mtables[0][0].length;\n  let heuristic = 0;\n  for (let i = 0; i < ncoords; i++) {\n    heuristic = Math.max(heuristic, ptables[i][indices[i]]);\n  }\n  if (heuristic > bound) {\n    return;\n  }\n  if (bound === 0) {\n    return [];\n  }\n  if (heuristic === 0 && bound === 1) {\n    return;\n  }\n  for (let m = 0; m < nmoves; m++) {\n    if (m === last) {\n      continue;\n    }\n    if (m < last && tetrad[m] === tetrad[last]) {\n      continue;\n    }\n    let new_indices = indices.slice();\n    for (let c = 0; c < ncoords; c++) {\n      new_indices[c] = mtables[c][indices[c]][m];\n    }\n    let r = 1;\n    while (indices.some((_, i) => indices[i] !== new_indices[i])) {\n      let subpath = ida_search(new_indices, mtables, ptables, bound - 1, m);\n      if (subpath !== undefined) {\n        return [[m, r]].concat(subpath);\n      }\n      for (let c = 0; c < ncoords; c++) {\n        new_indices[c] = mtables[c][new_indices[c]][m];\n      }\n      r++;\n    }\n  }\n  return;\n}\n\nfunction* ida_solve_gen(indices, mtables, ptables) {\n  let ncoords = indices.length;\n  let bound = 0;\n  for (let i = 0; i < ncoords; i++) {\n    bound = Math.max(bound, ptables[i][indices[i]]);\n  }\n  while (true) {\n    yield* ida_search_gen(indices, mtables, ptables, bound, -1);\n    bound++;\n  }\n}\n\nfunction* ida_search_gen(indices, mtables, ptables, bound, last) {\n  let ncoords = indices.length;\n  let nmoves = mtables[0][0].length;\n  let heuristic = 0;\n  for (let i = 0; i < ncoords; i++) {\n    heuristic = Math.max(heuristic, ptables[i][indices[i]]);\n  }\n  if (heuristic > bound) {\n    return;\n  }\n  if (bound === 0) {\n    yield [];\n    return;\n  }\n  if (heuristic === 0 && bound === 1) {\n    return;\n  }\n  for (let m = 0; m < nmoves; m++) {\n    if (m === last) {\n      continue;\n    }\n    if (m < last && tetrad[m] === tetrad[last]) {\n      continue;\n    }\n    let new_indices = indices.slice();\n    for (let c = 0; c < ncoords; c++) {\n      new_indices[c] = mtables[c][indices[c]][m];\n    }\n    let r = 1;\n    while (indices.some((_, i) => indices[i] !== new_indices[i])) {\n      let subpath_gen = ida_search_gen(\n        new_indices,\n        mtables,\n        ptables,\n        bound - 1,\n        m,\n      );\n      while (true) {\n        let { value: subpath, done } = subpath_gen.next();\n        if (done) {\n          break;\n        }\n        yield [[m, r]].concat(subpath);\n      }\n      for (let c = 0; c < ncoords; c++) {\n        new_indices[c] = mtables[c][new_indices[c]][m];\n      }\n      r++;\n    }\n  }\n}\n\nexport async function getRandomRediCubeScramble() {\n  return new Alg(stringify_move_sequence(generate_random_state_scramble()));\n}\n"],
  "mappings": "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",
  "names": ["cachedData", "sgsDataFTO", "uncachedSGSDataFTO", "parseSGS", "puzzles", "factorial", "n", "f", "i", "C", "k", "c", "permutation_to_index", "perm", "ind", "e", "x", "index_to_permutation", "j", "permutation_parity", "A", "parity", "index_to_evenpermutation", "evenpermutation_to_index", "comb_to_index", "l", "bits", "ones", "zeros", "b", "index_to_comb", "compose", "permutation_from_cycle", "cycle", "unsparsify_list", "d", "compose_state", "state1", "state2", "o", "move_UL", "move_U", "move_UR", "move_F", "move_L", "move_B", "move_R", "move_D", "solved", "moves", "move_names", "tetrad", "stringify_move_sequence", "move_sequence", "suffixes", "m", "r", "move_names", "generate_random_state", "p", "index_to_evenpermutation", "randomUIntBelow", "factorial", "o", "i", "generate_random_state_scramble", "solve", "solve", "state", "phase1_indices", "index_phase1", "phase1_mtables", "generate_phase1_edge_mtable", "generate_phase1_separate_mtable", "phase1_ptables", "generate_phase1_edge_ptable", "generate_phase1_separate_ptable", "phase2_mtables", "generate_phase2_edge_mtable", "generate_phase2_corner_mtable", "phase2_ptables", "generate_phase2_edge_ptable", "generate_phase1_corner_ptable", "phase1gen", "ida_solve_gen", "best", "intermediate_states", "start_time", "i", "sol1", "done", "new_state", "m", "r", "compose_state", "moves", "edge_ind", "evenpermutation_to_index", "corner_ind", "phase2_indices", "moves_left", "sol2", "ida_solve", "filtered", "x", "separate_ind", "comb_to_index", "permutation_parity", "tables", "generate_phase1_corner_mtable", "mtable", "o", "j", "ptable", "mtable_single", "I", "bfs", "C12_4", "C", "mtable_c", "comb", "index_to_comb", "perm", "k", "new_perm", "compose", "new_comb", "parity", "mtable_co", "m0", "m1", "phase1_mtable", "n", "HALFFACT8", "factorial", "l", "L", "goal_states", "N", "nmoves", "queue", "new_queue", "depth", "move_index", "indices", "mtables", "ptables", "max_bound", "ncoords", "bound", "path", "ida_search", "last", "heuristic", "tetrad", "new_indices", "c", "_", "subpath", "ida_search_gen", "subpath_gen", "getRandomRediCubeScramble", "Alg", "stringify_move_sequence", "generate_random_state_scramble"]
}
