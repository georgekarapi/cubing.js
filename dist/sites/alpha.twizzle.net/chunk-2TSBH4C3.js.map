{
  "version": 3,
  "sources": ["../../../src/sites/alpha.twizzle.net/explore/twisty-player.ts"],
  "sourcesContent": ["import { Vector3 } from \"three\";\nimport { getPuzzleDescriptionString } from \"../../../cubing/puzzle-geometry\";\nimport type { PuzzleDescriptionString } from \"../../../cubing/puzzle-geometry/PGPuzzles\";\nimport { getPuzzleGeometryByDesc } from \"../../../cubing/puzzle-geometry/PuzzleGeometry\";\nimport {\n  setTwistyDebug,\n  TwistyPlayer,\n  TwistyPlayerConfig,\n} from \"../../../cubing/twisty\";\nimport type { OrbitCoordinates } from \"../../../cubing/twisty/model/props/viewer/OrbitCoordinatesRequestProp\";\nimport { positionToOrbitCoordinates } from \"../../../cubing/twisty/views/3D/TwistyOrbitControls\";\nimport { getConfigFromURL } from \"../../../cubing/twisty/views/twizzle/url-params\";\nimport { setupPropInputs } from \"./prop-inputs\";\nimport { getURLParam, setAlgParam } from \"./url-params\";\n\nexport function constructTwistyPlayer(): TwistyPlayer {\n  if (getURLParam(\"debug-show-render-stats\")) {\n    setTwistyDebug({ showRenderStats: true });\n  }\n\n  const config = getConfigFromURL();\n  console.log(config);\n  config.experimentalPuzzleDescription ??= getPuzzleDescriptionString(\n    config.puzzle ?? \"3x3x3\",\n  );\n  delete config[\"puzzle\"];\n  const explorerConfig: TwistyPlayerConfig = {\n    cameraLatitudeLimit: 90,\n    viewerLink: \"none\",\n    experimentalMovePressInput: \"basic\",\n    experimentalMovePressCancelOptions: {\n      directional: \"any-direction\",\n      puzzleSpecificModWrap: \"gravity\",\n    },\n    hintFacelets: \"none\",\n  };\n  Object.assign(config, explorerConfig);\n  const twistyPlayer = new TwistyPlayer(config);\n\n  const initialCameraOrbitCoordinatesPromise = cameraCoords(\n    config.experimentalPuzzleDescription ?? \"c\", // TODO\n  );\n  // TODO\n  twistyPlayer.experimentalModel.twistySceneModel.orbitCoordinatesRequest.set(\n    initialCameraOrbitCoordinatesPromise,\n  );\n\n  setupPropInputs(twistyPlayer);\n  twistyPlayer.experimentalModel.alg.addFreshListener((algWithIssues) => {\n    setAlgParam(\"alg\", algWithIssues.alg.toString());\n  });\n  return twistyPlayer;\n}\n\nconst platonicShapeToGeoTowardsViewer: Record<string, string> = {\n  t: \"FLR\",\n  c: \"URF\",\n  o: \"FLUR\",\n  d: \"F\",\n  i: \"F\",\n};\nasync function cameraCoords(\n  desc: PuzzleDescriptionString,\n): Promise<OrbitCoordinates> {\n  const pg = getPuzzleGeometryByDesc(desc); // TODO: Avoid this\n  const platonicShape = desc[0];\n  const geoTowardsViewer = platonicShapeToGeoTowardsViewer[platonicShape];\n\n  if (!geoTowardsViewer) {\n    throw new Error(\"invalid shape for coords\");\n  }\n  const norm = pg.getGeoNormal(geoTowardsViewer);\n  if (!norm) {\n    throw new Error(\"invalid normal\");\n  }\n  return positionToOrbitCoordinates(new Vector3(...norm).multiplyScalar(6));\n}\n"],
  "mappings": "uQAeO,SAASA,GAAsC,CAChDC,EAAY,yBAAyB,GACvCC,EAAe,CAAE,gBAAiB,EAAK,CAAC,EAG1C,IAAMC,EAASC,EAAiB,EAChC,QAAQ,IAAID,CAAM,EAClBA,EAAO,gCAAPA,EAAO,8BAAkCE,EACvCF,EAAO,QAAU,OACnB,GACA,OAAOA,EAAO,OAWd,OAAO,OAAOA,EAV6B,CACzC,oBAAqB,GACrB,WAAY,OACZ,2BAA4B,QAC5B,mCAAoC,CAClC,YAAa,gBACb,sBAAuB,SACzB,EACA,aAAc,MAChB,CACoC,EACpC,IAAMG,EAAe,IAAIC,EAAaJ,CAAM,EAEtCK,EAAuCC,EAC3CN,EAAO,+BAAiC,GAC1C,EAEA,OAAAG,EAAa,kBAAkB,iBAAiB,wBAAwB,IACtEE,CACF,EAEAE,EAAgBJ,CAAY,EAC5BA,EAAa,kBAAkB,IAAI,iBAAkBK,GAAkB,CACrEC,EAAY,MAAOD,EAAc,IAAI,SAAS,CAAC,CACjD,CAAC,EACML,CACT,CAEA,IAAMO,EAA0D,CAC9D,EAAG,MACH,EAAG,MACH,EAAG,OACH,EAAG,IACH,EAAG,GACL,EACA,eAAeJ,EACbK,EAC2B,CAC3B,IAAMC,EAAKC,EAAwBF,CAAI,EACjCG,EAAgBH,EAAK,GACrBI,EAAmBL,EAAgCI,GAEzD,GAAI,CAACC,EACH,MAAM,IAAI,MAAM,0BAA0B,EAE5C,IAAMC,EAAOJ,EAAG,aAAaG,CAAgB,EAC7C,GAAI,CAACC,EACH,MAAM,IAAI,MAAM,gBAAgB,EAElC,OAAOC,EAA2B,IAAIC,EAAQ,GAAGF,CAAI,EAAE,eAAe,CAAC,CAAC,CAC1E",
  "names": ["constructTwistyPlayer", "getURLParam", "setTwistyDebug", "config", "getConfigFromURL", "getPuzzleDescriptionString", "twistyPlayer", "TwistyPlayer", "initialCameraOrbitCoordinatesPromise", "cameraCoords", "setupPropInputs", "algWithIssues", "setAlgParam", "platonicShapeToGeoTowardsViewer", "desc", "pg", "getPuzzleGeometryByDesc", "platonicShape", "geoTowardsViewer", "norm", "positionToOrbitCoordinates", "Vector3"]
}
