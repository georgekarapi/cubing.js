{
  "version": 3,
  "sources": ["../../../src/sites/alpha.twizzle.net/explore/prop-inputs.ts"],
  "sourcesContent": ["import type { TwistyPlayer } from \"../../../cubing/twisty\";\nimport type { TempoScaleProp } from \"../../../cubing/twisty/model/props/timeline/TempoScaleProp\";\nimport type { TwistyPropSource } from \"../../../cubing/twisty/model/props/TwistyProp\";\n\n// Returns the initial value.\nfunction setupPropCheckbox<T extends string>(\n  domID: string,\n  prop: TwistyPropSource<T>,\n  checkedValue: T,\n  uncheckedValue: T,\n) {\n  const elem = document.getElementById(domID) as HTMLInputElement;\n  const update = () => {\n    prop.set(elem.checked ? checkedValue : uncheckedValue);\n  };\n  update();\n  prop.addFreshListener((value) => {\n    elem.checked = ![uncheckedValue].includes(value);\n  });\n  elem.addEventListener(\"change\", update);\n}\n\nfunction setupTempoScale(tempoScaleProp: TempoScaleProp): void {\n  const tempoScaleInput = document.querySelector(\n    \"#tempo-scale\",\n  ) as HTMLInputElement;\n  const tempoScaleDisplay = document.querySelector(\n    \"#tempo-scale-display\",\n  ) as HTMLSpanElement;\n  tempoScaleInput.addEventListener(\"input\", () => {\n    tempoScaleProp.set(parseFloat(tempoScaleInput.value));\n    tempoScaleDisplay.textContent = `${tempoScaleInput.value}\u00D7`;\n  });\n  tempoScaleProp.addFreshListener((tempoScale) => {\n    tempoScaleInput.value = tempoScale.toString();\n    tempoScaleDisplay.textContent = `${tempoScale}\u00D7`;\n  });\n}\n\nexport function setupPropInputs(twistyPlayer: TwistyPlayer): void {\n  setupPropCheckbox(\n    \"visualization-3D\",\n    twistyPlayer.experimentalModel.visualizationFormat,\n    \"PG3D\",\n    \"2D\",\n  );\n  setupPropCheckbox(\n    \"back-view-side-by-side\",\n    twistyPlayer.experimentalModel.backView,\n    \"side-by-side\",\n    \"top-right\",\n  );\n  setupPropCheckbox(\n    \"foundation-display-opaque\",\n    twistyPlayer.experimentalModel.twistySceneModel.foundationDisplay,\n    \"opaque\",\n    \"none\",\n  );\n  setupPropCheckbox(\n    \"hint-facelets-floating\",\n    twistyPlayer.experimentalModel.twistySceneModel.hintFacelet,\n    \"floating\",\n    \"none\",\n  );\n  setupTempoScale(twistyPlayer.experimentalModel.tempoScale);\n}\n"],
  "mappings": "AAKA,SAASA,EACPC,EACAC,EACAC,EACAC,EACA,CACA,IAAMC,EAAO,SAAS,eAAeJ,CAAK,EACpCK,EAAS,IAAM,CACnBJ,EAAK,IAAIG,EAAK,QAAUF,EAAeC,CAAc,CACvD,EACAE,EAAO,EACPJ,EAAK,iBAAkBK,GAAU,CAC/BF,EAAK,QAAU,CAAC,CAACD,CAAc,EAAE,SAASG,CAAK,CACjD,CAAC,EACDF,EAAK,iBAAiB,SAAUC,CAAM,CACxC,CAEA,SAASE,EAAgBC,EAAsC,CAC7D,IAAMC,EAAkB,SAAS,cAC/B,cACF,EACMC,EAAoB,SAAS,cACjC,sBACF,EACAD,EAAgB,iBAAiB,QAAS,IAAM,CAC9CD,EAAe,IAAI,WAAWC,EAAgB,KAAK,CAAC,EACpDC,EAAkB,YAAc,GAAGD,EAAgB,WACrD,CAAC,EACDD,EAAe,iBAAkBG,GAAe,CAC9CF,EAAgB,MAAQE,EAAW,SAAS,EAC5CD,EAAkB,YAAc,GAAGC,OACrC,CAAC,CACH,CAEO,SAASC,EAAgBC,EAAkC,CAChEd,EACE,mBACAc,EAAa,kBAAkB,oBAC/B,OACA,IACF,EACAd,EACE,yBACAc,EAAa,kBAAkB,SAC/B,eACA,WACF,EACAd,EACE,4BACAc,EAAa,kBAAkB,iBAAiB,kBAChD,SACA,MACF,EACAd,EACE,yBACAc,EAAa,kBAAkB,iBAAiB,YAChD,WACA,MACF,EACAN,EAAgBM,EAAa,kBAAkB,UAAU,CAC3D",
  "names": ["setupPropCheckbox", "domID", "prop", "checkedValue", "uncheckedValue", "elem", "update", "value", "setupTempoScale", "tempoScaleProp", "tempoScaleInput", "tempoScaleDisplay", "tempoScale", "setupPropInputs", "twistyPlayer"]
}
