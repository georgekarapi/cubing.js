{
  "version": 3,
  "sources": ["../../../src/cubing/notation/CountMoves.ts", "../../../src/cubing/notation/CountAnimatedLeaves.ts"],
  "sourcesContent": ["// TODO: move this file somewhere permanent.\nimport {\n  Alg,\n  Grouping,\n  LineComment,\n  Commutator,\n  Conjugate,\n  Move,\n  Newline,\n  Pause,\n  TraversalUp,\n} from \"../alg\";\nimport { functionFromTraversal } from \"../alg\";\n\n/*\n *   For movecount, that understands puzzle rotations.  This code\n *   should be moved to the alg class, probably.\n */\nclass CountMoves extends TraversalUp<number> {\n  constructor(private metric: (move: Move) => number) {\n    super();\n  }\n\n  public traverseAlg(alg: Alg): number {\n    let r = 0;\n    for (const algNode of alg.childAlgNodes()) {\n      r += this.traverseAlgNode(algNode);\n    }\n    return r;\n  }\n\n  public traverseGrouping(grouping: Grouping): number {\n    const alg: Alg = grouping.alg;\n    return this.traverseAlg(alg) * Math.abs(grouping.amount);\n  }\n\n  public traverseMove(move: Move): number {\n    return this.metric(move);\n  }\n\n  public traverseCommutator(commutator: Commutator): number {\n    return (\n      2 * (this.traverseAlg(commutator.A) + this.traverseAlg(commutator.B))\n    );\n  }\n\n  public traverseConjugate(conjugate: Conjugate): number {\n    return 2 * this.traverseAlg(conjugate.A) + this.traverseAlg(conjugate.B);\n  }\n\n  // TODO: Remove spaces between repeated pauses (in traverseSequence)\n  public traversePause(_pause: Pause): number {\n    return 0;\n  }\n\n  public traverseNewline(_newLine: Newline): number {\n    return 0;\n  }\n\n  // TODO: Enforce being followed by a newline (or the end of the alg)?\n  public traverseLineComment(_comment: LineComment): number {\n    return 0;\n  }\n}\n\nfunction isCharUppercase(c: string): boolean {\n  return \"A\" <= c && c <= \"Z\";\n}\n\n// TODO: Implement a puzzle-specific way to calculate this.\nfunction baseMetric(move: Move): number {\n  const fam = move.family;\n  if (\n    (isCharUppercase(fam[0]) && fam[fam.length - 1] === \"v\") ||\n    fam === \"x\" ||\n    fam === \"y\" ||\n    fam === \"z\" ||\n    fam === \"T\"\n  ) {\n    return 0;\n  } else {\n    return 1;\n  }\n}\n\nfunction etmMetric(_move: Move): number {\n  return 1;\n}\n\n// TODO: Implement a puzzle-specific way to calculate this.\nfunction quantumMetric(move: Move): number {\n  const fam = move.family;\n  if (\n    (isCharUppercase(fam[0]) && fam[fam.length - 1] === \"v\") ||\n    fam === \"x\" ||\n    fam === \"y\" ||\n    fam === \"z\" ||\n    fam === \"T\"\n  ) {\n    return 0;\n  } else {\n    return Math.abs(move.amount);\n  }\n}\n\nexport const countMoves = functionFromTraversal(CountMoves, [baseMetric]);\nexport const countMovesETM = functionFromTraversal(CountMoves, [etmMetric]);\nexport const countQuantumMoves = functionFromTraversal(CountMoves, [\n  quantumMetric,\n]);\n", "import {\n  Alg,\n  Commutator,\n  Conjugate,\n  Grouping,\n  LineComment,\n  Move,\n  Newline,\n  Pause,\n  TraversalUp,\n} from \"../alg\";\nimport { functionFromTraversal } from \"../alg\";\n\n// TODO: Include Pause, include amounts\nclass CountAnimatedLeaves extends TraversalUp<number, number> {\n  public traverseAlg(alg: Alg): number {\n    let total = 0;\n    for (const part of alg.childAlgNodes()) {\n      total += this.traverseAlgNode(part);\n    }\n    return total;\n  }\n\n  public traverseGrouping(grouping: Grouping): number {\n    return this.traverseAlg(grouping.alg) * Math.abs(grouping.amount);\n  }\n\n  public traverseMove(_move: Move): number {\n    return 1;\n  }\n\n  public traverseCommutator(commutator: Commutator): number {\n    return (\n      2 * (this.traverseAlg(commutator.A) + this.traverseAlg(commutator.B))\n    );\n  }\n\n  public traverseConjugate(conjugate: Conjugate): number {\n    return 2 * this.traverseAlg(conjugate.A) + this.traverseAlg(conjugate.B);\n  }\n\n  public traversePause(_pause: Pause): number {\n    return 1;\n  }\n\n  public traverseNewline(_newline: Newline): number {\n    return 0;\n  }\n\n  public traverseLineComment(_comment: LineComment): number {\n    return 0;\n  }\n}\n\nexport const countAnimatedLeaves = functionFromTraversal(CountAnimatedLeaves);\n"],
  "mappings": "+CAkBA,IAAMA,EAAN,cAAyBC,CAAoB,CAC3C,YAAoBC,EAAgC,CAClD,MAAM,EADY,YAAAA,CAEpB,CAEO,YAAYC,EAAkB,CACnC,IAAIC,EAAI,EACR,QAAWC,KAAWF,EAAI,cAAc,EACtCC,GAAK,KAAK,gBAAgBC,CAAO,EAEnC,OAAOD,CACT,CAEO,iBAAiBE,EAA4B,CAClD,IAAMH,EAAWG,EAAS,IAC1B,OAAO,KAAK,YAAYH,CAAG,EAAI,KAAK,IAAIG,EAAS,MAAM,CACzD,CAEO,aAAaC,EAAoB,CACtC,OAAO,KAAK,OAAOA,CAAI,CACzB,CAEO,mBAAmBC,EAAgC,CACxD,MACE,IAAK,KAAK,YAAYA,EAAW,CAAC,EAAI,KAAK,YAAYA,EAAW,CAAC,EAEvE,CAEO,kBAAkBC,EAA8B,CACrD,MAAO,GAAI,KAAK,YAAYA,EAAU,CAAC,EAAI,KAAK,YAAYA,EAAU,CAAC,CACzE,CAGO,cAAcC,EAAuB,CAC1C,MAAO,EACT,CAEO,gBAAgBC,EAA2B,CAChD,MAAO,EACT,CAGO,oBAAoBC,EAA+B,CACxD,MAAO,EACT,CACF,EAEA,SAASC,EAAgBC,EAAoB,CAC3C,MAAO,KAAOA,GAAKA,GAAK,GAC1B,CAGA,SAASC,EAAWR,EAAoB,CACtC,IAAMS,EAAMT,EAAK,OACjB,OACGM,EAAgBG,EAAI,EAAE,GAAKA,EAAIA,EAAI,OAAS,KAAO,KACpDA,IAAQ,KACRA,IAAQ,KACRA,IAAQ,KACRA,IAAQ,IAED,EAEA,CAEX,CAEA,SAASC,EAAUC,EAAqB,CACtC,MAAO,EACT,CAGA,SAASC,EAAcZ,EAAoB,CACzC,IAAMS,EAAMT,EAAK,OACjB,OACGM,EAAgBG,EAAI,EAAE,GAAKA,EAAIA,EAAI,OAAS,KAAO,KACpDA,IAAQ,KACRA,IAAQ,KACRA,IAAQ,KACRA,IAAQ,IAED,EAEA,KAAK,IAAIT,EAAK,MAAM,CAE/B,CAEO,IAAMa,EAAaC,EAAsBrB,EAAY,CAACe,CAAU,CAAC,EAC3DO,EAAgBD,EAAsBrB,EAAY,CAACiB,CAAS,CAAC,EAC7DM,EAAoBF,EAAsBrB,EAAY,CACjEmB,CACF,CAAC,EC/FD,IAAMK,EAAN,cAAkCC,CAA4B,CACrD,YAAYC,EAAkB,CACnC,IAAIC,EAAQ,EACZ,QAAWC,KAAQF,EAAI,cAAc,EACnCC,GAAS,KAAK,gBAAgBC,CAAI,EAEpC,OAAOD,CACT,CAEO,iBAAiBE,EAA4B,CAClD,OAAO,KAAK,YAAYA,EAAS,GAAG,EAAI,KAAK,IAAIA,EAAS,MAAM,CAClE,CAEO,aAAaC,EAAqB,CACvC,MAAO,EACT,CAEO,mBAAmBC,EAAgC,CACxD,MACE,IAAK,KAAK,YAAYA,EAAW,CAAC,EAAI,KAAK,YAAYA,EAAW,CAAC,EAEvE,CAEO,kBAAkBC,EAA8B,CACrD,MAAO,GAAI,KAAK,YAAYA,EAAU,CAAC,EAAI,KAAK,YAAYA,EAAU,CAAC,CACzE,CAEO,cAAcC,EAAuB,CAC1C,MAAO,EACT,CAEO,gBAAgBC,EAA2B,CAChD,MAAO,EACT,CAEO,oBAAoBC,EAA+B,CACxD,MAAO,EACT,CACF,EAEaC,EAAsBC,EAAsBb,CAAmB",
  "names": ["CountMoves", "TraversalUp", "metric", "alg", "r", "algNode", "grouping", "move", "commutator", "conjugate", "_pause", "_newLine", "_comment", "isCharUppercase", "c", "baseMetric", "fam", "etmMetric", "_move", "quantumMetric", "countMoves", "functionFromTraversal", "countMovesETM", "countQuantumMoves", "CountAnimatedLeaves", "TraversalUp", "alg", "total", "part", "grouping", "_move", "commutator", "conjugate", "_pause", "_newline", "_comment", "countAnimatedLeaves", "functionFromTraversal"]
}
