{
  "version": 3,
  "sources": ["../../../node_modules/random-uint-below/dist/esm/index.js"],
  "sourcesContent": ["// src/random-uint-below/randomUIntBelow.ts\nvar MAX_JS_PRECISE_INT = 9007199254740992;\nvar UPPER_HALF_MULTIPLIER = 2097152;\nvar LOWER_HALF_DIVIDER = 2048;\nfunction crypto() {\n  const { crypto: crypto2 } = globalThis;\n  if (!crypto2) {\n    const { node: nodeVersion } = globalThis.process?.versions;\n    if (nodeVersion && parseInt(nodeVersion.split(\".\")[0]) < 19) {\n      throw new Error(\n        \"`node` 19 or above is required for randomization using `random-uint-below`\"\n      );\n    }\n  }\n  return crypto2;\n}\nfunction random53BitNumber() {\n  const arr = new Uint32Array(2);\n  crypto().getRandomValues(arr);\n  const upper = arr[0];\n  const lower = arr[1];\n  return Math.floor(upper * UPPER_HALF_MULTIPLIER) + Math.floor(lower / LOWER_HALF_DIVIDER);\n}\nfunction validateMax(max) {\n  if (typeof max !== \"number\" || max < 0 || Math.floor(max) !== max) {\n    throw new Error(\n      \"randomUIntBelow() not called with a positive integer value.\"\n    );\n  }\n  if (max > MAX_JS_PRECISE_INT) {\n    throw new Error(\n      `Called randomUIntBelow() with max === ${max}, which is larger than JavaScript can handle with integer precision.`\n    );\n  }\n}\nfunction randomUIntBelow(max) {\n  validateMax(max);\n  let val = random53BitNumber();\n  const maxUniformSamplingRange = Math.floor(MAX_JS_PRECISE_INT / max) * max;\n  while (val >= maxUniformSamplingRange) {\n    return val = random53BitNumber();\n  }\n  return val % max;\n}\n\n// src/random-uint-below/array-operations.ts\nfunction randomChoice(arr) {\n  return arr[randomUIntBelow(arr.length)];\n}\nasync function randomPermuteInPlace(arr) {\n  for (let i = 1; i < arr.length; i++) {\n    const j = randomUIntBelow(i);\n    [arr[i], arr[j]] = [arr[j], arr[i]];\n  }\n}\nexport {\n  randomChoice,\n  randomPermuteInPlace,\n  randomUIntBelow\n};\n"],
  "mappings": "AACA,IAAIA,EAAqB,iBACrBC,EAAwB,QACxBC,EAAqB,KACzB,SAASC,GAAS,CAChB,GAAM,CAAE,OAAQC,CAAQ,EAAI,WAC5B,GAAI,CAACA,EAAS,CACZ,GAAM,CAAE,KAAMC,CAAY,EAAI,WAAW,SAAS,SAClD,GAAIA,GAAe,SAASA,EAAY,MAAM,GAAG,EAAE,EAAE,EAAI,GACvD,MAAM,IAAI,MACR,4EACF,CAEJ,CACA,OAAOD,CACT,CACA,SAASE,GAAoB,CAC3B,IAAMC,EAAM,IAAI,YAAY,CAAC,EAC7BJ,EAAO,EAAE,gBAAgBI,CAAG,EAC5B,IAAMC,EAAQD,EAAI,GACZE,EAAQF,EAAI,GAClB,OAAO,KAAK,MAAMC,EAAQP,CAAqB,EAAI,KAAK,MAAMQ,EAAQP,CAAkB,CAC1F,CACA,SAASQ,EAAYC,EAAK,CACxB,GAAI,OAAOA,GAAQ,UAAYA,EAAM,GAAK,KAAK,MAAMA,CAAG,IAAMA,EAC5D,MAAM,IAAI,MACR,6DACF,EAEF,GAAIA,EAAMX,EACR,MAAM,IAAI,MACR,yCAAyCW,uEAC3C,CAEJ,CACA,SAASC,EAAgBD,EAAK,CAC5BD,EAAYC,CAAG,EACf,IAAIE,EAAMP,EAAkB,EACtBQ,EAA0B,KAAK,MAAMd,EAAqBW,CAAG,EAAIA,EACvE,KAAOE,GAAOC,GACZ,OAAOD,EAAMP,EAAkB,EAEjC,OAAOO,EAAMF,CACf,CAGA,SAASI,EAAaR,EAAK,CACzB,OAAOA,EAAIK,EAAgBL,EAAI,MAAM,EACvC,CACA,eAAeS,EAAqBT,EAAK,CACvC,QAASU,EAAI,EAAGA,EAAIV,EAAI,OAAQU,IAAK,CACnC,IAAMC,EAAIN,EAAgBK,CAAC,EAC3B,CAACV,EAAIU,GAAIV,EAAIW,EAAE,EAAI,CAACX,EAAIW,GAAIX,EAAIU,EAAE,CACpC,CACF",
  "names": ["MAX_JS_PRECISE_INT", "UPPER_HALF_MULTIPLIER", "LOWER_HALF_DIVIDER", "crypto", "crypto2", "nodeVersion", "random53BitNumber", "arr", "upper", "lower", "validateMax", "max", "randomUIntBelow", "val", "maxUniformSamplingRange", "randomChoice", "randomPermuteInPlace", "i", "j"]
}
