{
  "version": 3,
  "sources": ["../../../src/sites/alpha.twizzle.net/edit/supported-puzzles.ts"],
  "sourcesContent": ["import {\n  getPuzzleGeometryByDesc,\n  StickerDat,\n} from \"../../../cubing/puzzle-geometry\";\nimport { puzzles } from \"../../../cubing/puzzles\";\nimport type { PuzzleID, VisualizationFormat } from \"../../../cubing/twisty\";\n\nclass DisplayableKPuzzle {\n  public type: \"kpuzzle\" = \"kpuzzle\" as const;\n  // TODO: push display name into the KSolve defition.\n  constructor(private kpuzzleName: string, public viz: VisualizationFormat) {}\n\n  public displayName(): string {\n    return puzzles[this.kpuzzleName].fullName;\n  }\n\n  public puzzleName(): string {\n    return this.kpuzzleName;\n  }\n  // public async kpuzzleDefinition(): Promise<KPuzzleDefinition> {\n  //   return await puzzles[this.kpuzzleName].def();\n  // }\n}\n\nclass DisplayablePG3D {\n  public type: \"pg3d\" = \"pg3d\" as const;\n  public viz: VisualizationFormat = \"PG3D\";\n  constructor(\n    private displayNameStr: string,\n    private name: string,\n    private desc: string,\n    public polarVantages: boolean,\n  ) {}\n\n  public displayName(): string {\n    return this.displayNameStr;\n  }\n\n  public puzzleName(): string {\n    return this.name;\n  }\n\n  // public async kpuzzleDefinition(): Promise<KPuzzleDefinition> {\n  //   return puzzles[this.name].def();\n  // }\n\n  public stickerDat(): StickerDat {\n    // TODO: Remove `as` cast.\n    const pg = getPuzzleGeometryByDesc(this.desc, { orientCenters: true });\n    return pg.get3d();\n  }\n}\n\nexport type DisplayablePuzzle = DisplayableKPuzzle | DisplayablePG3D;\n\nenum OptGroup {\n  WCACubes = \"Cubes\",\n  WCAMore = \"More WCA puzzles\",\n  Other = \"Other puzzles\",\n}\nenum GeometrySymbol {\n  Square = \"\u25A0\",\n  Diamond = \"\u25C6\",\n  Pentagon = \"\u2B1F\",\n  TriangleUp = \"\u25B2\",\n  TriangleDown = \"\u25BC\",\n  Circle = \"\u25CF\",\n}\n\nconst puzzleData: Partial<\n  Record<\n    PuzzleID,\n    { \"2D\"?: boolean; optgroup: OptGroup; symbol: GeometrySymbol }\n  >\n> = {\n  \"2x2x2\": { optgroup: OptGroup.WCACubes, symbol: GeometrySymbol.Square },\n  \"3x3x3\": { optgroup: OptGroup.WCACubes, symbol: GeometrySymbol.Square },\n  \"4x4x4\": { optgroup: OptGroup.WCACubes, symbol: GeometrySymbol.Square },\n  \"5x5x5\": { optgroup: OptGroup.WCACubes, symbol: GeometrySymbol.Square },\n  \"6x6x6\": { optgroup: OptGroup.WCACubes, symbol: GeometrySymbol.Square },\n  \"7x7x7\": { optgroup: OptGroup.WCACubes, symbol: GeometrySymbol.Square },\n  // Note: the order is important! It matches the WCA website.\n  clock: {\n    \"2D\": true,\n    optgroup: OptGroup.WCAMore,\n    symbol: GeometrySymbol.Circle,\n  },\n  megaminx: { optgroup: OptGroup.WCAMore, symbol: GeometrySymbol.Pentagon },\n  pyraminx: { optgroup: OptGroup.WCAMore, symbol: GeometrySymbol.TriangleUp },\n  skewb: { optgroup: OptGroup.WCAMore, symbol: GeometrySymbol.Diamond },\n  square1: {\n    \"2D\": true,\n    optgroup: OptGroup.WCAMore,\n    symbol: GeometrySymbol.Diamond,\n  },\n  gigaminx: { optgroup: OptGroup.Other, symbol: GeometrySymbol.Pentagon },\n  fto: { optgroup: OptGroup.Other, symbol: GeometrySymbol.TriangleDown },\n  master_tetraminx: {\n    optgroup: OptGroup.Other,\n    symbol: GeometrySymbol.TriangleUp,\n  },\n  kilominx: {\n    \"2D\": true,\n    optgroup: OptGroup.Other,\n    symbol: GeometrySymbol.Pentagon,\n  },\n  redi_cube: {\n    \"2D\": true,\n    optgroup: OptGroup.Other,\n    symbol: GeometrySymbol.Square,\n  },\n  melindas2x2x2x2: {\n    \"2D\": true,\n    optgroup: OptGroup.Other,\n    symbol: GeometrySymbol.Square,\n  },\n};\n\nconst puzzleGroups: Record<string, { name: string; symbol: string }[]> = {};\nconst supportedPuzzles: { [s: string]: DisplayablePuzzle } = {};\nfor (const [puzzleName, puzzleInfo] of Object.entries(puzzleData)) {\n  (puzzleGroups[puzzleInfo.optgroup] ||= []).push({\n    name: puzzleName,\n    symbol: puzzleInfo.symbol,\n  });\n  supportedPuzzles[puzzleName] = new DisplayableKPuzzle(\n    puzzleName,\n    puzzleInfo[\"2D\"] ? \"2D\" : \"3D\",\n  );\n}\n\nexport { puzzleGroups, supportedPuzzles };\n"],
  "mappings": "wCAOA,IAAMA,EAAN,KAAyB,CAGvB,YAAoBC,EAA4BC,EAA0B,CAAtD,iBAAAD,EAA4B,SAAAC,EAFhD,KAAO,KAAkB,SAEkD,CAEpE,aAAsB,CAC3B,OAAOC,EAAQ,KAAK,aAAa,QACnC,CAEO,YAAqB,CAC1B,OAAO,KAAK,WACd,CAIF,EA+CA,IAAMC,EAKF,CACF,QAAS,CAAE,SAAU,QAAmB,OAAQ,QAAsB,EACtE,QAAS,CAAE,SAAU,QAAmB,OAAQ,QAAsB,EACtE,QAAS,CAAE,SAAU,QAAmB,OAAQ,QAAsB,EACtE,QAAS,CAAE,SAAU,QAAmB,OAAQ,QAAsB,EACtE,QAAS,CAAE,SAAU,QAAmB,OAAQ,QAAsB,EACtE,QAAS,CAAE,SAAU,QAAmB,OAAQ,QAAsB,EAEtE,MAAO,CACL,KAAM,GACN,SAAU,mBACV,OAAQ,QACV,EACA,SAAU,CAAE,SAAU,mBAAkB,OAAQ,QAAwB,EACxE,SAAU,CAAE,SAAU,mBAAkB,OAAQ,QAA0B,EAC1E,MAAO,CAAE,SAAU,mBAAkB,OAAQ,QAAuB,EACpE,QAAS,CACP,KAAM,GACN,SAAU,mBACV,OAAQ,QACV,EACA,SAAU,CAAE,SAAU,gBAAgB,OAAQ,QAAwB,EACtE,IAAK,CAAE,SAAU,gBAAgB,OAAQ,QAA4B,EACrE,iBAAkB,CAChB,SAAU,gBACV,OAAQ,QACV,EACA,SAAU,CACR,KAAM,GACN,SAAU,gBACV,OAAQ,QACV,EACA,UAAW,CACT,KAAM,GACN,SAAU,gBACV,OAAQ,QACV,EACA,gBAAiB,CACf,KAAM,GACN,SAAU,gBACV,OAAQ,QACV,CACF,EAEMC,EAAmE,CAAC,EACpEC,EAAuD,CAAC,EAvH9DC,EAwHA,OAAW,CAACC,EAAYC,CAAU,IAAK,OAAO,QAAQL,CAAU,GAC7DC,EAAAE,EAAaE,EAAW,YAAxBJ,EAAAE,GAAsC,CAAC,IAAG,KAAK,CAC9C,KAAMC,EACN,OAAQC,EAAW,MACrB,CAAC,EACDH,EAAiBE,GAAc,IAAIE,EACjCF,EACAC,EAAW,MAAQ,KAAO,IAC5B",
  "names": ["DisplayableKPuzzle", "kpuzzleName", "viz", "puzzles", "puzzleData", "puzzleGroups", "supportedPuzzles", "_a", "puzzleName", "puzzleInfo", "DisplayableKPuzzle"]
}
